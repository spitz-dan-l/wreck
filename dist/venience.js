/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/typescript/entry_points/build_dev.tsx");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./node_modules/csx/lib.es2015/background.js":
/*!***************************************************!*\
  !*** ./node_modules/csx/lib.es2015/background.js ***!
  \***************************************************/
/*! exports provided: background */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "background", function() { return background; });
/* harmony import */ var ___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! . */ "./node_modules/csx/lib.es2015/index.js");

function background() {
    var output = '';
    for (var i = 0; i < arguments.length; i++) {
        var background_1 = arguments[i];
        var backgroundSize = background_1.size
            ? '/' + background_1.size
            : '';
        var backgroundParts = [
            Object(___WEBPACK_IMPORTED_MODULE_0__["coalesce"])(background_1.image),
            Object(___WEBPACK_IMPORTED_MODULE_0__["coalesce"])(background_1.position) + backgroundSize,
            Object(___WEBPACK_IMPORTED_MODULE_0__["coalesce"])(background_1.repeat),
            Object(___WEBPACK_IMPORTED_MODULE_0__["coalesce"])(background_1.origin),
            Object(___WEBPACK_IMPORTED_MODULE_0__["coalesce"])(background_1.clip),
            Object(___WEBPACK_IMPORTED_MODULE_0__["coalesce"])(background_1.attachment),
            Object(___WEBPACK_IMPORTED_MODULE_0__["coalesce"])(background_1.color),
        ];
        var backgroundString = backgroundParts.filter(Boolean).join(' ');
        output += (output.length && backgroundString ? ', ' : '') + backgroundString;
    }
    return output;
}


/***/ }),

/***/ "./node_modules/csx/lib.es2015/border.js":
/*!***********************************************!*\
  !*** ./node_modules/csx/lib.es2015/border.js ***!
  \***********************************************/
/*! exports provided: border, borderColor, borderStyle, borderWidth */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "border", function() { return border; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "borderColor", function() { return borderColor; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "borderStyle", function() { return borderStyle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "borderWidth", function() { return borderWidth; });
/* harmony import */ var _utils_formatting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/formatting */ "./node_modules/csx/lib.es2015/utils/formatting.js");
/* harmony import */ var _lists__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./lists */ "./node_modules/csx/lib.es2015/lists.js");


/**
 * Returns the value with '' around it.  Any 's will be escaped \' in the output
 */
function border(p) {
    return Object(_lists__WEBPACK_IMPORTED_MODULE_1__["params"])(p.color, p.style, Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["ensureLength"])(p.width));
}
var borderColor = _lists__WEBPACK_IMPORTED_MODULE_1__["params"];
var borderStyle = _lists__WEBPACK_IMPORTED_MODULE_1__["params"];
var borderWidth = _lists__WEBPACK_IMPORTED_MODULE_1__["params"];


/***/ }),

/***/ "./node_modules/csx/lib.es2015/color.js":
/*!**********************************************!*\
  !*** ./node_modules/csx/lib.es2015/color.js ***!
  \**********************************************/
/*! exports provided: color, hsl, hsla, rgb, rgba, ColorHelper */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "color", function() { return color; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hsl", function() { return hsl; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "hsla", function() { return hsla; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rgb", function() { return rgb; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rgba", function() { return rgba; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ColorHelper", function() { return ColorHelper; });
/* harmony import */ var _utils_formatting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/formatting */ "./node_modules/csx/lib.es2015/utils/formatting.js");
/* harmony import */ var _utils_math__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils/math */ "./node_modules/csx/lib.es2015/utils/math.js");
var _a;


var RGB = 'rgb', HSL = 'hsl';
var converters = (_a = {},
    _a[RGB + HSL] = RGBtoHSL,
    _a[HSL + RGB] = HSLtoRGB,
    _a);
/**
 * Describe the ceiling for each color channel for each format
 */
var maxChannelValues = {
    r: 255,
    g: 255,
    b: 255,
    h: 360,
    s: 1,
    l: 1,
    a: 1
};
/**
 * Creates a color from a hex color code or named color.
 * e.g. color('red') or color('#FF0000') or color('#F00'))
 */
function color(value) {
    return parseHexCode(value) || parseColorFunction(value) || rgb(255, 0, 0);
}
/**
 * Creates a color from hue, saturation, and lightness.  Alpha is automatically set to 100%
 * @param hue The hue of the color. This should be a number between 0-360.
 * @param saturation The saturation of the color. This should be a number between 0-1 or a percentage string between 0%-100%.
 * @param lightness The lightness of the color. This should be a number between 0-1 or a percentage string between 0%-100%.
 * @param alpha The alpha of the color. This should be a number between 0-1 or a percentage string between 0%-100%. If not specified, this defaults to 1.
 */
function hsl(hue, saturation, lightness, alpha) {
    return new ColorHelper(HSL, modDegrees(hue), Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["ensurePercent"])(saturation), Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["ensurePercent"])(lightness), (alpha === undefined ? 1 : Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["ensurePercent"])(alpha)), alpha !== undefined /* hasAlpha*/);
}
/**
 * Creates a color from hue, saturation, lightness, and alpha
 * @param hue The hue of the color. This should be a number between 0-360.
 * @param saturation The saturation of the color. This should be a number between 0-1 or a percentage string between 0%-100%.
 * @param lightness The lightness of the color. This should be a number between 0-1 or a percentage string between 0%-100%.
 * @param alpha The alpha of the color. This should be a number between 0-1 or a percentage string between 0%-100%.
 */
function hsla(hue, saturation, lightness, alpha) {
    return new ColorHelper(HSL, modDegrees(hue), Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["ensurePercent"])(saturation), Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["ensurePercent"])(lightness), Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["ensurePercent"])(alpha), true);
}
/**
 * Creates a color form the red, blue, and green color space.  Alpha is automatically set to 100%
 * @param red The red channel of the color. This should be a number between 0-255.
 * @param blue The blue channel of the color. This should be a number between 0-255.
 * @param green The green channel of the color. This should be a number between 0-255.
 * @param alpha The alpha of the color. This should be a number between 0-1 or a percentage string between 0%-100%. If not specified, this defaults to 1.
 */
function rgb(red, blue, green, alpha) {
    return new ColorHelper(RGB, red, blue, green, (alpha === undefined ? 1 : Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["ensurePercent"])(alpha)), alpha !== undefined /* hasAlpha*/);
}
/**
 * Creates a color form the red, blue, green, and alpha in the color space
 * @param red The red channel of the color. This should be a number between 0-255.
 * @param blue The blue channel of the color. This should be a number between 0-255.
 * @param green The green channel of the color. This should be a number between 0-255.
 * @param alpha The alpha of the color. This should be a number between 0-1 or a percentage string between 0%-100%.
 */
function rgba(red, blue, green, alpha) {
    return new ColorHelper(RGB, red, blue, green, Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["ensurePercent"])(alpha), true);
}
function convertHelper(toFormat, helper, forceAlpha) {
    var fromFormat = helper.f, r = helper.r, g = helper.g, b = helper.b, a = helper.a;
    var newAlpha = forceAlpha === undefined ? helper.o : forceAlpha;
    if (fromFormat !== toFormat) {
        return converters[fromFormat + toFormat](r, g, b, a, newAlpha);
    }
    return forceAlpha === undefined ? helper : new ColorHelper(fromFormat, r, g, b, a, newAlpha);
}
/**
 * A CSS Color.  Includes utilities for converting between color types
 */
var ColorHelper = /** @class */ (function () {
    function ColorHelper(format, r, g, b, a, hasAlpha) {
        var self = this;
        self.f = format;
        self.o = hasAlpha;
        var isHSL = format === HSL;
        self.r = clampColor(isHSL ? 'h' : 'r', r);
        self.g = clampColor(isHSL ? 's' : 'g', g);
        self.b = clampColor(isHSL ? 'l' : 'b', b);
        self.a = clampColor('a', a);
    }
    /**
     * Converts the stored color into string form (which is used by Free Style)
     */
    ColorHelper.prototype.toString = function () {
        var _a = this, hasAlpha = _a.o, format = _a.f, r = _a.r, g = _a.g, b = _a.b, a = _a.a;
        var fnName;
        var params;
        // find function name and resolve first three channels
        if (format === RGB) {
            fnName = hasAlpha ? 'rgba' : RGB;
            params = [Object(_utils_math__WEBPACK_IMPORTED_MODULE_1__["round"])(r), Object(_utils_math__WEBPACK_IMPORTED_MODULE_1__["round"])(g), Object(_utils_math__WEBPACK_IMPORTED_MODULE_1__["round"])(b)];
        }
        else if (format === HSL) {
            fnName = hasAlpha ? 'hsla' : HSL;
            params = [Object(_utils_math__WEBPACK_IMPORTED_MODULE_1__["round"])(r), Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["formatPercent"])(Object(_utils_math__WEBPACK_IMPORTED_MODULE_1__["roundFloat"])(g, 100)), Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["formatPercent"])(Object(_utils_math__WEBPACK_IMPORTED_MODULE_1__["roundFloat"])(b, 100))];
        }
        else {
            throw new Error('Invalid color format');
        }
        // add alpha channel if needed
        if (hasAlpha) {
            params.push(Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["formatFloat"])(Object(_utils_math__WEBPACK_IMPORTED_MODULE_1__["roundFloat"])(a, 100000)));
        }
        // return as a string
        return Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["cssFunction"])(fnName, params);
    };
    /**
     * Converts to hex rgb(255, 255, 255) to #FFFFFF
     */
    ColorHelper.prototype.toHexString = function () {
        var color = convertHelper(RGB, this);
        return '#' + (toHex(color.r) + toHex(color.g) + toHex(color.b)).toUpperCase();
    };
    /**
     * Converts to the Hue, Saturation, Lightness color space
     */
    ColorHelper.prototype.toHSL = function () {
        return convertHelper(HSL, this, false);
    };
    /**
     * Converts to the Hue, Saturation, Lightness color space and adds an alpha channel
     */
    ColorHelper.prototype.toHSLA = function () {
        return convertHelper(HSL, this, true);
    };
    /**
     * Converts to the Red, Green, Blue color space
     */
    ColorHelper.prototype.toRGB = function () {
        return convertHelper(RGB, this, false);
    };
    /**
     * Converts to the Red, Green, Blue color space and adds an alpha channel
     */
    ColorHelper.prototype.toRGBA = function () {
        return convertHelper(RGB, this, true);
    };
    ColorHelper.prototype.red = function () {
        var _ = this;
        return (_.f === RGB ? _ : _.toRGB()).r;
    };
    ColorHelper.prototype.green = function () {
        var _ = this;
        return (_.f === RGB ? _ : _.toRGB()).g;
    };
    ColorHelper.prototype.blue = function () {
        var _ = this;
        return (_.f === RGB ? _ : _.toRGB()).b;
    };
    ColorHelper.prototype.hue = function () {
        var _ = this;
        return (_.f === HSL ? _ : _.toHSL()).r;
    };
    ColorHelper.prototype.saturation = function () {
        var _ = this;
        return (_.f === HSL ? _ : _.toHSL()).g;
    };
    ColorHelper.prototype.lightness = function () {
        var _ = this;
        return (_.f === HSL ? _ : _.toHSL()).b;
    };
    ColorHelper.prototype.alpha = function () {
        return this.a;
    };
    ColorHelper.prototype.opacity = function () {
        return this.a;
    };
    ColorHelper.prototype.invert = function () {
        var _ = this;
        var color2 = convertHelper(RGB, _);
        return convertHelper(_.f, new ColorHelper(RGB, 255 - color2.r, 255 - color2.g, 255 - color2.b, _.a, _.o));
    };
    ColorHelper.prototype.lighten = function (percent, relative) {
        var _ = this;
        var color2 = convertHelper(HSL, _);
        var max = maxChannelValues.l;
        var l = color2.b + (relative ? max - color2.b : max) * Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["ensurePercent"])(percent);
        return convertHelper(_.f, new ColorHelper(HSL, color2.r, color2.g, l, _.a, _.o));
    };
    ColorHelper.prototype.darken = function (percent, relative) {
        var _ = this;
        var color2 = convertHelper(HSL, _);
        var l = color2.b - (relative ? color2.b : maxChannelValues.l) * Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["ensurePercent"])(percent);
        return convertHelper(_.f, new ColorHelper(HSL, color2.r, color2.g, l, _.a, _.o));
    };
    ColorHelper.prototype.saturate = function (percent, relative) {
        var _ = this;
        var color2 = convertHelper(HSL, _);
        var max = maxChannelValues.s;
        var s = color2.g + (relative ? max - color2.g : max) * Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["ensurePercent"])(percent);
        return convertHelper(_.f, new ColorHelper(HSL, color2.r, s, color2.b, _.a, _.o));
    };
    ColorHelper.prototype.desaturate = function (percent, relative) {
        var _ = this;
        var color2 = convertHelper(HSL, _);
        var max = maxChannelValues.s;
        var s = color2.g - (relative ? color2.g : max) * Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["ensurePercent"])(percent);
        return convertHelper(_.f, new ColorHelper(HSL, color2.r, s, color2.b, _.a, _.o));
    };
    ColorHelper.prototype.grayscale = function () {
        return this.desaturate(1);
    };
    ColorHelper.prototype.fade = function (percent) {
        var _ = this;
        var a = clampColor('a', Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["ensurePercent"])(percent));
        return convertHelper(_.f, new ColorHelper(_.f, _.r, _.g, _.b, a, true));
    };
    ColorHelper.prototype.fadeOut = function (percent, relative) {
        var _ = this;
        var max = 1;
        var a = clampColor('a', _.a - (relative ? _.a : max) * Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["ensurePercent"])(percent));
        return convertHelper(_.f, new ColorHelper(_.f, _.r, _.g, _.b, a, true));
    };
    ColorHelper.prototype.fadeIn = function (percent, relative) {
        var _ = this;
        var max = 1;
        var a = clampColor('a', _.a + (relative ? _.a : max) * Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["ensurePercent"])(percent));
        return convertHelper(_.f, new ColorHelper(_.f, _.r, _.g, _.b, a, true));
    };
    ColorHelper.prototype.mix = function (mixin, weight) {
        var _ = this;
        var color2 = ensureColor(mixin);
        var g = convertHelper(RGB, _);
        var b = convertHelper(RGB, color2);
        var p = weight === undefined ? 0.5 : weight;
        var w = 2 * p - 1;
        var a = Math.abs(g.a - b.a);
        var w1 = ((w * a === -1 ? w : (w + a) / (1 + w * a)) + 1) / 2.0;
        var w2 = 1 - w1;
        var helper = new ColorHelper(RGB, Object(_utils_math__WEBPACK_IMPORTED_MODULE_1__["round"])(g.r * w1 + b.r * w2), Object(_utils_math__WEBPACK_IMPORTED_MODULE_1__["round"])(g.g * w1 + b.g * w2), Object(_utils_math__WEBPACK_IMPORTED_MODULE_1__["round"])(g.b * w1 + b.b * w2), g.a * p + b.a * (1 - p), _.o || color2.o);
        return convertHelper(this.f, helper);
    };
    ColorHelper.prototype.tint = function (weight) {
        return rgb(255, 255, 255).mix(this, weight);
    };
    ColorHelper.prototype.shade = function (weight) {
        return rgb(0, 0, 0).mix(this, weight);
    };
    ColorHelper.prototype.spin = function (degrees) {
        var _ = this;
        var color2 = convertHelper(HSL, _);
        return convertHelper(_.f, new ColorHelper(HSL, modDegrees(color2.r + degrees), color2.g, color2.b, _.a, _.o));
    };
    return ColorHelper;
}());

function toHex(n) {
    var i = Object(_utils_math__WEBPACK_IMPORTED_MODULE_1__["round"])(n);
    return (i < 16 ? '0' : '') + i.toString(16);
}
function modDegrees(n) {
    // note: maybe there is a way to simplify this
    return ((n < 0 ? 360 : 0) + n % 360) % 360;
}
function RGBtoHSL(r, g, b, a, hasAlpha) {
    var newR = r / 255;
    var newG = g / 255;
    var newB = b / 255;
    var min = Math.min(newR, newG, newB);
    var max = Math.max(newR, newG, newB);
    var l = (min + max) / 2;
    var delta = max - min;
    var h;
    if (max === min) {
        h = 0;
    }
    else if (newR === max) {
        h = (newG - newB) / delta;
    }
    else if (newG === max) {
        h = 2 + (newB - newR) / delta;
    }
    else if (newB === max) {
        h = 4 + (newR - newG) / delta;
    }
    else {
        h = 0;
    }
    h = Math.min(h * 60, 360);
    if (h < 0) {
        h += 360;
    }
    var s;
    if (max === min) {
        s = 0;
    }
    else if (l <= 0.5) {
        s = delta / (max + min);
    }
    else {
        s = delta / (2 - max - min);
    }
    return new ColorHelper(HSL, h, s, l, a, hasAlpha);
}
function HSLtoRGB(r, g, b, a, hasAlpha) {
    var newH = r / 360;
    var newS = g;
    var newL = b;
    if (newS === 0) {
        var val = newL * 255;
        return new ColorHelper(RGB, val, val, val, a, hasAlpha);
    }
    var t2 = newL < 0.5 ? newL * (1 + newS) : newL + newS - newL * newS;
    var t1 = 2 * newL - t2;
    var newR = 0, newG = 0, newB = 0;
    for (var i = 0; i < 3; i++) {
        var t3 = newH + 1 / 3 * -(i - 1);
        if (t3 < 0) {
            t3++;
        }
        if (t3 > 1) {
            t3--;
        }
        var val = void 0;
        if (6 * t3 < 1) {
            val = t1 + (t2 - t1) * 6 * t3;
        }
        else if (2 * t3 < 1) {
            val = t2;
        }
        else if (3 * t3 < 2) {
            val = t1 + (t2 - t1) * (2 / 3 - t3) * 6;
        }
        else {
            val = t1;
        }
        val *= 255;
        // manually set variables instead of using an array
        if (i === 0) {
            newR = val;
        }
        else if (i === 1) {
            newG = val;
        }
        else {
            newB = val;
        }
    }
    return new ColorHelper(RGB, newR, newG, newB, a, hasAlpha);
}
function clampColor(channel, value) {
    var min = 0;
    var max = maxChannelValues[channel];
    return value < min ? min : value > max ? max : value;
}
function ensureColor(c) {
    return c instanceof ColorHelper ? c : color(c);
}
function parseHexCode(stringValue) {
    var match = stringValue.match(/#(([a-f0-9]{6})|([a-f0-9]{3}))$/i);
    if (!match) {
        return undefined;
    }
    var hex = match[1];
    var hexColor = parseInt(hex.length === 3 ? hex[0] + hex[0] + hex[1] + hex[1] + hex[2] + hex[2] : hex, 16);
    var r = (hexColor >> 16) & 0xff;
    var b = (hexColor >> 8) & 0xff;
    var g = hexColor & 0xff;
    return new ColorHelper(RGB, r, b, g, 1, false);
}
function parseColorFunction(colorString) {
    var cssParts = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["parseCSSFunction"])(colorString);
    if (!cssParts || !(cssParts.length === 4 || cssParts.length === 5)) {
        return undefined;
    }
    var fn = cssParts[0];
    var isRGBA = fn === 'rgba';
    var isHSLA = fn === 'hsla';
    var isRGB = fn === RGB;
    var isHSL = fn === HSL;
    var hasAlpha = isHSLA || isRGBA;
    var type;
    if (isRGB || isRGBA) {
        type = RGB;
    }
    else if (isHSL || isHSLA) {
        type = HSL;
    }
    else {
        throw new Error('unsupported color string');
    }
    var r = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["toFloat"])(cssParts[1]);
    var g = isRGB || isRGBA ? Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["toFloat"])(cssParts[2]) : Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["ensurePercent"])(cssParts[2]);
    var b = isRGB || isRGBA ? Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["toFloat"])(cssParts[3]) : Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["ensurePercent"])(cssParts[3]);
    var a = hasAlpha ? Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["toFloat"])(cssParts[4]) : 1;
    return new ColorHelper(type, r, g, b, a, hasAlpha);
}


/***/ }),

/***/ "./node_modules/csx/lib.es2015/gradient.js":
/*!*************************************************!*\
  !*** ./node_modules/csx/lib.es2015/gradient.js ***!
  \*************************************************/
/*! exports provided: linearGradient, repeatingLinearGradient */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "linearGradient", function() { return linearGradient; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "repeatingLinearGradient", function() { return repeatingLinearGradient; });
/* harmony import */ var _utils_formatting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/formatting */ "./node_modules/csx/lib.es2015/utils/formatting.js");

/**
 * Helper for the linear-gradient function in CSS
 * https://drafts.csswg.org/css-images-3/#funcdef-linear-gradient
 */
function linearGradient(position) {
    var colors = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        colors[_i - 1] = arguments[_i];
    }
    return Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["cssFunction"])('linear-gradient', [position].concat(colors.map(flattenColorStops)));
}
/**
 * Helper for the repeating-linear-gradient function in CSS
 * https://drafts.csswg.org/css-images-3/#funcdef-repeating-linear-gradient
 */
function repeatingLinearGradient(position) {
    var colors = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        colors[_i - 1] = arguments[_i];
    }
    return Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["cssFunction"])('repeating-linear-gradient', [position].concat(colors.map(flattenColorStops)));
}
/**
 * Single CSSColorStop => string conversion is like:
 * 'x'=>'x'
 * ['x', '50%'] => 'x 50%'
 **/
function flattenColorStops(c) {
    return Array.isArray(c) ? c.map(function (s) { return s.toString(); }).join(' ') : c.toString();
}


/***/ }),

/***/ "./node_modules/csx/lib.es2015/index.js":
/*!**********************************************!*\
  !*** ./node_modules/csx/lib.es2015/index.js ***!
  \**********************************************/
/*! exports provided: background, border, borderColor, borderStyle, borderWidth, color, hsl, hsla, rgb, rgba, ColorHelper, linearGradient, repeatingLinearGradient, params, list, margin, padding, calc, quote, important, url, coalesce, transform, matrix, matrix3d, perspective, rotate, rotate3d, rotateX, rotateY, rotateZ, scale, scale3d, scaleX, scaleY, scaleZ, skew, skewX, skewY, translate, translate3d, translateX, translateY, translateZ, percent, deg, em, ex, px, rad, rem, viewHeight, viewWidth, turn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _background__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./background */ "./node_modules/csx/lib.es2015/background.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "background", function() { return _background__WEBPACK_IMPORTED_MODULE_0__["background"]; });

/* harmony import */ var _border__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./border */ "./node_modules/csx/lib.es2015/border.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "border", function() { return _border__WEBPACK_IMPORTED_MODULE_1__["border"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "borderColor", function() { return _border__WEBPACK_IMPORTED_MODULE_1__["borderColor"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "borderStyle", function() { return _border__WEBPACK_IMPORTED_MODULE_1__["borderStyle"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "borderWidth", function() { return _border__WEBPACK_IMPORTED_MODULE_1__["borderWidth"]; });

/* harmony import */ var _color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./color */ "./node_modules/csx/lib.es2015/color.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "color", function() { return _color__WEBPACK_IMPORTED_MODULE_2__["color"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hsl", function() { return _color__WEBPACK_IMPORTED_MODULE_2__["hsl"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "hsla", function() { return _color__WEBPACK_IMPORTED_MODULE_2__["hsla"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rgb", function() { return _color__WEBPACK_IMPORTED_MODULE_2__["rgb"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rgba", function() { return _color__WEBPACK_IMPORTED_MODULE_2__["rgba"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ColorHelper", function() { return _color__WEBPACK_IMPORTED_MODULE_2__["ColorHelper"]; });

/* harmony import */ var _gradient__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./gradient */ "./node_modules/csx/lib.es2015/gradient.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "linearGradient", function() { return _gradient__WEBPACK_IMPORTED_MODULE_3__["linearGradient"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "repeatingLinearGradient", function() { return _gradient__WEBPACK_IMPORTED_MODULE_3__["repeatingLinearGradient"]; });

/* harmony import */ var _lists__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./lists */ "./node_modules/csx/lib.es2015/lists.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "params", function() { return _lists__WEBPACK_IMPORTED_MODULE_4__["params"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "list", function() { return _lists__WEBPACK_IMPORTED_MODULE_4__["list"]; });

/* harmony import */ var _margin__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./margin */ "./node_modules/csx/lib.es2015/margin.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "margin", function() { return _margin__WEBPACK_IMPORTED_MODULE_5__["margin"]; });

/* harmony import */ var _padding__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./padding */ "./node_modules/csx/lib.es2015/padding.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "padding", function() { return _padding__WEBPACK_IMPORTED_MODULE_6__["padding"]; });

/* harmony import */ var _strings__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./strings */ "./node_modules/csx/lib.es2015/strings.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "calc", function() { return _strings__WEBPACK_IMPORTED_MODULE_7__["calc"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "quote", function() { return _strings__WEBPACK_IMPORTED_MODULE_7__["quote"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "important", function() { return _strings__WEBPACK_IMPORTED_MODULE_7__["important"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "url", function() { return _strings__WEBPACK_IMPORTED_MODULE_7__["url"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "coalesce", function() { return _strings__WEBPACK_IMPORTED_MODULE_7__["coalesce"]; });

/* harmony import */ var _transforms__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./transforms */ "./node_modules/csx/lib.es2015/transforms.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "transform", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["transform"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "matrix", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["matrix"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "matrix3d", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["matrix3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "perspective", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["perspective"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["rotate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rotate3d", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["rotate3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rotateX", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["rotateX"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rotateY", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["rotateY"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rotateZ", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["rotateZ"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["scale"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scale3d", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["scale3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scaleX", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["scaleX"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scaleY", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["scaleY"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "scaleZ", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["scaleZ"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "skew", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["skew"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "skewX", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["skewX"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "skewY", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["skewY"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "translate", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["translate"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "translate3d", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["translate3d"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "translateX", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["translateX"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "translateY", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["translateY"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "translateZ", function() { return _transforms__WEBPACK_IMPORTED_MODULE_8__["translateZ"]; });

/* harmony import */ var _units__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./units */ "./node_modules/csx/lib.es2015/units.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "percent", function() { return _units__WEBPACK_IMPORTED_MODULE_9__["percent"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "deg", function() { return _units__WEBPACK_IMPORTED_MODULE_9__["deg"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "em", function() { return _units__WEBPACK_IMPORTED_MODULE_9__["em"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "ex", function() { return _units__WEBPACK_IMPORTED_MODULE_9__["ex"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "px", function() { return _units__WEBPACK_IMPORTED_MODULE_9__["px"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rad", function() { return _units__WEBPACK_IMPORTED_MODULE_9__["rad"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "rem", function() { return _units__WEBPACK_IMPORTED_MODULE_9__["rem"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "viewHeight", function() { return _units__WEBPACK_IMPORTED_MODULE_9__["viewHeight"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "viewWidth", function() { return _units__WEBPACK_IMPORTED_MODULE_9__["viewWidth"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "turn", function() { return _units__WEBPACK_IMPORTED_MODULE_9__["turn"]; });

/**
 * @module Provides useful CSS primitives
 */
// export all helper functions












/***/ }),

/***/ "./node_modules/csx/lib.es2015/lists.js":
/*!**********************************************!*\
  !*** ./node_modules/csx/lib.es2015/lists.js ***!
  \**********************************************/
/*! exports provided: params, list */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "params", function() { return params; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "list", function() { return list; });
/* harmony import */ var _utils_arrays__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/arrays */ "./node_modules/csx/lib.es2015/utils/arrays.js");
/* harmony import */ var _units__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./units */ "./node_modules/csx/lib.es2015/units.js");


var delimited = function (delimiter) {
    return function () {
        return Object(_utils_arrays__WEBPACK_IMPORTED_MODULE_0__["filter"])(arguments, function (s) { return s || s === 0; })
            .map(function (s) { return typeof s === 'number' ? Object(_units__WEBPACK_IMPORTED_MODULE_1__["px"])(s) : s.toString(); })
            .join(delimiter);
    };
};
var params = delimited(' ');
var list = delimited(',');


/***/ }),

/***/ "./node_modules/csx/lib.es2015/margin.js":
/*!***********************************************!*\
  !*** ./node_modules/csx/lib.es2015/margin.js ***!
  \***********************************************/
/*! exports provided: margin */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "margin", function() { return margin; });
/* harmony import */ var _lists__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lists */ "./node_modules/csx/lib.es2015/lists.js");

var margin = _lists__WEBPACK_IMPORTED_MODULE_0__["params"];


/***/ }),

/***/ "./node_modules/csx/lib.es2015/padding.js":
/*!************************************************!*\
  !*** ./node_modules/csx/lib.es2015/padding.js ***!
  \************************************************/
/*! exports provided: padding */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "padding", function() { return padding; });
/* harmony import */ var _lists__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./lists */ "./node_modules/csx/lib.es2015/lists.js");

var padding = _lists__WEBPACK_IMPORTED_MODULE_0__["params"];


/***/ }),

/***/ "./node_modules/csx/lib.es2015/strings.js":
/*!************************************************!*\
  !*** ./node_modules/csx/lib.es2015/strings.js ***!
  \************************************************/
/*! exports provided: calc, quote, important, url, coalesce */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "calc", function() { return calc; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "quote", function() { return quote; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "important", function() { return important; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "url", function() { return url; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "coalesce", function() { return coalesce; });
/**
 * Returns the value with '' around it.  Any 's will be escaped \' in the output
 */
function calc(exp) {
    return "calc(" + exp + ")";
}
/**
 * Returns the value with '' around it.  Any 's will be escaped \' in the output
 */
function quote(val) {
    var val2 = (val || val === 0 ? val.toString() : '').replace(/\'/g, "\\'");
    return "'" + val2 + "'";
}
/**
 * Returns the value with !important on the end.  If the value provided is a CSSHelper, it will
 * be converted to a string by necessity, but will look like it is the original type to TypeScript.
 */
function important(val) {
    if (!val && val !== 0) {
        return '';
    }
    return val.toString() + " !important";
}
/**
 * Returns the string in a url()
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/url
 */
function url(val) {
    return "url(" + (val || '') + ")";
}
/**
 * Returns the value as a string or an empty string if null or undefined.
 * @param value
 * @param fallbackValue
 */
function coalesce(value) {
    return !value && value !== 0 ? '' : value.toString();
}


/***/ }),

/***/ "./node_modules/csx/lib.es2015/transforms.js":
/*!***************************************************!*\
  !*** ./node_modules/csx/lib.es2015/transforms.js ***!
  \***************************************************/
/*! exports provided: transform, matrix, matrix3d, perspective, rotate, rotate3d, rotateX, rotateY, rotateZ, scale, scale3d, scaleX, scaleY, scaleZ, skew, skewX, skewY, translate, translate3d, translateX, translateY, translateZ */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "transform", function() { return transform; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matrix", function() { return matrix; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "matrix3d", function() { return matrix3d; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "perspective", function() { return perspective; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate", function() { return rotate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotate3d", function() { return rotate3d; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateX", function() { return rotateX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateY", function() { return rotateY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rotateZ", function() { return rotateZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale", function() { return scale; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scale3d", function() { return scale3d; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scaleX", function() { return scaleX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scaleY", function() { return scaleY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "scaleZ", function() { return scaleZ; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "skew", function() { return skew; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "skewX", function() { return skewX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "skewY", function() { return skewY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translate", function() { return translate; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translate3d", function() { return translate3d; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translateX", function() { return translateX; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translateY", function() { return translateY; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "translateZ", function() { return translateZ; });
/* harmony import */ var _utils_formatting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/formatting */ "./node_modules/csx/lib.es2015/utils/formatting.js");

/**
 * The CSS transform property lets you modify the coordinate space of the CSS visual formatting model. Using it, elements can be translated, rotated, scaled, and skewed.
 * Returns the transforms as a delimited string by space or returns 'none' if no arguments are provided
 * @see https://developer.mozilla.org/en-US/docs/Web/CSS/transform
 */
function transform() {
    var transforms = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        transforms[_i] = arguments[_i];
    }
    return transforms.length ? transforms.join(' ') : 'none';
}
var matrix = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('matrix');
var matrix3d = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('matrix3d');
var perspective = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('perspective');
var rotate = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('rotate');
var rotate3d = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('rotate3d');
var rotateX = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('rotateX');
var rotateY = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('rotateY');
var rotateZ = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('rotateZ');
var scale = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('scale');
var scale3d = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('scale3d');
var scaleX = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('scaleX');
var scaleY = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('scaleY');
var scaleZ = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('scaleZ');
var skew = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('skew');
var skewX = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('skewX');
var skewY = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('skewY');
var translate = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('translate');
var translate3d = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('translate3d');
var translateX = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('translateX');
var translateY = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('translateY');
var translateZ = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["createFunction"])('translateZ');


/***/ }),

/***/ "./node_modules/csx/lib.es2015/units.js":
/*!**********************************************!*\
  !*** ./node_modules/csx/lib.es2015/units.js ***!
  \**********************************************/
/*! exports provided: percent, deg, em, ex, px, rad, rem, viewHeight, viewWidth, turn */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "percent", function() { return percent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "deg", function() { return deg; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "em", function() { return em; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ex", function() { return ex; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "px", function() { return px; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rad", function() { return rad; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "rem", function() { return rem; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "viewHeight", function() { return viewHeight; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "viewWidth", function() { return viewWidth; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "turn", function() { return turn; });
/* harmony import */ var _utils_formatting__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/formatting */ "./node_modules/csx/lib.es2015/utils/formatting.js");

/**
 * Returns the number with a suffix of %
 */
var percent = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])('%');
/**
 * Returns the number with a suffix of deg
 */
var deg = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])('deg');
/**
 * Returns the number with a suffix of em
 */
var em = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])('em');
/**
 * Returns the number with a suffix of ex
 */
var ex = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])('ex');
/**
 * Returns the number with a suffix of px
 */
var px = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])('px');
/**
 * Returns the number with a suffix of rad
 */
var rad = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])('rad');
/**
 * Returns the number with a suffix of rem
 */
var rem = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])('rem');
/**
 * Returns the number with a suffix of vh
 */
var viewHeight = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])('vh');
/**
 * Returns the number with a suffix of vw
 */
var viewWidth = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])('vw');
/**
 * Returns the number with a suffix of turn
 */
var turn = Object(_utils_formatting__WEBPACK_IMPORTED_MODULE_0__["formatUnit"])('turn');


/***/ }),

/***/ "./node_modules/csx/lib.es2015/utils/arrays.js":
/*!*****************************************************!*\
  !*** ./node_modules/csx/lib.es2015/utils/arrays.js ***!
  \*****************************************************/
/*! exports provided: filter, map */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "filter", function() { return filter; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "map", function() { return map; });
var filter = function (args, condition) {
    return Array.prototype.filter.call(args, condition);
};
var map = function (args, mapper) {
    return Array.prototype.map.call(args, mapper);
};


/***/ }),

/***/ "./node_modules/csx/lib.es2015/utils/formatting.js":
/*!*********************************************************!*\
  !*** ./node_modules/csx/lib.es2015/utils/formatting.js ***!
  \*********************************************************/
/*! exports provided: formatUnit, toFloat, ensurePercent, formatPercent, formatFloat, ensureLength, parseCSSFunction, cssFunction, createFunction */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatUnit", function() { return formatUnit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "toFloat", function() { return toFloat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ensurePercent", function() { return ensurePercent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatPercent", function() { return formatPercent; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "formatFloat", function() { return formatFloat; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ensureLength", function() { return ensureLength; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "parseCSSFunction", function() { return parseCSSFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cssFunction", function() { return cssFunction; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createFunction", function() { return createFunction; });
var functionExpression = /[\s]*([a-z-]+)[\s]*\([\s]*([^\)]+)[\s]*\)[\s]*/i;
var floatExpression = /^(\-?\d+\.?\d{0,5})/;
var formatUnit = function (unit) { return function (val) { return (val + unit); }; };
var toFloat = parseFloat;
function ensurePercent(value) {
    return typeof value === 'number'
        ? value
        : toFloat(value) * .01;
}
function formatPercent(value) {
    return (formatFloat(value * 100)) + '%';
}
/**
 * Returns a number formatted to a max number of 5 decimal places
 */
function formatFloat(n) {
    return floatExpression.exec(n.toString())[1];
}
function ensureLength(value) {
    if (value === null || value === undefined) {
        return undefined;
    }
    // convert to number
    var number = +value;
    // validate conversion worked (NaN will not equal NaN)
    if (number === number) {
        return value + 'px';
    }
    return value;
}
function parseCSSFunction(stringValue) {
    var matches = functionExpression.exec(stringValue);
    if (!matches || !matches.length) {
        return undefined;
    }
    return [matches[1]].concat(matches[2].split(','));
}
function cssFunction(functionName, params) {
    var parts = Array.prototype.join.call(params, ', ');
    return functionName + "(" + parts + ")";
}
function createFunction(name) {
    return (function () {
        return cssFunction(name, arguments);
    });
}


/***/ }),

/***/ "./node_modules/csx/lib.es2015/utils/math.js":
/*!***************************************************!*\
  !*** ./node_modules/csx/lib.es2015/utils/math.js ***!
  \***************************************************/
/*! exports provided: round, roundFloat */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "round", function() { return round; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "roundFloat", function() { return roundFloat; });
var math = Math;
var round = math.round;
/**
 * Rounds a decimal by multiplying it by a factor, rounding it, and then dividing it by that same factor
 * @param n number to round
 * @param factor to use 100 = scale of 2, 100000 = scale of 5
 */
function roundFloat(n, factor) {
    return round(n * factor) / factor;
}


/***/ }),

/***/ "./node_modules/free-style/dist/free-style.js":
/*!****************************************************!*\
  !*** ./node_modules/free-style/dist/free-style.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    }
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * The unique id is used for unique hashes.
 */
var uniqueId = 0;
/**
 * Tag styles with this string to get unique hashes.
 */
exports.IS_UNIQUE = '__DO_NOT_DEDUPE_STYLE__';
var upperCasePattern = /[A-Z]/g;
var msPattern = /^ms-/;
var interpolatePattern = /&/g;
var escapePattern = /[ !#$%&()*+,./;<=>?@[\]^`{|}~"'\\]/g;
var propLower = function (m) { return "-" + m.toLowerCase(); };
/**
 * CSS properties that are valid unit-less numbers.
 *
 * Ref: https://github.com/facebook/react/blob/master/packages/react-dom/src/shared/CSSProperty.js
 */
var CSS_NUMBER = {
    'animation-iteration-count': true,
    'border-image-outset': true,
    'border-image-slice': true,
    'border-image-width': true,
    'box-flex': true,
    'box-flex-group': true,
    'box-ordinal-group': true,
    'column-count': true,
    'columns': true,
    'counter-increment': true,
    'counter-reset': true,
    'flex': true,
    'flex-grow': true,
    'flex-positive': true,
    'flex-shrink': true,
    'flex-negative': true,
    'flex-order': true,
    'font-weight': true,
    'grid-area': true,
    'grid-column': true,
    'grid-column-end': true,
    'grid-column-span': true,
    'grid-column-start': true,
    'grid-row': true,
    'grid-row-end': true,
    'grid-row-span': true,
    'grid-row-start': true,
    'line-clamp': true,
    'line-height': true,
    'opacity': true,
    'order': true,
    'orphans': true,
    'tab-size': true,
    'widows': true,
    'z-index': true,
    'zoom': true,
    // SVG properties.
    'fill-opacity': true,
    'flood-opacity': true,
    'stop-opacity': true,
    'stroke-dasharray': true,
    'stroke-dashoffset': true,
    'stroke-miterlimit': true,
    'stroke-opacity': true,
    'stroke-width': true
};
// Add vendor prefixes to all unit-less properties.
for (var _i = 0, _a = Object.keys(CSS_NUMBER); _i < _a.length; _i++) {
    var property = _a[_i];
    for (var _b = 0, _c = ['-webkit-', '-ms-', '-moz-', '-o-', '']; _b < _c.length; _b++) {
        var prefix = _c[_b];
        CSS_NUMBER[prefix + property] = true;
    }
}
/**
 * Escape a CSS class name.
 */
exports.escape = function (str) { return str.replace(escapePattern, '\\$&'); };
/**
 * Transform a JavaScript property into a CSS property.
 */
function hyphenate(propertyName) {
    return propertyName
        .replace(upperCasePattern, propLower)
        .replace(msPattern, '-ms-'); // Internet Explorer vendor prefix.
}
exports.hyphenate = hyphenate;
/**
 * Generate a hash value from a string.
 */
function stringHash(str) {
    var value = 5381;
    var len = str.length;
    while (len--)
        value = (value * 33) ^ str.charCodeAt(len);
    return (value >>> 0).toString(36);
}
exports.stringHash = stringHash;
/**
 * Transform a style string to a CSS string.
 */
function styleToString(key, value) {
    if (typeof value === 'number' && value !== 0 && !CSS_NUMBER.hasOwnProperty(key)) {
        return key + ":" + value + "px";
    }
    return key + ":" + value;
}
/**
 * Sort an array of tuples by first value.
 */
function sortTuples(value) {
    return value.sort(function (a, b) { return a[0] > b[0] ? 1 : -1; });
}
/**
 * Categorize user styles.
 */
function parseStyles(styles, hasNestedStyles) {
    var properties = [];
    var nestedStyles = [];
    var isUnique = false;
    // Sort keys before adding to styles.
    for (var _i = 0, _a = Object.keys(styles); _i < _a.length; _i++) {
        var key = _a[_i];
        var value = styles[key];
        if (value !== null && value !== undefined) {
            if (key === exports.IS_UNIQUE) {
                isUnique = true;
            }
            else if (typeof value === 'object' && !Array.isArray(value)) {
                nestedStyles.push([key.trim(), value]);
            }
            else {
                properties.push([hyphenate(key.trim()), value]);
            }
        }
    }
    return {
        style: stringifyProperties(sortTuples(properties)),
        nested: hasNestedStyles ? nestedStyles : sortTuples(nestedStyles),
        isUnique: isUnique
    };
}
/**
 * Stringify an array of property tuples.
 */
function stringifyProperties(properties) {
    return properties.map(function (_a) {
        var name = _a[0], value = _a[1];
        if (!Array.isArray(value))
            return styleToString(name, value);
        return value.map(function (x) { return styleToString(name, x); }).join(';');
    }).join(';');
}
/**
 * Interpolate CSS selectors.
 */
function interpolate(selector, parent) {
    if (selector.indexOf('&') === -1)
        return parent + " " + selector;
    return selector.replace(interpolatePattern, parent);
}
/**
 * Recursive loop building styles with deferred selectors.
 */
function stylize(selector, styles, rulesList, stylesList, parent) {
    var _a = parseStyles(styles, selector !== ''), style = _a.style, nested = _a.nested, isUnique = _a.isUnique;
    var pid = style;
    if (selector.charCodeAt(0) === 64 /* @ */) {
        var child = { selector: selector, styles: [], rules: [], style: parent ? '' : style };
        rulesList.push(child);
        // Nested styles support (e.g. `.foo > @media > .bar`).
        if (style && parent)
            child.styles.push({ selector: parent, style: style, isUnique: isUnique });
        for (var _i = 0, nested_1 = nested; _i < nested_1.length; _i++) {
            var _b = nested_1[_i], name = _b[0], value = _b[1];
            pid += name + stylize(name, value, child.rules, child.styles, parent);
        }
    }
    else {
        var key = parent ? interpolate(selector, parent) : selector;
        if (style)
            stylesList.push({ selector: key, style: style, isUnique: isUnique });
        for (var _c = 0, nested_2 = nested; _c < nested_2.length; _c++) {
            var _d = nested_2[_c], name = _d[0], value = _d[1];
            pid += name + stylize(name, value, rulesList, stylesList, key);
        }
    }
    return pid;
}
/**
 * Transform `stylize` tree into style objects.
 */
function composeStylize(cache, pid, rulesList, stylesList, className, isStyle) {
    for (var _i = 0, stylesList_1 = stylesList; _i < stylesList_1.length; _i++) {
        var _a = stylesList_1[_i], selector = _a.selector, style = _a.style, isUnique = _a.isUnique;
        var key = isStyle ? interpolate(selector, className) : selector;
        var id = isUnique ? "u\0" + (++uniqueId).toString(36) : "s\0" + pid + "\0" + style;
        var item = new Style(style, id);
        item.add(new Selector(key, "k\0" + pid + "\0" + key));
        cache.add(item);
    }
    for (var _b = 0, rulesList_1 = rulesList; _b < rulesList_1.length; _b++) {
        var _c = rulesList_1[_b], selector = _c.selector, style = _c.style, rules = _c.rules, styles = _c.styles;
        var item = new Rule(selector, style, "r\0" + pid + "\0" + selector + "\0" + style);
        composeStylize(item, pid, rules, styles, className, isStyle);
        cache.add(item);
    }
}
/**
 * Cache to list to styles.
 */
function join(arr) {
    var res = '';
    for (var i = 0; i < arr.length; i++)
        res += arr[i];
    return res;
}
/**
 * Noop changes.
 */
var noopChanges = {
    add: function () { return undefined; },
    change: function () { return undefined; },
    remove: function () { return undefined; }
};
/**
 * Implement a cache/event emitter.
 */
var Cache = /** @class */ (function () {
    function Cache(changes) {
        if (changes === void 0) { changes = noopChanges; }
        this.changes = changes;
        this.sheet = [];
        this.changeId = 0;
        this._keys = [];
        this._children = Object.create(null);
        this._counters = Object.create(null);
    }
    Cache.prototype.add = function (style) {
        var count = this._counters[style.id] || 0;
        var item = this._children[style.id] || style.clone();
        this._counters[style.id] = count + 1;
        if (count === 0) {
            this._children[item.id] = item;
            this._keys.push(item.id);
            this.sheet.push(item.getStyles());
            this.changeId++;
            this.changes.add(item, this._keys.length - 1);
        }
        else if (item instanceof Cache && style instanceof Cache) {
            var curIndex = this._keys.indexOf(style.id);
            var prevItemChangeId = item.changeId;
            item.merge(style);
            if (item.changeId !== prevItemChangeId) {
                this.sheet.splice(curIndex, 1, item.getStyles());
                this.changeId++;
                this.changes.change(item, curIndex, curIndex);
            }
        }
        return item;
    };
    Cache.prototype.remove = function (style) {
        var count = this._counters[style.id];
        if (count !== undefined && count > 0) {
            this._counters[style.id] = count - 1;
            var item = this._children[style.id];
            var index = this._keys.indexOf(item.id);
            if (count === 1) {
                delete this._counters[style.id];
                delete this._children[style.id];
                this._keys.splice(index, 1);
                this.sheet.splice(index, 1);
                this.changeId++;
                this.changes.remove(item, index);
            }
            else if (item instanceof Cache && style instanceof Cache) {
                var prevChangeId = item.changeId;
                item.unmerge(style);
                if (item.changeId !== prevChangeId) {
                    this.sheet.splice(index, 1, item.getStyles());
                    this.changeId++;
                    this.changes.change(item, index, index);
                }
            }
        }
    };
    Cache.prototype.values = function () {
        var _this = this;
        return this._keys.map(function (key) { return _this._children[key]; });
    };
    Cache.prototype.merge = function (cache) {
        for (var _i = 0, _a = cache.values(); _i < _a.length; _i++) {
            var item = _a[_i];
            this.add(item);
        }
        return this;
    };
    Cache.prototype.unmerge = function (cache) {
        for (var _i = 0, _a = cache.values(); _i < _a.length; _i++) {
            var item = _a[_i];
            this.remove(item);
        }
        return this;
    };
    Cache.prototype.clone = function () {
        return new Cache().merge(this);
    };
    return Cache;
}());
exports.Cache = Cache;
/**
 * Selector is a dumb class made to represent nested CSS selectors.
 */
var Selector = /** @class */ (function () {
    function Selector(selector, id) {
        this.selector = selector;
        this.id = id;
    }
    Selector.prototype.getStyles = function () {
        return this.selector;
    };
    Selector.prototype.clone = function () {
        return new Selector(this.selector, this.id);
    };
    return Selector;
}());
exports.Selector = Selector;
/**
 * The style container registers a style string with selectors.
 */
var Style = /** @class */ (function (_super) {
    __extends(Style, _super);
    function Style(style, id) {
        var _this = _super.call(this) || this;
        _this.style = style;
        _this.id = id;
        return _this;
    }
    Style.prototype.getStyles = function () {
        return this.sheet.join(',') + "{" + this.style + "}";
    };
    Style.prototype.clone = function () {
        return new Style(this.style, this.id).merge(this);
    };
    return Style;
}(Cache));
exports.Style = Style;
/**
 * Implement rule logic for style output.
 */
var Rule = /** @class */ (function (_super) {
    __extends(Rule, _super);
    function Rule(rule, style, id) {
        var _this = _super.call(this) || this;
        _this.rule = rule;
        _this.style = style;
        _this.id = id;
        return _this;
    }
    Rule.prototype.getStyles = function () {
        return this.rule + "{" + this.style + join(this.sheet) + "}";
    };
    Rule.prototype.clone = function () {
        return new Rule(this.rule, this.style, this.id).merge(this);
    };
    return Rule;
}(Cache));
exports.Rule = Rule;
/**
 * The FreeStyle class implements the API for everything else.
 */
var FreeStyle = /** @class */ (function (_super) {
    __extends(FreeStyle, _super);
    function FreeStyle(hash, debug, id, changes) {
        var _this = _super.call(this, changes) || this;
        _this.hash = hash;
        _this.debug = debug;
        _this.id = id;
        return _this;
    }
    FreeStyle.prototype.registerStyle = function (styles, displayName) {
        var rulesList = [];
        var stylesList = [];
        var pid = stylize('&', styles, rulesList, stylesList);
        var hash = "f" + this.hash(pid);
        var id = this.debug && displayName ? displayName + "_" + hash : hash;
        composeStylize(this, pid, rulesList, stylesList, "." + exports.escape(id), true);
        return id;
    };
    FreeStyle.prototype.registerKeyframes = function (keyframes, displayName) {
        return this.registerHashRule('@keyframes', keyframes, displayName);
    };
    FreeStyle.prototype.registerHashRule = function (prefix, styles, displayName) {
        var rulesList = [];
        var stylesList = [];
        var pid = stylize('', styles, rulesList, stylesList);
        var hash = "f" + this.hash(pid);
        var id = this.debug && displayName ? displayName + "_" + hash : hash;
        var rule = new Rule(prefix + " " + exports.escape(id), '', "h\0" + pid + "\0" + prefix);
        composeStylize(rule, pid, rulesList, stylesList, '', false);
        this.add(rule);
        return id;
    };
    FreeStyle.prototype.registerRule = function (rule, styles) {
        var rulesList = [];
        var stylesList = [];
        var pid = stylize(rule, styles, rulesList, stylesList);
        composeStylize(this, pid, rulesList, stylesList, '', false);
    };
    FreeStyle.prototype.registerCss = function (styles) {
        return this.registerRule('', styles);
    };
    FreeStyle.prototype.getStyles = function () {
        return join(this.sheet);
    };
    FreeStyle.prototype.clone = function () {
        return new FreeStyle(this.hash, this.debug, this.id, this.changes).merge(this);
    };
    return FreeStyle;
}(Cache));
exports.FreeStyle = FreeStyle;
/**
 * Exports a simple function to create a new instance.
 */
function create(hash, debug, changes) {
    if (hash === void 0) { hash = stringHash; }
    if (debug === void 0) { debug = typeof process !== 'undefined' && "development" !== 'production'; }
    if (changes === void 0) { changes = noopChanges; }
    return new FreeStyle(hash, debug, "f" + (++uniqueId).toString(36), changes);
}
exports.create = create;
//# sourceMappingURL=free-style.js.map
/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/immer/dist/immer.module.js":
/*!*************************************************!*\
  !*** ./node_modules/immer/dist/immer.module.js ***!
  \*************************************************/
/*! exports provided: default, Immer, applyPatches, createDraft, finishDraft, immerable, isDraft, isDraftable, nothing, original, produce, produceWithPatches, setAutoFreeze, setUseProxies */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Immer", function() { return Immer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyPatches", function() { return applyPatches$1; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createDraft", function() { return createDraft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "finishDraft", function() { return finishDraft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "immerable", function() { return DRAFTABLE; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDraft", function() { return isDraft; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "isDraftable", function() { return isDraftable; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "nothing", function() { return NOTHING; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "original", function() { return original; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "produce", function() { return produce; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "produceWithPatches", function() { return produceWithPatches; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setAutoFreeze", function() { return setAutoFreeze; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setUseProxies", function() { return setUseProxies; });
var obj;
var NOTHING = typeof Symbol !== "undefined" ? Symbol("immer-nothing") : ( obj = {}, obj["immer-nothing"] = true, obj );
var DRAFTABLE = typeof Symbol !== "undefined" && Symbol.for ? Symbol.for("immer-draftable") : "__$immer_draftable";
var DRAFT_STATE = typeof Symbol !== "undefined" && Symbol.for ? Symbol.for("immer-state") : "__$immer_state";
function isDraft(value) {
  return !!value && !!value[DRAFT_STATE];
}
function isDraftable(value) {
  if (!value) { return false; }
  return isPlainObject(value) || !!value[DRAFTABLE] || !!value.constructor[DRAFTABLE] || isMap(value) || isSet(value);
}
function isPlainObject(value) {
  if (!value || typeof value !== "object") { return false; }
  if (Array.isArray(value)) { return true; }
  var proto = Object.getPrototypeOf(value);
  return !proto || proto === Object.prototype;
}
function original(value) {
  if (value && value[DRAFT_STATE]) {
    return value[DRAFT_STATE].base;
  } // otherwise return undefined

} // We use Maps as `drafts` for Sets, not Objects
// See proxy.js

function assignSet(target, override) {
  override.forEach(function (value) {
    // When we add new drafts we have to remove their originals if present
    var prev = original(value);
    if (prev) { target.delete(prev); }
    target.add(value);
  });
  return target;
} // We use Maps as `drafts` for Maps, not Objects
// See proxy.js

function assignMap(target, override) {
  override.forEach(function (value, key) { return target.set(key, value); });
  return target;
}
var assign = Object.assign || (function (target) {
  var overrides = [], len = arguments.length - 1;
  while ( len-- > 0 ) overrides[ len ] = arguments[ len + 1 ];

  overrides.forEach(function (override) { return Object.keys(override).forEach(function (key) { return target[key] = override[key]; }); });
  return target;
});
var ownKeys = typeof Reflect !== "undefined" && Reflect.ownKeys ? Reflect.ownKeys : typeof Object.getOwnPropertySymbols !== "undefined" ? function (obj) { return Object.getOwnPropertyNames(obj).concat(Object.getOwnPropertySymbols(obj)); } : Object.getOwnPropertyNames;
function shallowCopy(base, invokeGetters) {
  if ( invokeGetters === void 0 ) invokeGetters = false;

  if (Array.isArray(base)) { return base.slice(); }
  if (isMap(base)) { return new Map(base); }
  if (isSet(base)) { return new Set(base); }
  var clone = Object.create(Object.getPrototypeOf(base));
  ownKeys(base).forEach(function (key) {
    if (key === DRAFT_STATE) {
      return; // Never copy over draft state.
    }

    var desc = Object.getOwnPropertyDescriptor(base, key);
    var value = desc.value;

    if (desc.get) {
      if (!invokeGetters) {
        throw new Error("Immer drafts cannot have computed properties");
      }

      value = desc.get.call(base);
    }

    if (desc.enumerable) {
      clone[key] = value;
    } else {
      Object.defineProperty(clone, key, {
        value: value,
        writable: true,
        configurable: true
      });
    }
  });
  return clone;
}
function each(obj, iter) {
  if (Array.isArray(obj) || isMap(obj) || isSet(obj)) {
    obj.forEach(function (entry, index) { return iter(index, entry, obj); });
  } else {
    ownKeys(obj).forEach(function (key) { return iter(key, obj[key], obj); });
  }
}
function isEnumerable(base, prop) {
  var desc = Object.getOwnPropertyDescriptor(base, prop);
  return !!desc && desc.enumerable;
}
function has(thing, prop) {
  return isMap(thing) ? thing.has(prop) : Object.prototype.hasOwnProperty.call(thing, prop);
}
function get(thing, prop) {
  return isMap(thing) ? thing.get(prop) : thing[prop];
}
function is(x, y) {
  // From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js
  if (x === y) {
    return x !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}
var hasSymbol = typeof Symbol !== "undefined";
var hasMap = typeof Map !== "undefined";
function isMap(target) {
  return hasMap && target instanceof Map;
}
var hasSet = typeof Set !== "undefined";
function isSet(target) {
  return hasSet && target instanceof Set;
}
function makeIterable(next) {
  var obj;

  var self;
  return self = ( obj = {}, obj[Symbol.iterator] = function () { return self; }, obj.next = next, obj );
}
/** Map.prototype.values _-or-_ Map.prototype.entries */

function iterateMapValues(state, prop, receiver) {
  var isEntries = prop !== "values";
  return function () {
    var iterator = latest(state)[Symbol.iterator]();
    return makeIterable(function () {
      var result = iterator.next();

      if (!result.done) {
        var ref = result.value;
        var key = ref[0];
        var value = receiver.get(key);
        result.value = isEntries ? [key, value] : value;
      }

      return result;
    });
  };
}
function makeIterateSetValues(createProxy) {
  function iterateSetValues(state, prop) {
    var isEntries = prop === "entries";
    return function () {
      var iterator = latest(state)[Symbol.iterator]();
      return makeIterable(function () {
        var result = iterator.next();

        if (!result.done) {
          var value = wrapSetValue(state, result.value);
          result.value = isEntries ? [value, value] : value;
        }

        return result;
      });
    };
  }

  function wrapSetValue(state, value) {
    var key = original(value) || value;
    var draft = state.drafts.get(key);

    if (!draft) {
      if (state.finalized || !isDraftable(value) || state.finalizing) {
        return value;
      }

      draft = createProxy(value, state);
      state.drafts.set(key, draft);

      if (state.modified) {
        state.copy.add(draft);
      }
    }

    return draft;
  }

  return iterateSetValues;
}

function latest(state) {
  return state.copy || state.base;
}

function clone(obj) {
  if (!isDraftable(obj)) { return obj; }
  if (Array.isArray(obj)) { return obj.map(clone); }
  if (isMap(obj)) { return new Map(obj); }
  if (isSet(obj)) { return new Set(obj); }
  var cloned = Object.create(Object.getPrototypeOf(obj));

  for (var key in obj) { cloned[key] = clone(obj[key]); }

  return cloned;
}
function freeze(obj, deep) {
  if ( deep === void 0 ) deep = false;

  if (!isDraftable(obj) || isDraft(obj) || Object.isFrozen(obj)) { return; }

  if (isSet(obj)) {
    obj.add = obj.clear = obj.delete = dontMutateFrozenCollections;
  } else if (isMap(obj)) {
    obj.set = obj.clear = obj.delete = dontMutateFrozenCollections;
  }

  Object.freeze(obj);
  if (deep) { each(obj, function (_, value) { return freeze(value, true); }); }
}

function dontMutateFrozenCollections() {
  throw new Error("This object has been frozen and should not be mutated");
}

/** Each scope represents a `produce` call. */

var ImmerScope = function ImmerScope(parent) {
  this.drafts = [];
  this.parent = parent; // Whenever the modified draft contains a draft from another scope, we
  // need to prevent auto-freezing so the unowned draft can be finalized.

  this.canAutoFreeze = true; // To avoid prototype lookups:

  this.patches = null;
};

ImmerScope.prototype.usePatches = function usePatches (patchListener) {
  if (patchListener) {
    this.patches = [];
    this.inversePatches = [];
    this.patchListener = patchListener;
  }
};

ImmerScope.prototype.revoke = function revoke$1 () {
  this.leave();
  this.drafts.forEach(revoke);
  this.drafts = null; // Make draft-related methods throw.
};

ImmerScope.prototype.leave = function leave () {
  if (this === ImmerScope.current) {
    ImmerScope.current = this.parent;
  }
};
ImmerScope.current = null;

ImmerScope.enter = function () {
  return this.current = new ImmerScope(this.current);
};

function revoke(draft) {
  draft[DRAFT_STATE].revoke();
}

function willFinalize(scope, result, isReplaced) {
  scope.drafts.forEach(function (draft) {
    draft[DRAFT_STATE].finalizing = true;
  });

  if (!isReplaced) {
    if (scope.patches) {
      markChangesRecursively(scope.drafts[0]);
    } // This is faster when we don't care about which attributes changed.


    markChangesSweep(scope.drafts);
  } // When a child draft is returned, look for changes.
  else if (isDraft(result) && result[DRAFT_STATE].scope === scope) {
      markChangesSweep(scope.drafts);
    }
}
function createProxy(base, parent) {
  var isArray = Array.isArray(base);
  var draft = clonePotentialDraft(base);

  if (isMap(base)) {
    proxyMap(draft);
  } else if (isSet(base)) {
    proxySet(draft);
  } else {
    each(draft, function (prop) {
      proxyProperty(draft, prop, isArray || isEnumerable(base, prop));
    });
  } // See "proxy.js" for property documentation.


  var scope = parent ? parent.scope : ImmerScope.current;
  var state = {
    scope: scope,
    modified: false,
    finalizing: false,
    // es5 only
    finalized: false,
    assigned: isMap(base) ? new Map() : {},
    parent: parent,
    base: base,
    draft: draft,
    drafts: isSet(base) ? new Map() : null,
    copy: null,
    revoke: revoke$1,
    revoked: false // es5 only

  };
  createHiddenProperty(draft, DRAFT_STATE, state);
  scope.drafts.push(draft);
  return draft;
}

function revoke$1() {
  this.revoked = true;
}

function latest$1(state) {
  return state.copy || state.base;
} // Access a property without creating an Immer draft.


function peek(draft, prop) {
  var state = draft[DRAFT_STATE];

  if (state && !state.finalizing) {
    state.finalizing = true;
    var value = draft[prop];
    state.finalizing = false;
    return value;
  }

  return draft[prop];
}

function get$1(state, prop) {
  assertUnrevoked(state);
  var value = peek(latest$1(state), prop);
  if (state.finalizing) { return value; } // Create a draft if the value is unmodified.

  if (value === peek(state.base, prop) && isDraftable(value)) {
    prepareCopy(state);
    return state.copy[prop] = createProxy(value, state);
  }

  return value;
}

function set(state, prop, value) {
  assertUnrevoked(state);
  state.assigned[prop] = true;

  if (!state.modified) {
    if (is(value, peek(latest$1(state), prop))) { return; }
    markChanged(state);
    prepareCopy(state);
  }

  state.copy[prop] = value;
}

function markChanged(state) {
  if (!state.modified) {
    state.modified = true;
    if (state.parent) { markChanged(state.parent); }
  }
}

function prepareCopy(state) {
  if (!state.copy) { state.copy = clonePotentialDraft(state.base); }
}

function clonePotentialDraft(base) {
  var state = base && base[DRAFT_STATE];

  if (state) {
    state.finalizing = true;
    var draft = shallowCopy(state.draft, true);
    state.finalizing = false;
    return draft;
  }

  return shallowCopy(base);
} // property descriptors are recycled to make sure we don't create a get and set closure per property,
// but share them all instead


var descriptors = {};

function proxyProperty(draft, prop, enumerable) {
  var desc = descriptors[prop];

  if (desc) {
    desc.enumerable = enumerable;
  } else {
    descriptors[prop] = desc = {
      configurable: true,
      enumerable: enumerable,

      get: function get$1$1() {
        return get$1(this[DRAFT_STATE], prop);
      },

      set: function set$1(value) {
        set(this[DRAFT_STATE], prop, value);
      }

    };
  }

  Object.defineProperty(draft, prop, desc);
}

function proxyMap(target) {
  Object.defineProperties(target, mapTraps);

  if (hasSymbol) {
    Object.defineProperty(target, Symbol.iterator, proxyMethod(iterateMapValues));
  }
}

var mapTraps = finalizeTraps({
  size: function (state) { return latest$1(state).size; },
  has: function (state) { return function (key) { return latest$1(state).has(key); }; },
  set: function (state) { return function (key, value) {
    if (latest$1(state).get(key) !== value) {
      prepareCopy(state);
      markChanged(state);
      state.assigned.set(key, true);
      state.copy.set(key, value);
    }

    return state.draft;
  }; },
  delete: function (state) { return function (key) {
    prepareCopy(state);
    markChanged(state);
    state.assigned.set(key, false);
    state.copy.delete(key);
    return false;
  }; },
  clear: function (state) { return function () {
    if (!state.copy) {
      prepareCopy(state);
    }

    markChanged(state);
    state.assigned = new Map();

    for (var i = 0, list = latest$1(state).keys(); i < list.length; i += 1) {
      var key = list[i];

      state.assigned.set(key, false);
    }

    return state.copy.clear();
  }; },
  forEach: function (state, key, reciever) { return function (cb) {
    latest$1(state).forEach(function (value, key, map) {
      cb(reciever.get(key), key, map);
    });
  }; },
  get: function (state) { return function (key) {
    var value = latest$1(state).get(key);

    if (state.finalizing || state.finalized || !isDraftable(value)) {
      return value;
    }

    if (value !== state.base.get(key)) {
      return value;
    }

    var draft = createProxy(value, state);
    prepareCopy(state);
    state.copy.set(key, draft);
    return draft;
  }; },
  keys: function (state) { return function () { return latest$1(state).keys(); }; },
  values: iterateMapValues,
  entries: iterateMapValues
});

function proxySet(target) {
  Object.defineProperties(target, setTraps);

  if (hasSymbol) {
    Object.defineProperty(target, Symbol.iterator, proxyMethod(iterateSetValues));
  }
}

var iterateSetValues = makeIterateSetValues(createProxy);
var setTraps = finalizeTraps({
  size: function (state) {
    return latest$1(state).size;
  },
  add: function (state) { return function (value) {
    if (!latest$1(state).has(value)) {
      markChanged(state);

      if (!state.copy) {
        prepareCopy(state);
      }

      state.copy.add(value);
    }

    return state.draft;
  }; },
  delete: function (state) { return function (value) {
    markChanged(state);

    if (!state.copy) {
      prepareCopy(state);
    }

    return state.copy.delete(value);
  }; },
  has: function (state) { return function (key) {
    return latest$1(state).has(key);
  }; },
  clear: function (state) { return function () {
    markChanged(state);

    if (!state.copy) {
      prepareCopy(state);
    }

    return state.copy.clear();
  }; },
  keys: iterateSetValues,
  entries: iterateSetValues,
  values: iterateSetValues,
  forEach: function (state) { return function (cb, thisArg) {
    var iterator = iterateSetValues(state)();
    var result = iterator.next();

    while (!result.done) {
      cb.call(thisArg, result.value, result.value, state.draft);
      result = iterator.next();
    }
  }; }
});

function finalizeTraps(traps) {
  return Object.keys(traps).reduce(function (acc, key) {
    var builder = key === "size" ? proxyAttr : proxyMethod;
    acc[key] = builder(traps[key], key);
    return acc;
  }, {});
}

function proxyAttr(fn) {
  return {
    get: function get() {
      var state = this[DRAFT_STATE];
      assertUnrevoked(state);
      return fn(state);
    }

  };
}

function proxyMethod(trap, key) {
  return {
    get: function get() {
      return function () {
        var args = [], len = arguments.length;
        while ( len-- ) args[ len ] = arguments[ len ];

        var state = this[DRAFT_STATE];
        assertUnrevoked(state);
        return trap(state, key, state.draft).apply(void 0, args);
      };
    }

  };
}

function assertUnrevoked(state) {
  if (state.revoked === true) { throw new Error("Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? " + JSON.stringify(latest$1(state))); }
} // This looks expensive, but only proxies are visited, and only objects without known changes are scanned.


function markChangesSweep(drafts) {
  // The natural order of drafts in the `scope` array is based on when they
  // were accessed. By processing drafts in reverse natural order, we have a
  // better chance of processing leaf nodes first. When a leaf node is known to
  // have changed, we can avoid any traversal of its ancestor nodes.
  for (var i = drafts.length - 1; i >= 0; i--) {
    var state = drafts[i][DRAFT_STATE];

    if (!state.modified) {
      if (Array.isArray(state.base)) {
        if (hasArrayChanges(state)) { markChanged(state); }
      } else if (isMap(state.base)) {
        if (hasMapChanges(state)) { markChanged(state); }
      } else if (isSet(state.base)) {
        if (hasSetChanges(state)) { markChanged(state); }
      } else if (hasObjectChanges(state)) {
        markChanged(state);
      }
    }
  }
}

function markChangesRecursively(object) {
  if (!object || typeof object !== "object") { return; }
  var state = object[DRAFT_STATE];
  if (!state) { return; }
  var base = state.base;
  var draft = state.draft;
  var assigned = state.assigned;

  if (!Array.isArray(object)) {
    // Look for added keys.
    Object.keys(draft).forEach(function (key) {
      // The `undefined` check is a fast path for pre-existing keys.
      if (base[key] === undefined && !has(base, key)) {
        assigned[key] = true;
        markChanged(state);
      } else if (!assigned[key]) {
        // Only untouched properties trigger recursion.
        markChangesRecursively(draft[key]);
      }
    }); // Look for removed keys.

    Object.keys(base).forEach(function (key) {
      // The `undefined` check is a fast path for pre-existing keys.
      if (draft[key] === undefined && !has(draft, key)) {
        assigned[key] = false;
        markChanged(state);
      }
    });
  } else if (hasArrayChanges(state)) {
    markChanged(state);
    assigned.length = true;

    if (draft.length < base.length) {
      for (var i = draft.length; i < base.length; i++) { assigned[i] = false; }
    } else {
      for (var i$1 = base.length; i$1 < draft.length; i$1++) { assigned[i$1] = true; }
    }

    for (var i$2 = 0; i$2 < draft.length; i$2++) {
      // Only untouched indices trigger recursion.
      if (assigned[i$2] === undefined) { markChangesRecursively(draft[i$2]); }
    }
  }
}

function hasObjectChanges(state) {
  var base = state.base;
  var draft = state.draft; // Search for added keys and changed keys. Start at the back, because
  // non-numeric keys are ordered by time of definition on the object.

  var keys = Object.keys(draft);

  for (var i = keys.length - 1; i >= 0; i--) {
    var key = keys[i];
    var baseValue = base[key]; // The `undefined` check is a fast path for pre-existing keys.

    if (baseValue === undefined && !has(base, key)) {
      return true;
    } // Once a base key is deleted, future changes go undetected, because its
    // descriptor is erased. This branch detects any missed changes.
    else {
        var value = draft[key];
        var state$1 = value && value[DRAFT_STATE];

        if (state$1 ? state$1.base !== baseValue : !is(value, baseValue)) {
          return true;
        }
      }
  } // At this point, no keys were added or changed.
  // Compare key count to determine if keys were deleted.


  return keys.length !== Object.keys(base).length;
}

function hasArrayChanges(state) {
  var draft = state.draft;
  if (draft.length !== state.base.length) { return true; } // See #116
  // If we first shorten the length, our array interceptors will be removed.
  // If after that new items are added, result in the same original length,
  // those last items will have no intercepting property.
  // So if there is no own descriptor on the last position, we know that items were removed and added
  // N.B.: splice, unshift, etc only shift values around, but not prop descriptors, so we only have to check
  // the last one

  var descriptor = Object.getOwnPropertyDescriptor(draft, draft.length - 1); // descriptor can be null, but only for newly created sparse arrays, eg. new Array(10)

  if (descriptor && !descriptor.get) { return true; } // For all other cases, we don't have to compare, as they would have been picked up by the index setters

  return false;
}

function hasMapChanges(state) {
  var base = state.base;
  var draft = state.draft;
  if (base.size !== draft.size) { return true; } // IE11 supports only forEach iteration

  var hasChanges = false;
  draft.forEach(function (value, key) {
    if (!hasChanges) {
      hasChanges = isDraftable(value) ? value.modified : value !== base.get(key);
    }
  });
  return hasChanges;
}

function hasSetChanges(state) {
  var base = state.base;
  var draft = state.draft;
  if (base.size !== draft.size) { return true; } // IE11 supports only forEach iteration

  var hasChanges = false;
  draft.forEach(function (value, key) {
    if (!hasChanges) {
      hasChanges = isDraftable(value) ? value.modified : !base.has(key);
    }
  });
  return hasChanges;
}

function createHiddenProperty(target, prop, value) {
  Object.defineProperty(target, prop, {
    value: value,
    enumerable: false,
    writable: true
  });
}

var legacyProxy = /*#__PURE__*/Object.freeze({
	willFinalize: willFinalize,
	createProxy: createProxy
});

var obj$1, obj$1$1;

function willFinalize$1() {}
/**
 * Returns a new draft of the `base` object.
 *
 * The second argument is the parent draft-state (used internally).
 */

function createProxy$1(base, parent) {
  var scope = parent ? parent.scope : ImmerScope.current;
  var state = {
    // Track which produce call this is associated with.
    scope: scope,
    // True for both shallow and deep changes.
    modified: false,
    // Used during finalization.
    finalized: false,
    // Track which properties have been assigned (true) or deleted (false).
    assigned: {},
    // The parent draft state.
    parent: parent,
    // The base state.
    base: base,
    // The base proxy.
    draft: null,
    // Any property proxies.
    drafts: {},
    // The base copy with any updated values.
    copy: null,
    // Called by the `produce` function.
    revoke: null
  };
  var target = state;
  var traps = objectTraps;

  if (Array.isArray(base)) {
    target = [state];
    traps = arrayTraps;
  } // Map drafts must support object keys, so we use Map objects to track changes.
  else if (isMap(base)) {
      traps = mapTraps$1;
      state.drafts = new Map();
      state.assigned = new Map();
    } // Set drafts use a Map object to track which of its values are drafted.
    // And we don't need the "assigned" property, because Set objects have no keys.
    else if (isSet(base)) {
        traps = setTraps$1;
        state.drafts = new Map();
      }

  var ref = Proxy.revocable(target, traps);
  var revoke = ref.revoke;
  var proxy = ref.proxy;
  state.draft = proxy;
  state.revoke = revoke;
  scope.drafts.push(proxy);
  return proxy;
}
/**
 * Object drafts
 */

var objectTraps = {
  get: function get(state, prop) {
    if (prop === DRAFT_STATE) { return state; }
    var drafts = state.drafts; // Check for existing draft in unmodified state.

    if (!state.modified && has(drafts, prop)) {
      return drafts[prop];
    }

    var value = latest$2(state)[prop];

    if (state.finalized || !isDraftable(value)) {
      return value;
    } // Check for existing draft in modified state.


    if (state.modified) {
      // Assigned values are never drafted. This catches any drafts we created, too.
      if (value !== peek$1(state.base, prop)) { return value; } // Store drafts on the copy (when one exists).

      drafts = state.copy;
    }

    return drafts[prop] = createProxy$1(value, state);
  },

  has: function has(state, prop) {
    return prop in latest$2(state);
  },

  ownKeys: function ownKeys(state) {
    return Reflect.ownKeys(latest$2(state));
  },

  set: function set(state, prop, value) {
    if (!state.modified) {
      var baseValue = peek$1(state.base, prop); // Optimize based on value's truthiness. Truthy values are guaranteed to
      // never be undefined, so we can avoid the `in` operator. Lastly, truthy
      // values may be drafts, but falsy values are never drafts.

      var isUnchanged = value ? is(baseValue, value) || value === state.drafts[prop] : is(baseValue, value) && prop in state.base;
      if (isUnchanged) { return true; }
      markChanged$1(state);
    }

    state.assigned[prop] = true;
    state.copy[prop] = value;
    return true;
  },

  deleteProperty: function deleteProperty(state, prop) {
    // The `undefined` check is a fast path for pre-existing keys.
    if (peek$1(state.base, prop) !== undefined || prop in state.base) {
      state.assigned[prop] = false;
      markChanged$1(state);
    } else if (state.assigned[prop]) {
      // if an originally not assigned property was deleted
      delete state.assigned[prop];
    }

    if (state.copy) { delete state.copy[prop]; }
    return true;
  },

  // Note: We never coerce `desc.value` into an Immer draft, because we can't make
  // the same guarantee in ES5 mode.
  getOwnPropertyDescriptor: function getOwnPropertyDescriptor(state, prop) {
    var owner = latest$2(state);
    var desc = Reflect.getOwnPropertyDescriptor(owner, prop);

    if (desc) {
      desc.writable = true;
      desc.configurable = !Array.isArray(owner) || prop !== "length";
    }

    return desc;
  },

  defineProperty: function defineProperty() {
    throw new Error("Object.defineProperty() cannot be used on an Immer draft"); // prettier-ignore
  },

  getPrototypeOf: function getPrototypeOf(state) {
    return Object.getPrototypeOf(state.base);
  },

  setPrototypeOf: function setPrototypeOf() {
    throw new Error("Object.setPrototypeOf() cannot be used on an Immer draft"); // prettier-ignore
  }

};
/**
 * Array drafts
 */

var arrayTraps = {};
each(objectTraps, function (key, fn) {
  arrayTraps[key] = function () {
    arguments[0] = arguments[0][0];
    return fn.apply(this, arguments);
  };
});

arrayTraps.deleteProperty = function (state, prop) {
  if (isNaN(parseInt(prop))) {
    throw new Error("Immer only supports deleting array indices"); // prettier-ignore
  }

  return objectTraps.deleteProperty.call(this, state[0], prop);
};

arrayTraps.set = function (state, prop, value) {
  if (prop !== "length" && isNaN(parseInt(prop))) {
    throw new Error("Immer only supports setting array indices and the 'length' property"); // prettier-ignore
  }

  return objectTraps.set.call(this, state[0], prop, value);
}; // Used by Map and Set drafts


var reflectTraps = makeReflectTraps(["ownKeys", "has", "set", "deleteProperty", "defineProperty", "getOwnPropertyDescriptor", "preventExtensions", "isExtensible", "getPrototypeOf"]);
/**
 * Map drafts
 */

var mapTraps$1 = makeTrapsForGetters(( obj$1 = {}, obj$1[DRAFT_STATE] = function (state) { return state; }, obj$1.size = function (state) { return latest$2(state).size; }, obj$1.has = function (state) { return function (key) { return latest$2(state).has(key); }; }, obj$1.set = function (state) { return function (key, value) {
    var values = latest$2(state);

    if (!values.has(key) || values.get(key) !== value) {
      markChanged$1(state);
      state.assigned.set(key, true);
      state.copy.set(key, value);
    }

    return state.draft;
  }; }, obj$1.delete = function (state) { return function (key) {
    if (latest$2(state).has(key)) {
      markChanged$1(state);
      state.assigned.set(key, false);
      return state.copy.delete(key);
    }

    return false;
  }; }, obj$1.clear = function (state) { return function () {
    markChanged$1(state);
    state.assigned = new Map();

    for (var i = 0, list = latest$2(state).keys(); i < list.length; i += 1) {
      var key = list[i];

      state.assigned.set(key, false);
    }

    return state.copy.clear();
  }; }, obj$1.forEach = function (state, _, receiver) { return function (cb, thisArg) { return latest$2(state).forEach(function (_, key, map) {
    var value = receiver.get(key);
    cb.call(thisArg, value, key, map);
  }); }; }, obj$1.get = function (state) { return function (key) {
    var drafts = state[state.modified ? "copy" : "drafts"];

    if (drafts.has(key)) {
      return drafts.get(key);
    }

    var value = latest$2(state).get(key);

    if (state.finalized || !isDraftable(value)) {
      return value;
    }

    var draft = createProxy$1(value, state);
    drafts.set(key, draft);
    return draft;
  }; }, obj$1.keys = function (state) { return function () { return latest$2(state).keys(); }; }, obj$1.values = iterateMapValues, obj$1.entries = iterateMapValues, obj$1[hasSymbol ? Symbol.iterator : "@@iterator"] = iterateMapValues, obj$1 ));
var iterateSetValues$1 = makeIterateSetValues(createProxy$1);
/**
 * Set drafts
 */

var setTraps$1 = makeTrapsForGetters(( obj$1$1 = {}, obj$1$1[DRAFT_STATE] = function (state) { return state; }, obj$1$1.size = function (state) { return latest$2(state).size; }, obj$1$1.has = function (state) { return function (key) { return latest$2(state).has(key); }; }, obj$1$1.add = function (state) { return function (value) {
    if (!latest$2(state).has(value)) {
      markChanged$1(state);
      state.copy.add(value);
    }

    return state.draft;
  }; }, obj$1$1.delete = function (state) { return function (value) {
    markChanged$1(state);
    return state.copy.delete(value);
  }; }, obj$1$1.clear = function (state) { return function () {
    markChanged$1(state);
    return state.copy.clear();
  }; }, obj$1$1.forEach = function (state) { return function (cb, thisArg) {
    var iterator = iterateSetValues$1(state)();
    var result = iterator.next();

    while (!result.done) {
      cb.call(thisArg, result.value, result.value, state.draft);
      result = iterator.next();
    }
  }; }, obj$1$1.keys = iterateSetValues$1, obj$1$1.values = iterateSetValues$1, obj$1$1.entries = iterateSetValues$1, obj$1$1[hasSymbol ? Symbol.iterator : "@@iterator"] = iterateSetValues$1, obj$1$1 ));
/**
 * Helpers
 */
// Retrieve the latest values of the draft.

function latest$2(state) {
  return state.copy || state.base;
} // Access a property without creating an Immer draft.


function peek$1(draft, prop) {
  var state = draft[DRAFT_STATE];
  var desc = Reflect.getOwnPropertyDescriptor(state ? latest$2(state) : draft, prop);
  return desc && desc.value;
}

function markChanged$1(state) {
  if (!state.modified) {
    state.modified = true;
    var base = state.base;
    var drafts = state.drafts;
    var parent = state.parent;
    var copy = shallowCopy(base);

    if (isSet(base)) {
      // Note: The `drafts` property is preserved for Set objects, since
      // we need to keep track of which values are drafted.
      assignSet(copy, drafts);
    } else {
      // Merge nested drafts into the copy.
      if (isMap(base)) { assignMap(copy, drafts); }else { assign(copy, drafts); }
      state.drafts = null;
    }

    state.copy = copy;

    if (parent) {
      markChanged$1(parent);
    }
  }
}
/** Create traps that all use the `Reflect` API on the `latest(state)` */


function makeReflectTraps(names) {
  return names.reduce(function (traps, name) {
    traps[name] = function (state) {
      var args = [], len = arguments.length - 1;
      while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

      return Reflect[name].apply(Reflect, [ latest$2(state) ].concat( args ));
    };

    return traps;
  }, {});
}

function makeTrapsForGetters(getters) {
  return Object.assign({}, reflectTraps, {
    get: function get(state, prop, receiver) {
      return getters.hasOwnProperty(prop) ? getters[prop](state, prop, receiver) : Reflect.get(state, prop, receiver);
    },

    setPrototypeOf: function setPrototypeOf(state) {
      throw new Error("Object.setPrototypeOf() cannot be used on an Immer draft"); // prettier-ignore
    }

  });
}

var modernProxy = /*#__PURE__*/Object.freeze({
	willFinalize: willFinalize$1,
	createProxy: createProxy$1
});

function generatePatches(state, basePath, patches, inversePatches) {
  var generatePatchesFn = Array.isArray(state.base) ? generateArrayPatches : isSet(state.base) ? generateSetPatches : generatePatchesFromAssigned;
  generatePatchesFn(state, basePath, patches, inversePatches);
}

function generateArrayPatches(state, basePath, patches, inversePatches) {
  var assign, assign$1;

  var base = state.base;
  var copy = state.copy;
  var assigned = state.assigned; // Reduce complexity by ensuring `base` is never longer.

  if (copy.length < base.length) {
    (assign = [copy, base], base = assign[0], copy = assign[1]);
    (assign$1 = [inversePatches, patches], patches = assign$1[0], inversePatches = assign$1[1]);
  }

  var delta = copy.length - base.length; // Find the first replaced index.

  var start = 0;

  while (base[start] === copy[start] && start < base.length) {
    ++start;
  } // Find the last replaced index. Search from the end to optimize splice patches.


  var end = base.length;

  while (end > start && base[end - 1] === copy[end + delta - 1]) {
    --end;
  } // Process replaced indices.


  for (var i = start; i < end; ++i) {
    if (assigned[i] && copy[i] !== base[i]) {
      var path = basePath.concat([i]);
      patches.push({
        op: "replace",
        path: path,
        value: copy[i]
      });
      inversePatches.push({
        op: "replace",
        path: path,
        value: base[i]
      });
    }
  }

  var replaceCount = patches.length; // Process added indices.

  for (var i$1 = end + delta - 1; i$1 >= end; --i$1) {
    var path$1 = basePath.concat([i$1]);
    patches[replaceCount + i$1 - end] = {
      op: "add",
      path: path$1,
      value: copy[i$1]
    };
    inversePatches.push({
      op: "remove",
      path: path$1
    });
  }
} // This is used for both Map objects and normal objects.


function generatePatchesFromAssigned(state, basePath, patches, inversePatches) {
  var base = state.base;
  var copy = state.copy;
  each(state.assigned, function (key, assignedValue) {
    var origValue = get(base, key);
    var value = get(copy, key);
    var op = !assignedValue ? "remove" : has(base, key) ? "replace" : "add";
    if (origValue === value && op === "replace") { return; }
    var path = basePath.concat(key);
    patches.push(op === "remove" ? {
      op: op,
      path: path
    } : {
      op: op,
      path: path,
      value: value
    });
    inversePatches.push(op === "add" ? {
      op: "remove",
      path: path
    } : op === "remove" ? {
      op: "add",
      path: path,
      value: origValue
    } : {
      op: "replace",
      path: path,
      value: origValue
    });
  });
}

function generateSetPatches(state, basePath, patches, inversePatches) {
  var base = state.base;
  var copy = state.copy;
  var i = 0;

  for (var i$1 = 0, list = base; i$1 < list.length; i$1 += 1) {
    var value = list[i$1];

    if (!copy.has(value)) {
      var path = basePath.concat([i]);
      patches.push({
        op: "remove",
        path: path,
        value: value
      });
      inversePatches.unshift({
        op: "add",
        path: path,
        value: value
      });
    }

    i++;
  }

  i = 0;

  for (var i$2 = 0, list$1 = copy; i$2 < list$1.length; i$2 += 1) {
    var value$1 = list$1[i$2];

    if (!base.has(value$1)) {
      var path$1 = basePath.concat([i]);
      patches.push({
        op: "add",
        path: path$1,
        value: value$1
      });
      inversePatches.unshift({
        op: "remove",
        path: path$1,
        value: value$1
      });
    }

    i++;
  }
}

var applyPatches = function (draft, patches) {
  for (var i$1 = 0, list = patches; i$1 < list.length; i$1 += 1) {
    var patch = list[i$1];

    var path = patch.path;
    var op = patch.op;
    if (!path.length) { throw new Error("Illegal state"); }
    var base = draft;

    for (var i = 0; i < path.length - 1; i++) {
      base = get(base, path[i]);
      if (!base || typeof base !== "object") { throw new Error("Cannot apply patch, path doesn't resolve: " + path.join("/")); } // prettier-ignore
    }

    var value = clone(patch.value); // used to clone patch to ensure original patch is not modified, see #411

    var key = path[path.length - 1];

    switch (op) {
      case "replace":
        if (isMap(base)) {
          base.set(key, value);
        } else if (isSet(base)) {
          throw new Error('Sets cannot have "replace" patches.');
        } else {
          // if value is an object, then it's assigned by reference
          // in the following add or remove ops, the value field inside the patch will also be modifyed
          // so we use value from the cloned patch
          base[key] = value;
        }

        break;

      case "add":
        if (isSet(base)) {
          base.delete(patch.value);
        }

        Array.isArray(base) ? base.splice(key, 0, value) : isMap(base) ? base.set(key, value) : isSet(base) ? base.add(value) : base[key] = value;
        break;

      case "remove":
        Array.isArray(base) ? base.splice(key, 1) : isMap(base) ? base.delete(key) : isSet(base) ? base.delete(patch.value) : delete base[key];
        break;

      default:
        throw new Error("Unsupported patch operation: " + op);
    }
  }

  return draft;
};

function verifyMinified() {}

var configDefaults = {
  useProxies: typeof Proxy !== "undefined" && typeof Proxy.revocable !== "undefined" && typeof Reflect !== "undefined",
  autoFreeze: typeof process !== "undefined" ? "development" !== "production" : verifyMinified.name === "verifyMinified",
  onAssign: null,
  onDelete: null,
  onCopy: null
};
var Immer = function Immer(config) {
  assign(this, configDefaults, config);
  this.setUseProxies(this.useProxies);
  this.produce = this.produce.bind(this);
  this.produceWithPatches = this.produceWithPatches.bind(this);
};

Immer.prototype.produce = function produce (base, recipe, patchListener) {
    var this$1 = this;

  // curried invocation
  if (typeof base === "function" && typeof recipe !== "function") {
    var defaultBase = recipe;
    recipe = base;
    var self = this;
    return function curriedProduce(base) {
        var this$1 = this;
        if ( base === void 0 ) base = defaultBase;
        var args = [], len = arguments.length - 1;
        while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

      return self.produce(base, function (draft) { return recipe.call.apply(recipe, [ this$1, draft ].concat( args )); }); // prettier-ignore
    };
  } // prettier-ignore


  {
    if (typeof recipe !== "function") {
      throw new Error("The first or second argument to `produce` must be a function");
    }

    if (patchListener !== undefined && typeof patchListener !== "function") {
      throw new Error("The third argument to `produce` must be a function or undefined");
    }
  }
  var result; // Only plain objects, arrays, and "immerable classes" are drafted.

  if (isDraftable(base)) {
    var scope = ImmerScope.enter();
    var proxy = this.createProxy(base);
    var hasError = true;

    try {
      result = recipe(proxy);
      hasError = false;
    } finally {
      // finally instead of catch + rethrow better preserves original stack
      if (hasError) { scope.revoke(); }else { scope.leave(); }
    }

    if (typeof Promise !== "undefined" && result instanceof Promise) {
      return result.then(function (result) {
        scope.usePatches(patchListener);
        return this$1.processResult(result, scope);
      }, function (error) {
        scope.revoke();
        throw error;
      });
    }

    scope.usePatches(patchListener);
    return this.processResult(result, scope);
  } else {
    result = recipe(base);
    if (result === NOTHING) { return undefined; }
    if (result === undefined) { result = base; }
    this.maybeFreeze(result, true);
    return result;
  }
};

Immer.prototype.produceWithPatches = function produceWithPatches (arg1, arg2, arg3) {
    var this$1 = this;

  if (typeof arg1 === "function") {
    return function (state) {
        var args = [], len = arguments.length - 1;
        while ( len-- > 0 ) args[ len ] = arguments[ len + 1 ];

        return this$1.produceWithPatches(state, function (draft) { return arg1.apply(void 0, [ draft ].concat( args )); });
      };
  } // non-curried form


  if (arg3) { throw new Error("A patch listener cannot be passed to produceWithPatches"); }
  var patches, inversePatches;
  var nextState = this.produce(arg1, arg2, function (p, ip) {
    patches = p;
    inversePatches = ip;
  });
  return [nextState, patches, inversePatches];
};

Immer.prototype.createDraft = function createDraft (base) {
  if (!isDraftable(base)) {
    throw new Error("First argument to `createDraft` must be a plain object, an array, or an immerable object"); // prettier-ignore
  }

  var scope = ImmerScope.enter();
  var proxy = this.createProxy(base);
  proxy[DRAFT_STATE].isManual = true;
  scope.leave();
  return proxy;
};

Immer.prototype.finishDraft = function finishDraft (draft, patchListener) {
  var state = draft && draft[DRAFT_STATE];

  if (!state || !state.isManual) {
    throw new Error("First argument to `finishDraft` must be a draft returned by `createDraft`"); // prettier-ignore
  }

  if (state.finalized) {
    throw new Error("The given draft is already finalized"); // prettier-ignore
  }

  var scope = state.scope;
  scope.usePatches(patchListener);
  return this.processResult(undefined, scope);
};

Immer.prototype.setAutoFreeze = function setAutoFreeze (value) {
  this.autoFreeze = value;
};

Immer.prototype.setUseProxies = function setUseProxies (value) {
  this.useProxies = value;
  assign(this, value ? modernProxy : legacyProxy);
};

Immer.prototype.applyPatches = function applyPatches$1 (base, patches) {
  // If a patch replaces the entire state, take that replacement as base
  // before applying patches
  var i;

  for (i = patches.length - 1; i >= 0; i--) {
    var patch = patches[i];

    if (patch.path.length === 0 && patch.op === "replace") {
      base = patch.value;
      break;
    }
  }

  if (isDraft(base)) {
    // N.B: never hits if some patch a replacement, patches are never drafts
    return applyPatches(base, patches);
  } // Otherwise, produce a copy of the base state.


  return this.produce(base, function (draft) { return applyPatches(draft, patches.slice(i + 1)); });
};
/** @internal */


Immer.prototype.processResult = function processResult (result, scope) {
  var baseDraft = scope.drafts[0];
  var isReplaced = result !== undefined && result !== baseDraft;
  this.willFinalize(scope, result, isReplaced);

  if (isReplaced) {
    if (baseDraft[DRAFT_STATE].modified) {
      scope.revoke();
      throw new Error("An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft."); // prettier-ignore
    }

    if (isDraftable(result)) {
      // Finalize the result in case it contains (or is) a subset of the draft.
      result = this.finalize(result, null, scope);
      this.maybeFreeze(result);
    }

    if (scope.patches) {
      scope.patches.push({
        op: "replace",
        path: [],
        value: result
      });
      scope.inversePatches.push({
        op: "replace",
        path: [],
        value: baseDraft[DRAFT_STATE].base
      });
    }
  } else {
    // Finalize the base draft.
    result = this.finalize(baseDraft, [], scope);
  }

  scope.revoke();

  if (scope.patches) {
    scope.patchListener(scope.patches, scope.inversePatches);
  }

  return result !== NOTHING ? result : undefined;
};
/**
 * @internal
 * Finalize a draft, returning either the unmodified base state or a modified
 * copy of the base state.
 */


Immer.prototype.finalize = function finalize (draft, path, scope) {
    var this$1 = this;

  var state = draft[DRAFT_STATE];

  if (!state) {
    if (Object.isFrozen(draft)) { return draft; }
    return this.finalizeTree(draft, null, scope);
  } // Never finalize drafts owned by another scope.


  if (state.scope !== scope) {
    return draft;
  }

  if (!state.modified) {
    this.maybeFreeze(state.base, true);
    return state.base;
  }

  if (!state.finalized) {
    state.finalized = true;
    this.finalizeTree(state.draft, path, scope); // We cannot really delete anything inside of a Set. We can only replace the whole Set.

    if (this.onDelete && !isSet(state.base)) {
      // The `assigned` object is unreliable with ES5 drafts.
      if (this.useProxies) {
        var assigned = state.assigned;
        each(assigned, function (prop, exists) {
          if (!exists) { this$1.onDelete(state, prop); }
        });
      } else {
        // TODO: Figure it out for Maps and Sets if we need to support ES5
        var base = state.base;
          var copy = state.copy;
        each(base, function (prop) {
          if (!has(copy, prop)) { this$1.onDelete(state, prop); }
        });
      }
    }

    if (this.onCopy) {
      this.onCopy(state);
    } // At this point, all descendants of `state.copy` have been finalized,
    // so we can be sure that `scope.canAutoFreeze` is accurate.


    if (this.autoFreeze && scope.canAutoFreeze) {
      freeze(state.copy, false);
    }

    if (path && scope.patches) {
      generatePatches(state, path, scope.patches, scope.inversePatches);
    }
  }

  return state.copy;
};
/**
 * @internal
 * Finalize all drafts in the given state tree.
 */


Immer.prototype.finalizeTree = function finalizeTree (root, rootPath, scope) {
    var this$1 = this;

  var state = root[DRAFT_STATE];

  if (state) {
    if (!this.useProxies) {
      // Create the final copy, with added keys and without deleted keys.
      state.copy = shallowCopy(state.draft, true);
    }

    root = state.copy;
  }

  var needPatches = !!rootPath && !!scope.patches;

  var finalizeProperty = function (prop, value, parent) {
    if (value === parent) {
      throw Error("Immer forbids circular references");
    } // In the `finalizeTree` method, only the `root` object may be a draft.


    var isDraftProp = !!state && parent === root;
    var isSetMember = isSet(parent);

    if (isDraft(value)) {
      var path = isDraftProp && needPatches && !isSetMember && // Set objects are atomic since they have no keys.
      !has(state.assigned, prop) // Skip deep patches for assigned keys.
      ? rootPath.concat(prop) : null; // Drafts owned by `scope` are finalized here.

      value = this$1.finalize(value, path, scope);
      replace(parent, prop, value); // Drafts from another scope must prevent auto-freezing.

      if (isDraft(value)) {
        scope.canAutoFreeze = false;
      } // Unchanged drafts are never passed to the `onAssign` hook.


      if (isDraftProp && value === get(state.base, prop)) { return; }
    } // Unchanged draft properties are ignored.
    else if (isDraftProp && is(value, get(state.base, prop))) {
        return;
      } // Search new objects for unfinalized drafts. Frozen objects should never contain drafts.
      else if (isDraftable(value) && !Object.isFrozen(value)) {
          each(value, finalizeProperty);
          this$1.maybeFreeze(value);
        }

    if (isDraftProp && this$1.onAssign && !isSetMember) {
      this$1.onAssign(state, prop, value);
    }
  };

  each(root, finalizeProperty);
  return root;
};

Immer.prototype.maybeFreeze = function maybeFreeze (value, deep) {
    if ( deep === void 0 ) deep = false;

  if (this.autoFreeze && !isDraft(value)) {
    freeze(value, deep);
  }
};

function replace(parent, prop, value) {
  if (isMap(parent)) {
    parent.set(prop, value);
  } else if (isSet(parent)) {
    // In this case, the `prop` is actually a draft.
    parent.delete(prop);
    parent.add(value);
  } else if (Array.isArray(parent) || isEnumerable(parent, prop)) {
    // Preserve non-enumerable properties.
    parent[prop] = value;
  } else {
    Object.defineProperty(parent, prop, {
      value: value,
      writable: true,
      configurable: true
    });
  }
}

var immer = new Immer();
/**
 * The `produce` function takes a value and a "recipe function" (whose
 * return value often depends on the base state). The recipe function is
 * free to mutate its first argument however it wants. All mutations are
 * only ever applied to a __copy__ of the base state.
 *
 * Pass only a function to create a "curried producer" which relieves you
 * from passing the recipe function every time.
 *
 * Only plain objects and arrays are made mutable. All other objects are
 * considered uncopyable.
 *
 * Note: This function is __bound__ to its `Immer` instance.
 *
 * @param {any} base - the initial state
 * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified
 * @param {Function} patchListener - optional function that will be called with all the patches produced here
 * @returns {any} a new state, or the initial state if nothing was modified
 */

var produce = immer.produce;
/**
 * Like `produce`, but `produceWithPatches` always returns a tuple
 * [nextState, patches, inversePatches] (instead of just the next state)
 */

var produceWithPatches = immer.produceWithPatches.bind(immer);
/**
 * Pass true to automatically freeze all copies created by Immer.
 *
 * By default, auto-freezing is disabled in production.
 */

var setAutoFreeze = immer.setAutoFreeze.bind(immer);
/**
 * Pass true to use the ES2015 `Proxy` class when creating drafts, which is
 * always faster than using ES5 proxies.
 *
 * By default, feature detection is used, so calling this is rarely necessary.
 */

var setUseProxies = immer.setUseProxies.bind(immer);
/**
 * Apply an array of Immer patches to the first argument.
 *
 * This function is a producer, which means copy-on-write is in effect.
 */

var applyPatches$1 = immer.applyPatches.bind(immer);
/**
 * Create an Immer draft from the given base state, which may be a draft itself.
 * The draft can be modified until you finalize it with the `finishDraft` function.
 */

var createDraft = immer.createDraft.bind(immer);
/**
 * Finalize an Immer draft from a `createDraft` call, returning the base state
 * (if no changes were made) or a modified copy. The draft must *not* be
 * mutated afterwards.
 *
 * Pass a function as the 2nd argument to generate Immer patches based on the
 * changes that were made.
 */

var finishDraft = immer.finishDraft.bind(immer);

/* harmony default export */ __webpack_exports__["default"] = (produce);

//# sourceMappingURL=immer.module.js.map

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../../process/browser.js */ "./node_modules/process/browser.js")))

/***/ }),

/***/ "./node_modules/iterative/dist/common.js":
/*!***********************************************!*\
  !*** ./node_modules/iterative/dist/common.js ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Throw when iterator is `done`.
 */
class StopIteration extends Error {
    constructor() {
        super("Iterator is already marked as done");
    }
}
exports.StopIteration = StopIteration;
/**
 * Unique object for comparisons.
 */
exports.SENTINEL = Symbol("SENTINEL");
/**
 * Identity function. Returns input as output.
 */
exports.identity = (x) => x;
/**
 * Compare the two objects x and y and return an integer according to the
 * outcome. The return value is negative if `x < y`, positive if `x > y`,
 * otherwise zero.
 */
function cmp(x, y) {
    return x > y ? 1 : x < y ? -1 : 0;
}
exports.cmp = cmp;
//# sourceMappingURL=common.js.map

/***/ }),

/***/ "./node_modules/iterative/dist/index.js":
/*!**********************************************!*\
  !*** ./node_modules/iterative/dist/index.js ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const common_1 = __webpack_require__(/*! ./common */ "./node_modules/iterative/dist/common.js");
/**
 * Returns `true` when all values in iterable are truthy.
 */
function all(iterable, predicate = Boolean) {
    for (const item of iterable) {
        if (!predicate(item))
            return false;
    }
    return true;
}
exports.all = all;
/**
 * Returns `true` when any value in iterable is truthy.
 */
function any(iterable, predicate = Boolean) {
    for (const item of iterable) {
        if (predicate(item))
            return true;
    }
    return false;
}
exports.any = any;
/**
 * Returns `true` when any value in iterable is equal to `needle`.
 */
function contains(iterable, needle) {
    return any(iterable, x => x === needle);
}
exports.contains = contains;
/**
 * Returns an iterable of enumeration pairs.
 */
function enumerate(iterable, offset = 0) {
    return zip(range(offset), iterable);
}
exports.enumerate = enumerate;
/**
 * Returns an iterator object for the given `iterable`.
 */
function iter(iterable) {
    return iterable[Symbol.iterator]();
}
exports.iter = iter;
function next(iterator, defaultValue) {
    const item = iterator.next();
    if (item.done) {
        if (arguments.length === 1)
            throw new common_1.StopIteration();
        return defaultValue;
    }
    return item.value;
}
exports.next = next;
/**
 * Make an iterator that returns accumulated results of binary functions.
 */
function* accumulate(iterable, func) {
    const it = iter(iterable);
    let item = it.next();
    let total = item.value;
    if (item.done)
        return;
    yield total;
    while ((item = it.next())) {
        if (item.done)
            break;
        total = func(total, item.value);
        yield total;
    }
}
exports.accumulate = accumulate;
/**
 * Return an iterator flattening one level of nesting in an iterable of iterables.
 */
function* flatten(iterable) {
    for (const it of iterable) {
        for (const item of it) {
            yield item;
        }
    }
}
exports.flatten = flatten;
/**
 * Make an iterator that returns elements from the first iterable until it is
 * exhausted, then proceeds to the next iterable, until all of the iterables are
 * exhausted. Used for treating consecutive sequences as a single sequence.
 */
function chain(...iterables) {
    return flatten(iterables);
}
exports.chain = chain;
/**
 * This is a versatile function to create lists containing arithmetic progressions.
 */
function* range(start = 0, stop = Infinity, step = 1) {
    for (let i = start; i < stop; i += step)
        yield i;
}
exports.range = range;
/**
 * Make an iterator returning elements from the iterable and saving a copy of
 * each. When the iterable is exhausted, return elements from the saved copy.
 * Repeats indefinitely.
 */
function* cycle(iterable) {
    const saved = [];
    for (const item of iterable) {
        yield item;
        saved.push(item);
    }
    while (saved.length) {
        for (const item of saved) {
            yield item;
        }
    }
}
exports.cycle = cycle;
/**
 * Make an iterator that repeats `value` over and over again.
 */
function* repeat(value, times) {
    if (times === undefined)
        while (true)
            yield value;
    for (let i = 0; i < times; i++)
        yield value;
}
exports.repeat = repeat;
/**
 * Make an iterator that drops elements from the iterable as long as the
 * predicate is true; afterwards, returns every element.
 */
function* dropWhile(iterable, predicate) {
    const it = iter(iterable);
    let item = it.next();
    while (!item.done) {
        if (!predicate(item.value))
            break;
        item = it.next();
    }
    do {
        yield item.value;
        item = it.next();
    } while (!item.done);
}
exports.dropWhile = dropWhile;
/**
 * Make an iterator that returns elements from the iterable as long as the
 * predicate is true.
 */
function* takeWhile(iterable, predicate) {
    for (const item of iterable) {
        if (!predicate(item))
            break;
        yield item;
    }
}
exports.takeWhile = takeWhile;
/**
 * Make an iterator that returns consecutive keys and groups from the `iterable`.
 * The `func` is a function computing a key value for each element.
 */
function* groupBy(iterable, func) {
    const it = iter(iterable);
    let item = it.next();
    if (item.done)
        return;
    let key = func(item.value);
    let currKey = key;
    function* grouper() {
        do {
            yield item.value;
            item = it.next();
            // Break iteration when underlying iterator is `done`.
            if (item.done) {
                currKey = common_1.SENTINEL;
                return;
            }
            currKey = func(item.value);
        } while (key === currKey);
    }
    do {
        yield [key, grouper()];
        // Skip over any remaining values not pulled from `grouper`.
        while (key === currKey) {
            item = it.next();
            if (item.done)
                return;
            currKey = func(item.value);
        }
        key = currKey;
    } while (!item.done);
}
exports.groupBy = groupBy;
/**
 * Make an iterator that returns selected elements from the `iterable`.
 */
function* slice(iterable, start = 0, stop = Infinity, step = 1) {
    const it = iter(range(start, stop, step));
    let next = it.next();
    for (const [index, item] of enumerate(iterable)) {
        if (next.done)
            return;
        if (index === next.value) {
            yield item;
            next = it.next();
        }
    }
}
exports.slice = slice;
function reduce(iterable, reducer, initializer) {
    const it = iter(iterable);
    let item;
    let accumulator = initializer === undefined ? next(it) : initializer;
    while ((item = it.next())) {
        if (item.done)
            break;
        accumulator = reducer(accumulator, item.value);
    }
    return accumulator;
}
exports.reduce = reduce;
/**
 * Apply function to every item of iterable and return an iterable of the results.
 */
function* map(iterable, func) {
    for (const item of iterable)
        yield func(item);
}
exports.map = map;
/**
 * Make an iterator that computes the function using arguments obtained from the
 * iterable. Used instead of `map()` when argument parameters are already
 * grouped in tuples from a single iterable (the data has been "pre-zipped").
 * The difference between `map()` and `spreadmap()` parallels the distinction
 * between `function(a, b)` and `function(...c)`.
 */
function* spreadmap(iterable, func) {
    for (const item of iterable)
        yield func(...item);
}
exports.spreadmap = spreadmap;
/**
 * Construct an `iterator` from those elements of `iterable` for which `func` returns true.
 */
function* filter(iterable, func = Boolean) {
    for (const item of iterable) {
        if (func(item))
            yield item;
    }
}
exports.filter = filter;
/**
 * Make an iterator that aggregates elements from each of the iterables. Returns
 * an iterator of tuples, where the `i`-th tuple contains the `i`-th element
 * from each of the argument sequences or iterables. The iterator stops when the
 * shortest input iterable is exhausted.
 */
function* zip(...iterables) {
    const iters = iterables.map(x => iter(x));
    while (iters.length) {
        const result = Array(iters.length);
        for (let i = 0; i < iters.length; i++) {
            const item = iters[i].next();
            if (item.done)
                return;
            result[i] = item.value;
        }
        yield result;
    }
}
exports.zip = zip;
/**
 * Make an iterator that aggregates elements from each of the iterables. If the
 * iterables are of uneven length, missing values are `undefined`. Iteration
 * continues until the longest iterable is exhausted.
 */
function zipLongest(...iterables) {
    return zipWithValue(undefined, ...iterables);
}
exports.zipLongest = zipLongest;
/**
 * Make an iterator that aggregates elements from each of the iterables. If the
 * iterables are of uneven length, missing values are `fillValue`. Iteration
 * continues until the longest iterable is exhausted.
 */
function* zipWithValue(fillValue, ...iterables) {
    const iters = iterables.map(x => iter(x));
    const noop = iter(repeat(fillValue));
    let counter = iters.length;
    while (true) {
        const result = Array(iters.length);
        for (let i = 0; i < iters.length; i++) {
            const item = iters[i].next();
            if (item.done) {
                counter -= 1;
                iters[i] = noop;
                result[i] = fillValue;
            }
            else {
                result[i] = item.value;
            }
        }
        if (counter === 0)
            break;
        yield result;
    }
}
exports.zipWithValue = zipWithValue;
/**
 * Return two independent iterables from a single iterable.
 */
function tee(iterable) {
    const queue = [];
    const it = iter(iterable);
    let owner;
    function* gen(id) {
        while (true) {
            while (queue.length) {
                yield queue.shift();
            }
            if (owner === -1)
                return;
            let item;
            while ((item = it.next())) {
                if (item.done) {
                    owner = -1;
                    return;
                }
                owner = id;
                queue.push(item.value);
                yield item.value;
                if (id !== owner)
                    break;
            }
        }
    }
    return [gen(0), gen(1)];
}
exports.tee = tee;
/**
 * Break iterable into lists of length `size`.
 */
function* chunk(iterable, size) {
    let chunk = [];
    for (const item of iterable) {
        chunk.push(item);
        if (chunk.length === size) {
            yield chunk;
            chunk = [];
        }
    }
    if (chunk.length)
        yield chunk;
}
exports.chunk = chunk;
/**
 * Returns an iterator of paired items, overlapping, from the original. When
 * the input iterable has a finite number of items `n`, the outputted iterable
 * will have `n - 1` items.
 */
function* pairwise(iterable) {
    const it = iter(iterable);
    let item = it.next();
    let prev = item.value;
    if (item.done)
        return;
    while ((item = it.next())) {
        if (item.done)
            return;
        yield [prev, item.value];
        prev = item.value;
    }
}
exports.pairwise = pairwise;
/**
 * Make an iterator that filters elements from `iterable` returning only those
 * that have a corresponding element in selectors that evaluates to `true`.
 */
function* compress(iterable, selectors) {
    for (const [item, valid] of zip(iterable, selectors)) {
        if (valid)
            yield item;
    }
}
exports.compress = compress;
function list(iterable, fn = common_1.identity) {
    const result = [];
    for (const item of iterable)
        result.push(fn(item));
    return result;
}
exports.list = list;
function sorted(iterable, keyFn = common_1.identity, cmpFn = common_1.cmp, reverse = false) {
    const array = list(iterable, item => [keyFn(item), item]);
    const sortFn = reverse
        ? (a, b) => -cmpFn(a[0], b[0])
        : (a, b) => cmpFn(a[0], b[0]);
    return array.sort(sortFn).map(x => x[1]);
}
exports.sorted = sorted;
/**
 * Return an object from an iterable, i.e. `Array.from` for objects.
 */
function dict(iterable) {
    return reduce(iterable, (obj, [key, value]) => {
        obj[key] = value;
        return obj;
    }, Object.create(null));
}
exports.dict = dict;
/**
 * Return the length (the number of items) of an iterable.
 */
function len(iterable) {
    let length = 0;
    for (const _ of iterable)
        length++;
    return length;
}
exports.len = len;
function min(iterable, keyFn = common_1.identity) {
    let value = Infinity;
    let result = undefined;
    for (const item of iterable) {
        const tmp = keyFn(item);
        if (tmp < value) {
            value = tmp;
            result = item;
        }
    }
    return result;
}
exports.min = min;
function max(iterable, keyFn = common_1.identity) {
    let value = -Infinity;
    let result = undefined;
    for (const item of iterable) {
        const tmp = keyFn(item);
        if (tmp > value) {
            value = tmp;
            result = item;
        }
    }
    return result;
}
exports.max = max;
/**
 * Sums `start` and the items of an `iterable` from left to right and returns
 * the total.
 */
function sum(iterable, start = 0) {
    return reduce(iterable, (x, y) => x + y, start);
}
exports.sum = sum;
/**
 * Recursively produce all produces of a list of iterators.
 */
function* _product(pools, buffer = []) {
    if (pools.length === 0) {
        yield buffer.slice();
        return;
    }
    const [pool, ...others] = pools;
    while (true) {
        const item = pool.next();
        if (item.value === common_1.SENTINEL)
            break;
        buffer.push(item.value);
        yield* _product(others, buffer);
        buffer.pop();
    }
}
/**
 * Cartesian product of input iterables.
 */
function* product(...iterables) {
    const pools = iterables.map(x => iter(cycle(chain(x, repeat(common_1.SENTINEL, 1)))));
    yield* _product(pools);
}
exports.product = product;
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/lodash/lodash.js":
/*!***************************************!*\
  !*** ./node_modules/lodash/lodash.js ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global, module) {var __WEBPACK_AMD_DEFINE_RESULT__;/**
 * @license
 * Lodash <https://lodash.com/>
 * Copyright OpenJS Foundation and other contributors <https://openjsf.org/>
 * Released under MIT license <https://lodash.com/license>
 * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>
 * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
 */
;(function() {

  /** Used as a safe reference for `undefined` in pre-ES5 environments. */
  var undefined;

  /** Used as the semantic version number. */
  var VERSION = '4.17.15';

  /** Used as the size to enable large array optimizations. */
  var LARGE_ARRAY_SIZE = 200;

  /** Error message constants. */
  var CORE_ERROR_TEXT = 'Unsupported core-js use. Try https://npms.io/search?q=ponyfill.',
      FUNC_ERROR_TEXT = 'Expected a function';

  /** Used to stand-in for `undefined` hash values. */
  var HASH_UNDEFINED = '__lodash_hash_undefined__';

  /** Used as the maximum memoize cache size. */
  var MAX_MEMOIZE_SIZE = 500;

  /** Used as the internal argument placeholder. */
  var PLACEHOLDER = '__lodash_placeholder__';

  /** Used to compose bitmasks for cloning. */
  var CLONE_DEEP_FLAG = 1,
      CLONE_FLAT_FLAG = 2,
      CLONE_SYMBOLS_FLAG = 4;

  /** Used to compose bitmasks for value comparisons. */
  var COMPARE_PARTIAL_FLAG = 1,
      COMPARE_UNORDERED_FLAG = 2;

  /** Used to compose bitmasks for function metadata. */
  var WRAP_BIND_FLAG = 1,
      WRAP_BIND_KEY_FLAG = 2,
      WRAP_CURRY_BOUND_FLAG = 4,
      WRAP_CURRY_FLAG = 8,
      WRAP_CURRY_RIGHT_FLAG = 16,
      WRAP_PARTIAL_FLAG = 32,
      WRAP_PARTIAL_RIGHT_FLAG = 64,
      WRAP_ARY_FLAG = 128,
      WRAP_REARG_FLAG = 256,
      WRAP_FLIP_FLAG = 512;

  /** Used as default options for `_.truncate`. */
  var DEFAULT_TRUNC_LENGTH = 30,
      DEFAULT_TRUNC_OMISSION = '...';

  /** Used to detect hot functions by number of calls within a span of milliseconds. */
  var HOT_COUNT = 800,
      HOT_SPAN = 16;

  /** Used to indicate the type of lazy iteratees. */
  var LAZY_FILTER_FLAG = 1,
      LAZY_MAP_FLAG = 2,
      LAZY_WHILE_FLAG = 3;

  /** Used as references for various `Number` constants. */
  var INFINITY = 1 / 0,
      MAX_SAFE_INTEGER = 9007199254740991,
      MAX_INTEGER = 1.7976931348623157e+308,
      NAN = 0 / 0;

  /** Used as references for the maximum length and index of an array. */
  var MAX_ARRAY_LENGTH = 4294967295,
      MAX_ARRAY_INDEX = MAX_ARRAY_LENGTH - 1,
      HALF_MAX_ARRAY_LENGTH = MAX_ARRAY_LENGTH >>> 1;

  /** Used to associate wrap methods with their bit flags. */
  var wrapFlags = [
    ['ary', WRAP_ARY_FLAG],
    ['bind', WRAP_BIND_FLAG],
    ['bindKey', WRAP_BIND_KEY_FLAG],
    ['curry', WRAP_CURRY_FLAG],
    ['curryRight', WRAP_CURRY_RIGHT_FLAG],
    ['flip', WRAP_FLIP_FLAG],
    ['partial', WRAP_PARTIAL_FLAG],
    ['partialRight', WRAP_PARTIAL_RIGHT_FLAG],
    ['rearg', WRAP_REARG_FLAG]
  ];

  /** `Object#toString` result references. */
  var argsTag = '[object Arguments]',
      arrayTag = '[object Array]',
      asyncTag = '[object AsyncFunction]',
      boolTag = '[object Boolean]',
      dateTag = '[object Date]',
      domExcTag = '[object DOMException]',
      errorTag = '[object Error]',
      funcTag = '[object Function]',
      genTag = '[object GeneratorFunction]',
      mapTag = '[object Map]',
      numberTag = '[object Number]',
      nullTag = '[object Null]',
      objectTag = '[object Object]',
      promiseTag = '[object Promise]',
      proxyTag = '[object Proxy]',
      regexpTag = '[object RegExp]',
      setTag = '[object Set]',
      stringTag = '[object String]',
      symbolTag = '[object Symbol]',
      undefinedTag = '[object Undefined]',
      weakMapTag = '[object WeakMap]',
      weakSetTag = '[object WeakSet]';

  var arrayBufferTag = '[object ArrayBuffer]',
      dataViewTag = '[object DataView]',
      float32Tag = '[object Float32Array]',
      float64Tag = '[object Float64Array]',
      int8Tag = '[object Int8Array]',
      int16Tag = '[object Int16Array]',
      int32Tag = '[object Int32Array]',
      uint8Tag = '[object Uint8Array]',
      uint8ClampedTag = '[object Uint8ClampedArray]',
      uint16Tag = '[object Uint16Array]',
      uint32Tag = '[object Uint32Array]';

  /** Used to match empty string literals in compiled template source. */
  var reEmptyStringLeading = /\b__p \+= '';/g,
      reEmptyStringMiddle = /\b(__p \+=) '' \+/g,
      reEmptyStringTrailing = /(__e\(.*?\)|\b__t\)) \+\n'';/g;

  /** Used to match HTML entities and HTML characters. */
  var reEscapedHtml = /&(?:amp|lt|gt|quot|#39);/g,
      reUnescapedHtml = /[&<>"']/g,
      reHasEscapedHtml = RegExp(reEscapedHtml.source),
      reHasUnescapedHtml = RegExp(reUnescapedHtml.source);

  /** Used to match template delimiters. */
  var reEscape = /<%-([\s\S]+?)%>/g,
      reEvaluate = /<%([\s\S]+?)%>/g,
      reInterpolate = /<%=([\s\S]+?)%>/g;

  /** Used to match property names within property paths. */
  var reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/,
      reIsPlainProp = /^\w*$/,
      rePropName = /[^.[\]]+|\[(?:(-?\d+(?:\.\d+)?)|(["'])((?:(?!\2)[^\\]|\\.)*?)\2)\]|(?=(?:\.|\[\])(?:\.|\[\]|$))/g;

  /**
   * Used to match `RegExp`
   * [syntax characters](http://ecma-international.org/ecma-262/7.0/#sec-patterns).
   */
  var reRegExpChar = /[\\^$.*+?()[\]{}|]/g,
      reHasRegExpChar = RegExp(reRegExpChar.source);

  /** Used to match leading and trailing whitespace. */
  var reTrim = /^\s+|\s+$/g,
      reTrimStart = /^\s+/,
      reTrimEnd = /\s+$/;

  /** Used to match wrap detail comments. */
  var reWrapComment = /\{(?:\n\/\* \[wrapped with .+\] \*\/)?\n?/,
      reWrapDetails = /\{\n\/\* \[wrapped with (.+)\] \*/,
      reSplitDetails = /,? & /;

  /** Used to match words composed of alphanumeric characters. */
  var reAsciiWord = /[^\x00-\x2f\x3a-\x40\x5b-\x60\x7b-\x7f]+/g;

  /** Used to match backslashes in property paths. */
  var reEscapeChar = /\\(\\)?/g;

  /**
   * Used to match
   * [ES template delimiters](http://ecma-international.org/ecma-262/7.0/#sec-template-literal-lexical-components).
   */
  var reEsTemplate = /\$\{([^\\}]*(?:\\.[^\\}]*)*)\}/g;

  /** Used to match `RegExp` flags from their coerced string values. */
  var reFlags = /\w*$/;

  /** Used to detect bad signed hexadecimal string values. */
  var reIsBadHex = /^[-+]0x[0-9a-f]+$/i;

  /** Used to detect binary string values. */
  var reIsBinary = /^0b[01]+$/i;

  /** Used to detect host constructors (Safari). */
  var reIsHostCtor = /^\[object .+?Constructor\]$/;

  /** Used to detect octal string values. */
  var reIsOctal = /^0o[0-7]+$/i;

  /** Used to detect unsigned integer values. */
  var reIsUint = /^(?:0|[1-9]\d*)$/;

  /** Used to match Latin Unicode letters (excluding mathematical operators). */
  var reLatin = /[\xc0-\xd6\xd8-\xf6\xf8-\xff\u0100-\u017f]/g;

  /** Used to ensure capturing order of template delimiters. */
  var reNoMatch = /($^)/;

  /** Used to match unescaped characters in compiled string literals. */
  var reUnescapedString = /['\n\r\u2028\u2029\\]/g;

  /** Used to compose unicode character classes. */
  var rsAstralRange = '\\ud800-\\udfff',
      rsComboMarksRange = '\\u0300-\\u036f',
      reComboHalfMarksRange = '\\ufe20-\\ufe2f',
      rsComboSymbolsRange = '\\u20d0-\\u20ff',
      rsComboRange = rsComboMarksRange + reComboHalfMarksRange + rsComboSymbolsRange,
      rsDingbatRange = '\\u2700-\\u27bf',
      rsLowerRange = 'a-z\\xdf-\\xf6\\xf8-\\xff',
      rsMathOpRange = '\\xac\\xb1\\xd7\\xf7',
      rsNonCharRange = '\\x00-\\x2f\\x3a-\\x40\\x5b-\\x60\\x7b-\\xbf',
      rsPunctuationRange = '\\u2000-\\u206f',
      rsSpaceRange = ' \\t\\x0b\\f\\xa0\\ufeff\\n\\r\\u2028\\u2029\\u1680\\u180e\\u2000\\u2001\\u2002\\u2003\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200a\\u202f\\u205f\\u3000',
      rsUpperRange = 'A-Z\\xc0-\\xd6\\xd8-\\xde',
      rsVarRange = '\\ufe0e\\ufe0f',
      rsBreakRange = rsMathOpRange + rsNonCharRange + rsPunctuationRange + rsSpaceRange;

  /** Used to compose unicode capture groups. */
  var rsApos = "['\u2019]",
      rsAstral = '[' + rsAstralRange + ']',
      rsBreak = '[' + rsBreakRange + ']',
      rsCombo = '[' + rsComboRange + ']',
      rsDigits = '\\d+',
      rsDingbat = '[' + rsDingbatRange + ']',
      rsLower = '[' + rsLowerRange + ']',
      rsMisc = '[^' + rsAstralRange + rsBreakRange + rsDigits + rsDingbatRange + rsLowerRange + rsUpperRange + ']',
      rsFitz = '\\ud83c[\\udffb-\\udfff]',
      rsModifier = '(?:' + rsCombo + '|' + rsFitz + ')',
      rsNonAstral = '[^' + rsAstralRange + ']',
      rsRegional = '(?:\\ud83c[\\udde6-\\uddff]){2}',
      rsSurrPair = '[\\ud800-\\udbff][\\udc00-\\udfff]',
      rsUpper = '[' + rsUpperRange + ']',
      rsZWJ = '\\u200d';

  /** Used to compose unicode regexes. */
  var rsMiscLower = '(?:' + rsLower + '|' + rsMisc + ')',
      rsMiscUpper = '(?:' + rsUpper + '|' + rsMisc + ')',
      rsOptContrLower = '(?:' + rsApos + '(?:d|ll|m|re|s|t|ve))?',
      rsOptContrUpper = '(?:' + rsApos + '(?:D|LL|M|RE|S|T|VE))?',
      reOptMod = rsModifier + '?',
      rsOptVar = '[' + rsVarRange + ']?',
      rsOptJoin = '(?:' + rsZWJ + '(?:' + [rsNonAstral, rsRegional, rsSurrPair].join('|') + ')' + rsOptVar + reOptMod + ')*',
      rsOrdLower = '\\d*(?:1st|2nd|3rd|(?![123])\\dth)(?=\\b|[A-Z_])',
      rsOrdUpper = '\\d*(?:1ST|2ND|3RD|(?![123])\\dTH)(?=\\b|[a-z_])',
      rsSeq = rsOptVar + reOptMod + rsOptJoin,
      rsEmoji = '(?:' + [rsDingbat, rsRegional, rsSurrPair].join('|') + ')' + rsSeq,
      rsSymbol = '(?:' + [rsNonAstral + rsCombo + '?', rsCombo, rsRegional, rsSurrPair, rsAstral].join('|') + ')';

  /** Used to match apostrophes. */
  var reApos = RegExp(rsApos, 'g');

  /**
   * Used to match [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks) and
   * [combining diacritical marks for symbols](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks_for_Symbols).
   */
  var reComboMark = RegExp(rsCombo, 'g');

  /** Used to match [string symbols](https://mathiasbynens.be/notes/javascript-unicode). */
  var reUnicode = RegExp(rsFitz + '(?=' + rsFitz + ')|' + rsSymbol + rsSeq, 'g');

  /** Used to match complex or compound words. */
  var reUnicodeWord = RegExp([
    rsUpper + '?' + rsLower + '+' + rsOptContrLower + '(?=' + [rsBreak, rsUpper, '$'].join('|') + ')',
    rsMiscUpper + '+' + rsOptContrUpper + '(?=' + [rsBreak, rsUpper + rsMiscLower, '$'].join('|') + ')',
    rsUpper + '?' + rsMiscLower + '+' + rsOptContrLower,
    rsUpper + '+' + rsOptContrUpper,
    rsOrdUpper,
    rsOrdLower,
    rsDigits,
    rsEmoji
  ].join('|'), 'g');

  /** Used to detect strings with [zero-width joiners or code points from the astral planes](http://eev.ee/blog/2015/09/12/dark-corners-of-unicode/). */
  var reHasUnicode = RegExp('[' + rsZWJ + rsAstralRange  + rsComboRange + rsVarRange + ']');

  /** Used to detect strings that need a more robust regexp to match words. */
  var reHasUnicodeWord = /[a-z][A-Z]|[A-Z]{2}[a-z]|[0-9][a-zA-Z]|[a-zA-Z][0-9]|[^a-zA-Z0-9 ]/;

  /** Used to assign default `context` object properties. */
  var contextProps = [
    'Array', 'Buffer', 'DataView', 'Date', 'Error', 'Float32Array', 'Float64Array',
    'Function', 'Int8Array', 'Int16Array', 'Int32Array', 'Map', 'Math', 'Object',
    'Promise', 'RegExp', 'Set', 'String', 'Symbol', 'TypeError', 'Uint8Array',
    'Uint8ClampedArray', 'Uint16Array', 'Uint32Array', 'WeakMap',
    '_', 'clearTimeout', 'isFinite', 'parseInt', 'setTimeout'
  ];

  /** Used to make template sourceURLs easier to identify. */
  var templateCounter = -1;

  /** Used to identify `toStringTag` values of typed arrays. */
  var typedArrayTags = {};
  typedArrayTags[float32Tag] = typedArrayTags[float64Tag] =
  typedArrayTags[int8Tag] = typedArrayTags[int16Tag] =
  typedArrayTags[int32Tag] = typedArrayTags[uint8Tag] =
  typedArrayTags[uint8ClampedTag] = typedArrayTags[uint16Tag] =
  typedArrayTags[uint32Tag] = true;
  typedArrayTags[argsTag] = typedArrayTags[arrayTag] =
  typedArrayTags[arrayBufferTag] = typedArrayTags[boolTag] =
  typedArrayTags[dataViewTag] = typedArrayTags[dateTag] =
  typedArrayTags[errorTag] = typedArrayTags[funcTag] =
  typedArrayTags[mapTag] = typedArrayTags[numberTag] =
  typedArrayTags[objectTag] = typedArrayTags[regexpTag] =
  typedArrayTags[setTag] = typedArrayTags[stringTag] =
  typedArrayTags[weakMapTag] = false;

  /** Used to identify `toStringTag` values supported by `_.clone`. */
  var cloneableTags = {};
  cloneableTags[argsTag] = cloneableTags[arrayTag] =
  cloneableTags[arrayBufferTag] = cloneableTags[dataViewTag] =
  cloneableTags[boolTag] = cloneableTags[dateTag] =
  cloneableTags[float32Tag] = cloneableTags[float64Tag] =
  cloneableTags[int8Tag] = cloneableTags[int16Tag] =
  cloneableTags[int32Tag] = cloneableTags[mapTag] =
  cloneableTags[numberTag] = cloneableTags[objectTag] =
  cloneableTags[regexpTag] = cloneableTags[setTag] =
  cloneableTags[stringTag] = cloneableTags[symbolTag] =
  cloneableTags[uint8Tag] = cloneableTags[uint8ClampedTag] =
  cloneableTags[uint16Tag] = cloneableTags[uint32Tag] = true;
  cloneableTags[errorTag] = cloneableTags[funcTag] =
  cloneableTags[weakMapTag] = false;

  /** Used to map Latin Unicode letters to basic Latin letters. */
  var deburredLetters = {
    // Latin-1 Supplement block.
    '\xc0': 'A',  '\xc1': 'A', '\xc2': 'A', '\xc3': 'A', '\xc4': 'A', '\xc5': 'A',
    '\xe0': 'a',  '\xe1': 'a', '\xe2': 'a', '\xe3': 'a', '\xe4': 'a', '\xe5': 'a',
    '\xc7': 'C',  '\xe7': 'c',
    '\xd0': 'D',  '\xf0': 'd',
    '\xc8': 'E',  '\xc9': 'E', '\xca': 'E', '\xcb': 'E',
    '\xe8': 'e',  '\xe9': 'e', '\xea': 'e', '\xeb': 'e',
    '\xcc': 'I',  '\xcd': 'I', '\xce': 'I', '\xcf': 'I',
    '\xec': 'i',  '\xed': 'i', '\xee': 'i', '\xef': 'i',
    '\xd1': 'N',  '\xf1': 'n',
    '\xd2': 'O',  '\xd3': 'O', '\xd4': 'O', '\xd5': 'O', '\xd6': 'O', '\xd8': 'O',
    '\xf2': 'o',  '\xf3': 'o', '\xf4': 'o', '\xf5': 'o', '\xf6': 'o', '\xf8': 'o',
    '\xd9': 'U',  '\xda': 'U', '\xdb': 'U', '\xdc': 'U',
    '\xf9': 'u',  '\xfa': 'u', '\xfb': 'u', '\xfc': 'u',
    '\xdd': 'Y',  '\xfd': 'y', '\xff': 'y',
    '\xc6': 'Ae', '\xe6': 'ae',
    '\xde': 'Th', '\xfe': 'th',
    '\xdf': 'ss',
    // Latin Extended-A block.
    '\u0100': 'A',  '\u0102': 'A', '\u0104': 'A',
    '\u0101': 'a',  '\u0103': 'a', '\u0105': 'a',
    '\u0106': 'C',  '\u0108': 'C', '\u010a': 'C', '\u010c': 'C',
    '\u0107': 'c',  '\u0109': 'c', '\u010b': 'c', '\u010d': 'c',
    '\u010e': 'D',  '\u0110': 'D', '\u010f': 'd', '\u0111': 'd',
    '\u0112': 'E',  '\u0114': 'E', '\u0116': 'E', '\u0118': 'E', '\u011a': 'E',
    '\u0113': 'e',  '\u0115': 'e', '\u0117': 'e', '\u0119': 'e', '\u011b': 'e',
    '\u011c': 'G',  '\u011e': 'G', '\u0120': 'G', '\u0122': 'G',
    '\u011d': 'g',  '\u011f': 'g', '\u0121': 'g', '\u0123': 'g',
    '\u0124': 'H',  '\u0126': 'H', '\u0125': 'h', '\u0127': 'h',
    '\u0128': 'I',  '\u012a': 'I', '\u012c': 'I', '\u012e': 'I', '\u0130': 'I',
    '\u0129': 'i',  '\u012b': 'i', '\u012d': 'i', '\u012f': 'i', '\u0131': 'i',
    '\u0134': 'J',  '\u0135': 'j',
    '\u0136': 'K',  '\u0137': 'k', '\u0138': 'k',
    '\u0139': 'L',  '\u013b': 'L', '\u013d': 'L', '\u013f': 'L', '\u0141': 'L',
    '\u013a': 'l',  '\u013c': 'l', '\u013e': 'l', '\u0140': 'l', '\u0142': 'l',
    '\u0143': 'N',  '\u0145': 'N', '\u0147': 'N', '\u014a': 'N',
    '\u0144': 'n',  '\u0146': 'n', '\u0148': 'n', '\u014b': 'n',
    '\u014c': 'O',  '\u014e': 'O', '\u0150': 'O',
    '\u014d': 'o',  '\u014f': 'o', '\u0151': 'o',
    '\u0154': 'R',  '\u0156': 'R', '\u0158': 'R',
    '\u0155': 'r',  '\u0157': 'r', '\u0159': 'r',
    '\u015a': 'S',  '\u015c': 'S', '\u015e': 'S', '\u0160': 'S',
    '\u015b': 's',  '\u015d': 's', '\u015f': 's', '\u0161': 's',
    '\u0162': 'T',  '\u0164': 'T', '\u0166': 'T',
    '\u0163': 't',  '\u0165': 't', '\u0167': 't',
    '\u0168': 'U',  '\u016a': 'U', '\u016c': 'U', '\u016e': 'U', '\u0170': 'U', '\u0172': 'U',
    '\u0169': 'u',  '\u016b': 'u', '\u016d': 'u', '\u016f': 'u', '\u0171': 'u', '\u0173': 'u',
    '\u0174': 'W',  '\u0175': 'w',
    '\u0176': 'Y',  '\u0177': 'y', '\u0178': 'Y',
    '\u0179': 'Z',  '\u017b': 'Z', '\u017d': 'Z',
    '\u017a': 'z',  '\u017c': 'z', '\u017e': 'z',
    '\u0132': 'IJ', '\u0133': 'ij',
    '\u0152': 'Oe', '\u0153': 'oe',
    '\u0149': "'n", '\u017f': 's'
  };

  /** Used to map characters to HTML entities. */
  var htmlEscapes = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#39;'
  };

  /** Used to map HTML entities to characters. */
  var htmlUnescapes = {
    '&amp;': '&',
    '&lt;': '<',
    '&gt;': '>',
    '&quot;': '"',
    '&#39;': "'"
  };

  /** Used to escape characters for inclusion in compiled string literals. */
  var stringEscapes = {
    '\\': '\\',
    "'": "'",
    '\n': 'n',
    '\r': 'r',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  /** Built-in method references without a dependency on `root`. */
  var freeParseFloat = parseFloat,
      freeParseInt = parseInt;

  /** Detect free variable `global` from Node.js. */
  var freeGlobal = typeof global == 'object' && global && global.Object === Object && global;

  /** Detect free variable `self`. */
  var freeSelf = typeof self == 'object' && self && self.Object === Object && self;

  /** Used as a reference to the global object. */
  var root = freeGlobal || freeSelf || Function('return this')();

  /** Detect free variable `exports`. */
  var freeExports =  true && exports && !exports.nodeType && exports;

  /** Detect free variable `module`. */
  var freeModule = freeExports && typeof module == 'object' && module && !module.nodeType && module;

  /** Detect the popular CommonJS extension `module.exports`. */
  var moduleExports = freeModule && freeModule.exports === freeExports;

  /** Detect free variable `process` from Node.js. */
  var freeProcess = moduleExports && freeGlobal.process;

  /** Used to access faster Node.js helpers. */
  var nodeUtil = (function() {
    try {
      // Use `util.types` for Node.js 10+.
      var types = freeModule && freeModule.require && freeModule.require('util').types;

      if (types) {
        return types;
      }

      // Legacy `process.binding('util')` for Node.js < 10.
      return freeProcess && freeProcess.binding && freeProcess.binding('util');
    } catch (e) {}
  }());

  /* Node.js helper references. */
  var nodeIsArrayBuffer = nodeUtil && nodeUtil.isArrayBuffer,
      nodeIsDate = nodeUtil && nodeUtil.isDate,
      nodeIsMap = nodeUtil && nodeUtil.isMap,
      nodeIsRegExp = nodeUtil && nodeUtil.isRegExp,
      nodeIsSet = nodeUtil && nodeUtil.isSet,
      nodeIsTypedArray = nodeUtil && nodeUtil.isTypedArray;

  /*--------------------------------------------------------------------------*/

  /**
   * A faster alternative to `Function#apply`, this function invokes `func`
   * with the `this` binding of `thisArg` and the arguments of `args`.
   *
   * @private
   * @param {Function} func The function to invoke.
   * @param {*} thisArg The `this` binding of `func`.
   * @param {Array} args The arguments to invoke `func` with.
   * @returns {*} Returns the result of `func`.
   */
  function apply(func, thisArg, args) {
    switch (args.length) {
      case 0: return func.call(thisArg);
      case 1: return func.call(thisArg, args[0]);
      case 2: return func.call(thisArg, args[0], args[1]);
      case 3: return func.call(thisArg, args[0], args[1], args[2]);
    }
    return func.apply(thisArg, args);
  }

  /**
   * A specialized version of `baseAggregator` for arrays.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} setter The function to set `accumulator` values.
   * @param {Function} iteratee The iteratee to transform keys.
   * @param {Object} accumulator The initial aggregated object.
   * @returns {Function} Returns `accumulator`.
   */
  function arrayAggregator(array, setter, iteratee, accumulator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      var value = array[index];
      setter(accumulator, value, iteratee(value), array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.forEach` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEach(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (iteratee(array[index], index, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.forEachRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns `array`.
   */
  function arrayEachRight(array, iteratee) {
    var length = array == null ? 0 : array.length;

    while (length--) {
      if (iteratee(array[length], length, array) === false) {
        break;
      }
    }
    return array;
  }

  /**
   * A specialized version of `_.every` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if all elements pass the predicate check,
   *  else `false`.
   */
  function arrayEvery(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (!predicate(array[index], index, array)) {
        return false;
      }
    }
    return true;
  }

  /**
   * A specialized version of `_.filter` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {Array} Returns the new filtered array.
   */
  function arrayFilter(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (predicate(value, index, array)) {
        result[resIndex++] = value;
      }
    }
    return result;
  }

  /**
   * A specialized version of `_.includes` for arrays without support for
   * specifying an index to search from.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludes(array, value) {
    var length = array == null ? 0 : array.length;
    return !!length && baseIndexOf(array, value, 0) > -1;
  }

  /**
   * This function is like `arrayIncludes` except that it accepts a comparator.
   *
   * @private
   * @param {Array} [array] The array to inspect.
   * @param {*} target The value to search for.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {boolean} Returns `true` if `target` is found, else `false`.
   */
  function arrayIncludesWith(array, value, comparator) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (comparator(value, array[index])) {
        return true;
      }
    }
    return false;
  }

  /**
   * A specialized version of `_.map` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the new mapped array.
   */
  function arrayMap(array, iteratee) {
    var index = -1,
        length = array == null ? 0 : array.length,
        result = Array(length);

    while (++index < length) {
      result[index] = iteratee(array[index], index, array);
    }
    return result;
  }

  /**
   * Appends the elements of `values` to `array`.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {Array} values The values to append.
   * @returns {Array} Returns `array`.
   */
  function arrayPush(array, values) {
    var index = -1,
        length = values.length,
        offset = array.length;

    while (++index < length) {
      array[offset + index] = values[index];
    }
    return array;
  }

  /**
   * A specialized version of `_.reduce` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the first element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduce(array, iteratee, accumulator, initAccum) {
    var index = -1,
        length = array == null ? 0 : array.length;

    if (initAccum && length) {
      accumulator = array[++index];
    }
    while (++index < length) {
      accumulator = iteratee(accumulator, array[index], index, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.reduceRight` for arrays without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} [accumulator] The initial value.
   * @param {boolean} [initAccum] Specify using the last element of `array` as
   *  the initial value.
   * @returns {*} Returns the accumulated value.
   */
  function arrayReduceRight(array, iteratee, accumulator, initAccum) {
    var length = array == null ? 0 : array.length;
    if (initAccum && length) {
      accumulator = array[--length];
    }
    while (length--) {
      accumulator = iteratee(accumulator, array[length], length, array);
    }
    return accumulator;
  }

  /**
   * A specialized version of `_.some` for arrays without support for iteratee
   * shorthands.
   *
   * @private
   * @param {Array} [array] The array to iterate over.
   * @param {Function} predicate The function invoked per iteration.
   * @returns {boolean} Returns `true` if any element passes the predicate check,
   *  else `false`.
   */
  function arraySome(array, predicate) {
    var index = -1,
        length = array == null ? 0 : array.length;

    while (++index < length) {
      if (predicate(array[index], index, array)) {
        return true;
      }
    }
    return false;
  }

  /**
   * Gets the size of an ASCII `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  var asciiSize = baseProperty('length');

  /**
   * Converts an ASCII `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function asciiToArray(string) {
    return string.split('');
  }

  /**
   * Splits an ASCII `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function asciiWords(string) {
    return string.match(reAsciiWord) || [];
  }

  /**
   * The base implementation of methods like `_.findKey` and `_.findLastKey`,
   * without support for iteratee shorthands, which iterates over `collection`
   * using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the found element or its key, else `undefined`.
   */
  function baseFindKey(collection, predicate, eachFunc) {
    var result;
    eachFunc(collection, function(value, key, collection) {
      if (predicate(value, key, collection)) {
        result = key;
        return false;
      }
    });
    return result;
  }

  /**
   * The base implementation of `_.findIndex` and `_.findLastIndex` without
   * support for iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {Function} predicate The function invoked per iteration.
   * @param {number} fromIndex The index to search from.
   * @param {boolean} [fromRight] Specify iterating from right to left.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseFindIndex(array, predicate, fromIndex, fromRight) {
    var length = array.length,
        index = fromIndex + (fromRight ? 1 : -1);

    while ((fromRight ? index-- : ++index < length)) {
      if (predicate(array[index], index, array)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.indexOf` without `fromIndex` bounds checks.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOf(array, value, fromIndex) {
    return value === value
      ? strictIndexOf(array, value, fromIndex)
      : baseFindIndex(array, baseIsNaN, fromIndex);
  }

  /**
   * This function is like `baseIndexOf` except that it accepts a comparator.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @param {Function} comparator The comparator invoked per element.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function baseIndexOfWith(array, value, fromIndex, comparator) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (comparator(array[index], value)) {
        return index;
      }
    }
    return -1;
  }

  /**
   * The base implementation of `_.isNaN` without support for number objects.
   *
   * @private
   * @param {*} value The value to check.
   * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
   */
  function baseIsNaN(value) {
    return value !== value;
  }

  /**
   * The base implementation of `_.mean` and `_.meanBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the mean.
   */
  function baseMean(array, iteratee) {
    var length = array == null ? 0 : array.length;
    return length ? (baseSum(array, iteratee) / length) : NAN;
  }

  /**
   * The base implementation of `_.property` without support for deep paths.
   *
   * @private
   * @param {string} key The key of the property to get.
   * @returns {Function} Returns the new accessor function.
   */
  function baseProperty(key) {
    return function(object) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.propertyOf` without support for deep paths.
   *
   * @private
   * @param {Object} object The object to query.
   * @returns {Function} Returns the new accessor function.
   */
  function basePropertyOf(object) {
    return function(key) {
      return object == null ? undefined : object[key];
    };
  }

  /**
   * The base implementation of `_.reduce` and `_.reduceRight`, without support
   * for iteratee shorthands, which iterates over `collection` using `eachFunc`.
   *
   * @private
   * @param {Array|Object} collection The collection to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @param {*} accumulator The initial value.
   * @param {boolean} initAccum Specify using the first or last element of
   *  `collection` as the initial value.
   * @param {Function} eachFunc The function to iterate over `collection`.
   * @returns {*} Returns the accumulated value.
   */
  function baseReduce(collection, iteratee, accumulator, initAccum, eachFunc) {
    eachFunc(collection, function(value, index, collection) {
      accumulator = initAccum
        ? (initAccum = false, value)
        : iteratee(accumulator, value, index, collection);
    });
    return accumulator;
  }

  /**
   * The base implementation of `_.sortBy` which uses `comparer` to define the
   * sort order of `array` and replaces criteria objects with their corresponding
   * values.
   *
   * @private
   * @param {Array} array The array to sort.
   * @param {Function} comparer The function to define sort order.
   * @returns {Array} Returns `array`.
   */
  function baseSortBy(array, comparer) {
    var length = array.length;

    array.sort(comparer);
    while (length--) {
      array[length] = array[length].value;
    }
    return array;
  }

  /**
   * The base implementation of `_.sum` and `_.sumBy` without support for
   * iteratee shorthands.
   *
   * @private
   * @param {Array} array The array to iterate over.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {number} Returns the sum.
   */
  function baseSum(array, iteratee) {
    var result,
        index = -1,
        length = array.length;

    while (++index < length) {
      var current = iteratee(array[index]);
      if (current !== undefined) {
        result = result === undefined ? current : (result + current);
      }
    }
    return result;
  }

  /**
   * The base implementation of `_.times` without support for iteratee shorthands
   * or max array length checks.
   *
   * @private
   * @param {number} n The number of times to invoke `iteratee`.
   * @param {Function} iteratee The function invoked per iteration.
   * @returns {Array} Returns the array of results.
   */
  function baseTimes(n, iteratee) {
    var index = -1,
        result = Array(n);

    while (++index < n) {
      result[index] = iteratee(index);
    }
    return result;
  }

  /**
   * The base implementation of `_.toPairs` and `_.toPairsIn` which creates an array
   * of key-value pairs for `object` corresponding to the property names of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the key-value pairs.
   */
  function baseToPairs(object, props) {
    return arrayMap(props, function(key) {
      return [key, object[key]];
    });
  }

  /**
   * The base implementation of `_.unary` without support for storing metadata.
   *
   * @private
   * @param {Function} func The function to cap arguments for.
   * @returns {Function} Returns the new capped function.
   */
  function baseUnary(func) {
    return function(value) {
      return func(value);
    };
  }

  /**
   * The base implementation of `_.values` and `_.valuesIn` which creates an
   * array of `object` property values corresponding to the property names
   * of `props`.
   *
   * @private
   * @param {Object} object The object to query.
   * @param {Array} props The property names to get values for.
   * @returns {Object} Returns the array of property values.
   */
  function baseValues(object, props) {
    return arrayMap(props, function(key) {
      return object[key];
    });
  }

  /**
   * Checks if a `cache` value for `key` exists.
   *
   * @private
   * @param {Object} cache The cache to query.
   * @param {string} key The key of the entry to check.
   * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
   */
  function cacheHas(cache, key) {
    return cache.has(key);
  }

  /**
   * Used by `_.trim` and `_.trimStart` to get the index of the first string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the first unmatched string symbol.
   */
  function charsStartIndex(strSymbols, chrSymbols) {
    var index = -1,
        length = strSymbols.length;

    while (++index < length && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Used by `_.trim` and `_.trimEnd` to get the index of the last string symbol
   * that is not found in the character symbols.
   *
   * @private
   * @param {Array} strSymbols The string symbols to inspect.
   * @param {Array} chrSymbols The character symbols to find.
   * @returns {number} Returns the index of the last unmatched string symbol.
   */
  function charsEndIndex(strSymbols, chrSymbols) {
    var index = strSymbols.length;

    while (index-- && baseIndexOf(chrSymbols, strSymbols[index], 0) > -1) {}
    return index;
  }

  /**
   * Gets the number of `placeholder` occurrences in `array`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} placeholder The placeholder to search for.
   * @returns {number} Returns the placeholder count.
   */
  function countHolders(array, placeholder) {
    var length = array.length,
        result = 0;

    while (length--) {
      if (array[length] === placeholder) {
        ++result;
      }
    }
    return result;
  }

  /**
   * Used by `_.deburr` to convert Latin-1 Supplement and Latin Extended-A
   * letters to basic Latin letters.
   *
   * @private
   * @param {string} letter The matched letter to deburr.
   * @returns {string} Returns the deburred letter.
   */
  var deburrLetter = basePropertyOf(deburredLetters);

  /**
   * Used by `_.escape` to convert characters to HTML entities.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  var escapeHtmlChar = basePropertyOf(htmlEscapes);

  /**
   * Used by `_.template` to escape characters for inclusion in compiled string literals.
   *
   * @private
   * @param {string} chr The matched character to escape.
   * @returns {string} Returns the escaped character.
   */
  function escapeStringChar(chr) {
    return '\\' + stringEscapes[chr];
  }

  /**
   * Gets the value at `key` of `object`.
   *
   * @private
   * @param {Object} [object] The object to query.
   * @param {string} key The key of the property to get.
   * @returns {*} Returns the property value.
   */
  function getValue(object, key) {
    return object == null ? undefined : object[key];
  }

  /**
   * Checks if `string` contains Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a symbol is found, else `false`.
   */
  function hasUnicode(string) {
    return reHasUnicode.test(string);
  }

  /**
   * Checks if `string` contains a word composed of Unicode symbols.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {boolean} Returns `true` if a word is found, else `false`.
   */
  function hasUnicodeWord(string) {
    return reHasUnicodeWord.test(string);
  }

  /**
   * Converts `iterator` to an array.
   *
   * @private
   * @param {Object} iterator The iterator to convert.
   * @returns {Array} Returns the converted array.
   */
  function iteratorToArray(iterator) {
    var data,
        result = [];

    while (!(data = iterator.next()).done) {
      result.push(data.value);
    }
    return result;
  }

  /**
   * Converts `map` to its key-value pairs.
   *
   * @private
   * @param {Object} map The map to convert.
   * @returns {Array} Returns the key-value pairs.
   */
  function mapToArray(map) {
    var index = -1,
        result = Array(map.size);

    map.forEach(function(value, key) {
      result[++index] = [key, value];
    });
    return result;
  }

  /**
   * Creates a unary function that invokes `func` with its argument transformed.
   *
   * @private
   * @param {Function} func The function to wrap.
   * @param {Function} transform The argument transform.
   * @returns {Function} Returns the new function.
   */
  function overArg(func, transform) {
    return function(arg) {
      return func(transform(arg));
    };
  }

  /**
   * Replaces all `placeholder` elements in `array` with an internal placeholder
   * and returns an array of their indexes.
   *
   * @private
   * @param {Array} array The array to modify.
   * @param {*} placeholder The placeholder to replace.
   * @returns {Array} Returns the new array of placeholder indexes.
   */
  function replaceHolders(array, placeholder) {
    var index = -1,
        length = array.length,
        resIndex = 0,
        result = [];

    while (++index < length) {
      var value = array[index];
      if (value === placeholder || value === PLACEHOLDER) {
        array[index] = PLACEHOLDER;
        result[resIndex++] = index;
      }
    }
    return result;
  }

  /**
   * Converts `set` to an array of its values.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the values.
   */
  function setToArray(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = value;
    });
    return result;
  }

  /**
   * Converts `set` to its value-value pairs.
   *
   * @private
   * @param {Object} set The set to convert.
   * @returns {Array} Returns the value-value pairs.
   */
  function setToPairs(set) {
    var index = -1,
        result = Array(set.size);

    set.forEach(function(value) {
      result[++index] = [value, value];
    });
    return result;
  }

  /**
   * A specialized version of `_.indexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictIndexOf(array, value, fromIndex) {
    var index = fromIndex - 1,
        length = array.length;

    while (++index < length) {
      if (array[index] === value) {
        return index;
      }
    }
    return -1;
  }

  /**
   * A specialized version of `_.lastIndexOf` which performs strict equality
   * comparisons of values, i.e. `===`.
   *
   * @private
   * @param {Array} array The array to inspect.
   * @param {*} value The value to search for.
   * @param {number} fromIndex The index to search from.
   * @returns {number} Returns the index of the matched value, else `-1`.
   */
  function strictLastIndexOf(array, value, fromIndex) {
    var index = fromIndex + 1;
    while (index--) {
      if (array[index] === value) {
        return index;
      }
    }
    return index;
  }

  /**
   * Gets the number of symbols in `string`.
   *
   * @private
   * @param {string} string The string to inspect.
   * @returns {number} Returns the string size.
   */
  function stringSize(string) {
    return hasUnicode(string)
      ? unicodeSize(string)
      : asciiSize(string);
  }

  /**
   * Converts `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function stringToArray(string) {
    return hasUnicode(string)
      ? unicodeToArray(string)
      : asciiToArray(string);
  }

  /**
   * Used by `_.unescape` to convert HTML entities to characters.
   *
   * @private
   * @param {string} chr The matched character to unescape.
   * @returns {string} Returns the unescaped character.
   */
  var unescapeHtmlChar = basePropertyOf(htmlUnescapes);

  /**
   * Gets the size of a Unicode `string`.
   *
   * @private
   * @param {string} string The string inspect.
   * @returns {number} Returns the string size.
   */
  function unicodeSize(string) {
    var result = reUnicode.lastIndex = 0;
    while (reUnicode.test(string)) {
      ++result;
    }
    return result;
  }

  /**
   * Converts a Unicode `string` to an array.
   *
   * @private
   * @param {string} string The string to convert.
   * @returns {Array} Returns the converted array.
   */
  function unicodeToArray(string) {
    return string.match(reUnicode) || [];
  }

  /**
   * Splits a Unicode `string` into an array of its words.
   *
   * @private
   * @param {string} The string to inspect.
   * @returns {Array} Returns the words of `string`.
   */
  function unicodeWords(string) {
    return string.match(reUnicodeWord) || [];
  }

  /*--------------------------------------------------------------------------*/

  /**
   * Create a new pristine `lodash` function using the `context` object.
   *
   * @static
   * @memberOf _
   * @since 1.1.0
   * @category Util
   * @param {Object} [context=root] The context object.
   * @returns {Function} Returns a new `lodash` function.
   * @example
   *
   * _.mixin({ 'foo': _.constant('foo') });
   *
   * var lodash = _.runInContext();
   * lodash.mixin({ 'bar': lodash.constant('bar') });
   *
   * _.isFunction(_.foo);
   * // => true
   * _.isFunction(_.bar);
   * // => false
   *
   * lodash.isFunction(lodash.foo);
   * // => false
   * lodash.isFunction(lodash.bar);
   * // => true
   *
   * // Create a suped-up `defer` in Node.js.
   * var defer = _.runInContext({ 'setTimeout': setImmediate }).defer;
   */
  var runInContext = (function runInContext(context) {
    context = context == null ? root : _.defaults(root.Object(), context, _.pick(root, contextProps));

    /** Built-in constructor references. */
    var Array = context.Array,
        Date = context.Date,
        Error = context.Error,
        Function = context.Function,
        Math = context.Math,
        Object = context.Object,
        RegExp = context.RegExp,
        String = context.String,
        TypeError = context.TypeError;

    /** Used for built-in method references. */
    var arrayProto = Array.prototype,
        funcProto = Function.prototype,
        objectProto = Object.prototype;

    /** Used to detect overreaching core-js shims. */
    var coreJsData = context['__core-js_shared__'];

    /** Used to resolve the decompiled source of functions. */
    var funcToString = funcProto.toString;

    /** Used to check objects for own properties. */
    var hasOwnProperty = objectProto.hasOwnProperty;

    /** Used to generate unique IDs. */
    var idCounter = 0;

    /** Used to detect methods masquerading as native. */
    var maskSrcKey = (function() {
      var uid = /[^.]+$/.exec(coreJsData && coreJsData.keys && coreJsData.keys.IE_PROTO || '');
      return uid ? ('Symbol(src)_1.' + uid) : '';
    }());

    /**
     * Used to resolve the
     * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)
     * of values.
     */
    var nativeObjectToString = objectProto.toString;

    /** Used to infer the `Object` constructor. */
    var objectCtorString = funcToString.call(Object);

    /** Used to restore the original `_` reference in `_.noConflict`. */
    var oldDash = root._;

    /** Used to detect if a method is native. */
    var reIsNative = RegExp('^' +
      funcToString.call(hasOwnProperty).replace(reRegExpChar, '\\$&')
      .replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, '$1.*?') + '$'
    );

    /** Built-in value references. */
    var Buffer = moduleExports ? context.Buffer : undefined,
        Symbol = context.Symbol,
        Uint8Array = context.Uint8Array,
        allocUnsafe = Buffer ? Buffer.allocUnsafe : undefined,
        getPrototype = overArg(Object.getPrototypeOf, Object),
        objectCreate = Object.create,
        propertyIsEnumerable = objectProto.propertyIsEnumerable,
        splice = arrayProto.splice,
        spreadableSymbol = Symbol ? Symbol.isConcatSpreadable : undefined,
        symIterator = Symbol ? Symbol.iterator : undefined,
        symToStringTag = Symbol ? Symbol.toStringTag : undefined;

    var defineProperty = (function() {
      try {
        var func = getNative(Object, 'defineProperty');
        func({}, '', {});
        return func;
      } catch (e) {}
    }());

    /** Mocked built-ins. */
    var ctxClearTimeout = context.clearTimeout !== root.clearTimeout && context.clearTimeout,
        ctxNow = Date && Date.now !== root.Date.now && Date.now,
        ctxSetTimeout = context.setTimeout !== root.setTimeout && context.setTimeout;

    /* Built-in method references for those with the same name as other `lodash` methods. */
    var nativeCeil = Math.ceil,
        nativeFloor = Math.floor,
        nativeGetSymbols = Object.getOwnPropertySymbols,
        nativeIsBuffer = Buffer ? Buffer.isBuffer : undefined,
        nativeIsFinite = context.isFinite,
        nativeJoin = arrayProto.join,
        nativeKeys = overArg(Object.keys, Object),
        nativeMax = Math.max,
        nativeMin = Math.min,
        nativeNow = Date.now,
        nativeParseInt = context.parseInt,
        nativeRandom = Math.random,
        nativeReverse = arrayProto.reverse;

    /* Built-in method references that are verified to be native. */
    var DataView = getNative(context, 'DataView'),
        Map = getNative(context, 'Map'),
        Promise = getNative(context, 'Promise'),
        Set = getNative(context, 'Set'),
        WeakMap = getNative(context, 'WeakMap'),
        nativeCreate = getNative(Object, 'create');

    /** Used to store function metadata. */
    var metaMap = WeakMap && new WeakMap;

    /** Used to lookup unminified function names. */
    var realNames = {};

    /** Used to detect maps, sets, and weakmaps. */
    var dataViewCtorString = toSource(DataView),
        mapCtorString = toSource(Map),
        promiseCtorString = toSource(Promise),
        setCtorString = toSource(Set),
        weakMapCtorString = toSource(WeakMap);

    /** Used to convert symbols to primitives and strings. */
    var symbolProto = Symbol ? Symbol.prototype : undefined,
        symbolValueOf = symbolProto ? symbolProto.valueOf : undefined,
        symbolToString = symbolProto ? symbolProto.toString : undefined;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` object which wraps `value` to enable implicit method
     * chain sequences. Methods that operate on and return arrays, collections,
     * and functions can be chained together. Methods that retrieve a single value
     * or may return a primitive value will automatically end the chain sequence
     * and return the unwrapped value. Otherwise, the value must be unwrapped
     * with `_#value`.
     *
     * Explicit chain sequences, which must be unwrapped with `_#value`, may be
     * enabled using `_.chain`.
     *
     * The execution of chained methods is lazy, that is, it's deferred until
     * `_#value` is implicitly or explicitly called.
     *
     * Lazy evaluation allows several methods to support shortcut fusion.
     * Shortcut fusion is an optimization to merge iteratee calls; this avoids
     * the creation of intermediate arrays and can greatly reduce the number of
     * iteratee executions. Sections of a chain sequence qualify for shortcut
     * fusion if the section is applied to an array and iteratees accept only
     * one argument. The heuristic for whether a section qualifies for shortcut
     * fusion is subject to change.
     *
     * Chaining is supported in custom builds as long as the `_#value` method is
     * directly or indirectly included in the build.
     *
     * In addition to lodash methods, wrappers have `Array` and `String` methods.
     *
     * The wrapper `Array` methods are:
     * `concat`, `join`, `pop`, `push`, `shift`, `sort`, `splice`, and `unshift`
     *
     * The wrapper `String` methods are:
     * `replace` and `split`
     *
     * The wrapper methods that support shortcut fusion are:
     * `at`, `compact`, `drop`, `dropRight`, `dropWhile`, `filter`, `find`,
     * `findLast`, `head`, `initial`, `last`, `map`, `reject`, `reverse`, `slice`,
     * `tail`, `take`, `takeRight`, `takeRightWhile`, `takeWhile`, and `toArray`
     *
     * The chainable wrapper methods are:
     * `after`, `ary`, `assign`, `assignIn`, `assignInWith`, `assignWith`, `at`,
     * `before`, `bind`, `bindAll`, `bindKey`, `castArray`, `chain`, `chunk`,
     * `commit`, `compact`, `concat`, `conforms`, `constant`, `countBy`, `create`,
     * `curry`, `debounce`, `defaults`, `defaultsDeep`, `defer`, `delay`,
     * `difference`, `differenceBy`, `differenceWith`, `drop`, `dropRight`,
     * `dropRightWhile`, `dropWhile`, `extend`, `extendWith`, `fill`, `filter`,
     * `flatMap`, `flatMapDeep`, `flatMapDepth`, `flatten`, `flattenDeep`,
     * `flattenDepth`, `flip`, `flow`, `flowRight`, `fromPairs`, `functions`,
     * `functionsIn`, `groupBy`, `initial`, `intersection`, `intersectionBy`,
     * `intersectionWith`, `invert`, `invertBy`, `invokeMap`, `iteratee`, `keyBy`,
     * `keys`, `keysIn`, `map`, `mapKeys`, `mapValues`, `matches`, `matchesProperty`,
     * `memoize`, `merge`, `mergeWith`, `method`, `methodOf`, `mixin`, `negate`,
     * `nthArg`, `omit`, `omitBy`, `once`, `orderBy`, `over`, `overArgs`,
     * `overEvery`, `overSome`, `partial`, `partialRight`, `partition`, `pick`,
     * `pickBy`, `plant`, `property`, `propertyOf`, `pull`, `pullAll`, `pullAllBy`,
     * `pullAllWith`, `pullAt`, `push`, `range`, `rangeRight`, `rearg`, `reject`,
     * `remove`, `rest`, `reverse`, `sampleSize`, `set`, `setWith`, `shuffle`,
     * `slice`, `sort`, `sortBy`, `splice`, `spread`, `tail`, `take`, `takeRight`,
     * `takeRightWhile`, `takeWhile`, `tap`, `throttle`, `thru`, `toArray`,
     * `toPairs`, `toPairsIn`, `toPath`, `toPlainObject`, `transform`, `unary`,
     * `union`, `unionBy`, `unionWith`, `uniq`, `uniqBy`, `uniqWith`, `unset`,
     * `unshift`, `unzip`, `unzipWith`, `update`, `updateWith`, `values`,
     * `valuesIn`, `without`, `wrap`, `xor`, `xorBy`, `xorWith`, `zip`,
     * `zipObject`, `zipObjectDeep`, and `zipWith`
     *
     * The wrapper methods that are **not** chainable by default are:
     * `add`, `attempt`, `camelCase`, `capitalize`, `ceil`, `clamp`, `clone`,
     * `cloneDeep`, `cloneDeepWith`, `cloneWith`, `conformsTo`, `deburr`,
     * `defaultTo`, `divide`, `each`, `eachRight`, `endsWith`, `eq`, `escape`,
     * `escapeRegExp`, `every`, `find`, `findIndex`, `findKey`, `findLast`,
     * `findLastIndex`, `findLastKey`, `first`, `floor`, `forEach`, `forEachRight`,
     * `forIn`, `forInRight`, `forOwn`, `forOwnRight`, `get`, `gt`, `gte`, `has`,
     * `hasIn`, `head`, `identity`, `includes`, `indexOf`, `inRange`, `invoke`,
     * `isArguments`, `isArray`, `isArrayBuffer`, `isArrayLike`, `isArrayLikeObject`,
     * `isBoolean`, `isBuffer`, `isDate`, `isElement`, `isEmpty`, `isEqual`,
     * `isEqualWith`, `isError`, `isFinite`, `isFunction`, `isInteger`, `isLength`,
     * `isMap`, `isMatch`, `isMatchWith`, `isNaN`, `isNative`, `isNil`, `isNull`,
     * `isNumber`, `isObject`, `isObjectLike`, `isPlainObject`, `isRegExp`,
     * `isSafeInteger`, `isSet`, `isString`, `isUndefined`, `isTypedArray`,
     * `isWeakMap`, `isWeakSet`, `join`, `kebabCase`, `last`, `lastIndexOf`,
     * `lowerCase`, `lowerFirst`, `lt`, `lte`, `max`, `maxBy`, `mean`, `meanBy`,
     * `min`, `minBy`, `multiply`, `noConflict`, `noop`, `now`, `nth`, `pad`,
     * `padEnd`, `padStart`, `parseInt`, `pop`, `random`, `reduce`, `reduceRight`,
     * `repeat`, `result`, `round`, `runInContext`, `sample`, `shift`, `size`,
     * `snakeCase`, `some`, `sortedIndex`, `sortedIndexBy`, `sortedLastIndex`,
     * `sortedLastIndexBy`, `startCase`, `startsWith`, `stubArray`, `stubFalse`,
     * `stubObject`, `stubString`, `stubTrue`, `subtract`, `sum`, `sumBy`,
     * `template`, `times`, `toFinite`, `toInteger`, `toJSON`, `toLength`,
     * `toLower`, `toNumber`, `toSafeInteger`, `toString`, `toUpper`, `trim`,
     * `trimEnd`, `trimStart`, `truncate`, `unescape`, `uniqueId`, `upperCase`,
     * `upperFirst`, `value`, and `words`
     *
     * @name _
     * @constructor
     * @category Seq
     * @param {*} value The value to wrap in a `lodash` instance.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2, 3]);
     *
     * // Returns an unwrapped value.
     * wrapped.reduce(_.add);
     * // => 6
     *
     * // Returns a wrapped value.
     * var squares = wrapped.map(square);
     *
     * _.isArray(squares);
     * // => false
     *
     * _.isArray(squares.value());
     * // => true
     */
    function lodash(value) {
      if (isObjectLike(value) && !isArray(value) && !(value instanceof LazyWrapper)) {
        if (value instanceof LodashWrapper) {
          return value;
        }
        if (hasOwnProperty.call(value, '__wrapped__')) {
          return wrapperClone(value);
        }
      }
      return new LodashWrapper(value);
    }

    /**
     * The base implementation of `_.create` without support for assigning
     * properties to the created object.
     *
     * @private
     * @param {Object} proto The object to inherit from.
     * @returns {Object} Returns the new object.
     */
    var baseCreate = (function() {
      function object() {}
      return function(proto) {
        if (!isObject(proto)) {
          return {};
        }
        if (objectCreate) {
          return objectCreate(proto);
        }
        object.prototype = proto;
        var result = new object;
        object.prototype = undefined;
        return result;
      };
    }());

    /**
     * The function whose prototype chain sequence wrappers inherit from.
     *
     * @private
     */
    function baseLodash() {
      // No operation performed.
    }

    /**
     * The base constructor for creating `lodash` wrapper objects.
     *
     * @private
     * @param {*} value The value to wrap.
     * @param {boolean} [chainAll] Enable explicit method chain sequences.
     */
    function LodashWrapper(value, chainAll) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__chain__ = !!chainAll;
      this.__index__ = 0;
      this.__values__ = undefined;
    }

    /**
     * By default, the template delimiters used by lodash are like those in
     * embedded Ruby (ERB) as well as ES2015 template strings. Change the
     * following template settings to use alternative delimiters.
     *
     * @static
     * @memberOf _
     * @type {Object}
     */
    lodash.templateSettings = {

      /**
       * Used to detect `data` property values to be HTML-escaped.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'escape': reEscape,

      /**
       * Used to detect code to be evaluated.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'evaluate': reEvaluate,

      /**
       * Used to detect `data` property values to inject.
       *
       * @memberOf _.templateSettings
       * @type {RegExp}
       */
      'interpolate': reInterpolate,

      /**
       * Used to reference the data object in the template text.
       *
       * @memberOf _.templateSettings
       * @type {string}
       */
      'variable': '',

      /**
       * Used to import variables into the compiled template.
       *
       * @memberOf _.templateSettings
       * @type {Object}
       */
      'imports': {

        /**
         * A reference to the `lodash` function.
         *
         * @memberOf _.templateSettings.imports
         * @type {Function}
         */
        '_': lodash
      }
    };

    // Ensure wrappers are instances of `baseLodash`.
    lodash.prototype = baseLodash.prototype;
    lodash.prototype.constructor = lodash;

    LodashWrapper.prototype = baseCreate(baseLodash.prototype);
    LodashWrapper.prototype.constructor = LodashWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a lazy wrapper object which wraps `value` to enable lazy evaluation.
     *
     * @private
     * @constructor
     * @param {*} value The value to wrap.
     */
    function LazyWrapper(value) {
      this.__wrapped__ = value;
      this.__actions__ = [];
      this.__dir__ = 1;
      this.__filtered__ = false;
      this.__iteratees__ = [];
      this.__takeCount__ = MAX_ARRAY_LENGTH;
      this.__views__ = [];
    }

    /**
     * Creates a clone of the lazy wrapper object.
     *
     * @private
     * @name clone
     * @memberOf LazyWrapper
     * @returns {Object} Returns the cloned `LazyWrapper` object.
     */
    function lazyClone() {
      var result = new LazyWrapper(this.__wrapped__);
      result.__actions__ = copyArray(this.__actions__);
      result.__dir__ = this.__dir__;
      result.__filtered__ = this.__filtered__;
      result.__iteratees__ = copyArray(this.__iteratees__);
      result.__takeCount__ = this.__takeCount__;
      result.__views__ = copyArray(this.__views__);
      return result;
    }

    /**
     * Reverses the direction of lazy iteration.
     *
     * @private
     * @name reverse
     * @memberOf LazyWrapper
     * @returns {Object} Returns the new reversed `LazyWrapper` object.
     */
    function lazyReverse() {
      if (this.__filtered__) {
        var result = new LazyWrapper(this);
        result.__dir__ = -1;
        result.__filtered__ = true;
      } else {
        result = this.clone();
        result.__dir__ *= -1;
      }
      return result;
    }

    /**
     * Extracts the unwrapped value from its lazy wrapper.
     *
     * @private
     * @name value
     * @memberOf LazyWrapper
     * @returns {*} Returns the unwrapped value.
     */
    function lazyValue() {
      var array = this.__wrapped__.value(),
          dir = this.__dir__,
          isArr = isArray(array),
          isRight = dir < 0,
          arrLength = isArr ? array.length : 0,
          view = getView(0, arrLength, this.__views__),
          start = view.start,
          end = view.end,
          length = end - start,
          index = isRight ? end : (start - 1),
          iteratees = this.__iteratees__,
          iterLength = iteratees.length,
          resIndex = 0,
          takeCount = nativeMin(length, this.__takeCount__);

      if (!isArr || (!isRight && arrLength == length && takeCount == length)) {
        return baseWrapperValue(array, this.__actions__);
      }
      var result = [];

      outer:
      while (length-- && resIndex < takeCount) {
        index += dir;

        var iterIndex = -1,
            value = array[index];

        while (++iterIndex < iterLength) {
          var data = iteratees[iterIndex],
              iteratee = data.iteratee,
              type = data.type,
              computed = iteratee(value);

          if (type == LAZY_MAP_FLAG) {
            value = computed;
          } else if (!computed) {
            if (type == LAZY_FILTER_FLAG) {
              continue outer;
            } else {
              break outer;
            }
          }
        }
        result[resIndex++] = value;
      }
      return result;
    }

    // Ensure `LazyWrapper` is an instance of `baseLodash`.
    LazyWrapper.prototype = baseCreate(baseLodash.prototype);
    LazyWrapper.prototype.constructor = LazyWrapper;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a hash object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Hash(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the hash.
     *
     * @private
     * @name clear
     * @memberOf Hash
     */
    function hashClear() {
      this.__data__ = nativeCreate ? nativeCreate(null) : {};
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the hash.
     *
     * @private
     * @name delete
     * @memberOf Hash
     * @param {Object} hash The hash to modify.
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function hashDelete(key) {
      var result = this.has(key) && delete this.__data__[key];
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the hash value for `key`.
     *
     * @private
     * @name get
     * @memberOf Hash
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function hashGet(key) {
      var data = this.__data__;
      if (nativeCreate) {
        var result = data[key];
        return result === HASH_UNDEFINED ? undefined : result;
      }
      return hasOwnProperty.call(data, key) ? data[key] : undefined;
    }

    /**
     * Checks if a hash value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Hash
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function hashHas(key) {
      var data = this.__data__;
      return nativeCreate ? (data[key] !== undefined) : hasOwnProperty.call(data, key);
    }

    /**
     * Sets the hash `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Hash
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the hash instance.
     */
    function hashSet(key, value) {
      var data = this.__data__;
      this.size += this.has(key) ? 0 : 1;
      data[key] = (nativeCreate && value === undefined) ? HASH_UNDEFINED : value;
      return this;
    }

    // Add methods to `Hash`.
    Hash.prototype.clear = hashClear;
    Hash.prototype['delete'] = hashDelete;
    Hash.prototype.get = hashGet;
    Hash.prototype.has = hashHas;
    Hash.prototype.set = hashSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an list cache object.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function ListCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the list cache.
     *
     * @private
     * @name clear
     * @memberOf ListCache
     */
    function listCacheClear() {
      this.__data__ = [];
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the list cache.
     *
     * @private
     * @name delete
     * @memberOf ListCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function listCacheDelete(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        return false;
      }
      var lastIndex = data.length - 1;
      if (index == lastIndex) {
        data.pop();
      } else {
        splice.call(data, index, 1);
      }
      --this.size;
      return true;
    }

    /**
     * Gets the list cache value for `key`.
     *
     * @private
     * @name get
     * @memberOf ListCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function listCacheGet(key) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      return index < 0 ? undefined : data[index][1];
    }

    /**
     * Checks if a list cache value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf ListCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function listCacheHas(key) {
      return assocIndexOf(this.__data__, key) > -1;
    }

    /**
     * Sets the list cache `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf ListCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the list cache instance.
     */
    function listCacheSet(key, value) {
      var data = this.__data__,
          index = assocIndexOf(data, key);

      if (index < 0) {
        ++this.size;
        data.push([key, value]);
      } else {
        data[index][1] = value;
      }
      return this;
    }

    // Add methods to `ListCache`.
    ListCache.prototype.clear = listCacheClear;
    ListCache.prototype['delete'] = listCacheDelete;
    ListCache.prototype.get = listCacheGet;
    ListCache.prototype.has = listCacheHas;
    ListCache.prototype.set = listCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a map cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function MapCache(entries) {
      var index = -1,
          length = entries == null ? 0 : entries.length;

      this.clear();
      while (++index < length) {
        var entry = entries[index];
        this.set(entry[0], entry[1]);
      }
    }

    /**
     * Removes all key-value entries from the map.
     *
     * @private
     * @name clear
     * @memberOf MapCache
     */
    function mapCacheClear() {
      this.size = 0;
      this.__data__ = {
        'hash': new Hash,
        'map': new (Map || ListCache),
        'string': new Hash
      };
    }

    /**
     * Removes `key` and its value from the map.
     *
     * @private
     * @name delete
     * @memberOf MapCache
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function mapCacheDelete(key) {
      var result = getMapData(this, key)['delete'](key);
      this.size -= result ? 1 : 0;
      return result;
    }

    /**
     * Gets the map value for `key`.
     *
     * @private
     * @name get
     * @memberOf MapCache
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function mapCacheGet(key) {
      return getMapData(this, key).get(key);
    }

    /**
     * Checks if a map value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf MapCache
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function mapCacheHas(key) {
      return getMapData(this, key).has(key);
    }

    /**
     * Sets the map `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf MapCache
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the map cache instance.
     */
    function mapCacheSet(key, value) {
      var data = getMapData(this, key),
          size = data.size;

      data.set(key, value);
      this.size += data.size == size ? 0 : 1;
      return this;
    }

    // Add methods to `MapCache`.
    MapCache.prototype.clear = mapCacheClear;
    MapCache.prototype['delete'] = mapCacheDelete;
    MapCache.prototype.get = mapCacheGet;
    MapCache.prototype.has = mapCacheHas;
    MapCache.prototype.set = mapCacheSet;

    /*------------------------------------------------------------------------*/

    /**
     *
     * Creates an array cache object to store unique values.
     *
     * @private
     * @constructor
     * @param {Array} [values] The values to cache.
     */
    function SetCache(values) {
      var index = -1,
          length = values == null ? 0 : values.length;

      this.__data__ = new MapCache;
      while (++index < length) {
        this.add(values[index]);
      }
    }

    /**
     * Adds `value` to the array cache.
     *
     * @private
     * @name add
     * @memberOf SetCache
     * @alias push
     * @param {*} value The value to cache.
     * @returns {Object} Returns the cache instance.
     */
    function setCacheAdd(value) {
      this.__data__.set(value, HASH_UNDEFINED);
      return this;
    }

    /**
     * Checks if `value` is in the array cache.
     *
     * @private
     * @name has
     * @memberOf SetCache
     * @param {*} value The value to search for.
     * @returns {number} Returns `true` if `value` is found, else `false`.
     */
    function setCacheHas(value) {
      return this.__data__.has(value);
    }

    // Add methods to `SetCache`.
    SetCache.prototype.add = SetCache.prototype.push = setCacheAdd;
    SetCache.prototype.has = setCacheHas;

    /*------------------------------------------------------------------------*/

    /**
     * Creates a stack cache object to store key-value pairs.
     *
     * @private
     * @constructor
     * @param {Array} [entries] The key-value pairs to cache.
     */
    function Stack(entries) {
      var data = this.__data__ = new ListCache(entries);
      this.size = data.size;
    }

    /**
     * Removes all key-value entries from the stack.
     *
     * @private
     * @name clear
     * @memberOf Stack
     */
    function stackClear() {
      this.__data__ = new ListCache;
      this.size = 0;
    }

    /**
     * Removes `key` and its value from the stack.
     *
     * @private
     * @name delete
     * @memberOf Stack
     * @param {string} key The key of the value to remove.
     * @returns {boolean} Returns `true` if the entry was removed, else `false`.
     */
    function stackDelete(key) {
      var data = this.__data__,
          result = data['delete'](key);

      this.size = data.size;
      return result;
    }

    /**
     * Gets the stack value for `key`.
     *
     * @private
     * @name get
     * @memberOf Stack
     * @param {string} key The key of the value to get.
     * @returns {*} Returns the entry value.
     */
    function stackGet(key) {
      return this.__data__.get(key);
    }

    /**
     * Checks if a stack value for `key` exists.
     *
     * @private
     * @name has
     * @memberOf Stack
     * @param {string} key The key of the entry to check.
     * @returns {boolean} Returns `true` if an entry for `key` exists, else `false`.
     */
    function stackHas(key) {
      return this.__data__.has(key);
    }

    /**
     * Sets the stack `key` to `value`.
     *
     * @private
     * @name set
     * @memberOf Stack
     * @param {string} key The key of the value to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns the stack cache instance.
     */
    function stackSet(key, value) {
      var data = this.__data__;
      if (data instanceof ListCache) {
        var pairs = data.__data__;
        if (!Map || (pairs.length < LARGE_ARRAY_SIZE - 1)) {
          pairs.push([key, value]);
          this.size = ++data.size;
          return this;
        }
        data = this.__data__ = new MapCache(pairs);
      }
      data.set(key, value);
      this.size = data.size;
      return this;
    }

    // Add methods to `Stack`.
    Stack.prototype.clear = stackClear;
    Stack.prototype['delete'] = stackDelete;
    Stack.prototype.get = stackGet;
    Stack.prototype.has = stackHas;
    Stack.prototype.set = stackSet;

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of the enumerable property names of the array-like `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @param {boolean} inherited Specify returning inherited property names.
     * @returns {Array} Returns the array of property names.
     */
    function arrayLikeKeys(value, inherited) {
      var isArr = isArray(value),
          isArg = !isArr && isArguments(value),
          isBuff = !isArr && !isArg && isBuffer(value),
          isType = !isArr && !isArg && !isBuff && isTypedArray(value),
          skipIndexes = isArr || isArg || isBuff || isType,
          result = skipIndexes ? baseTimes(value.length, String) : [],
          length = result.length;

      for (var key in value) {
        if ((inherited || hasOwnProperty.call(value, key)) &&
            !(skipIndexes && (
               // Safari 9 has enumerable `arguments.length` in strict mode.
               key == 'length' ||
               // Node.js 0.10 has enumerable non-index properties on buffers.
               (isBuff && (key == 'offset' || key == 'parent')) ||
               // PhantomJS 2 has enumerable non-index properties on typed arrays.
               (isType && (key == 'buffer' || key == 'byteLength' || key == 'byteOffset')) ||
               // Skip index properties.
               isIndex(key, length)
            ))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * A specialized version of `_.sample` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @returns {*} Returns the random element.
     */
    function arraySample(array) {
      var length = array.length;
      return length ? array[baseRandom(0, length - 1)] : undefined;
    }

    /**
     * A specialized version of `_.sampleSize` for arrays.
     *
     * @private
     * @param {Array} array The array to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function arraySampleSize(array, n) {
      return shuffleSelf(copyArray(array), baseClamp(n, 0, array.length));
    }

    /**
     * A specialized version of `_.shuffle` for arrays.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function arrayShuffle(array) {
      return shuffleSelf(copyArray(array));
    }

    /**
     * This function is like `assignValue` except that it doesn't assign
     * `undefined` values.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignMergeValue(object, key, value) {
      if ((value !== undefined && !eq(object[key], value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Assigns `value` to `key` of `object` if the existing value is not equivalent
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function assignValue(object, key, value) {
      var objValue = object[key];
      if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||
          (value === undefined && !(key in object))) {
        baseAssignValue(object, key, value);
      }
    }

    /**
     * Gets the index at which the `key` is found in `array` of key-value pairs.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {*} key The key to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     */
    function assocIndexOf(array, key) {
      var length = array.length;
      while (length--) {
        if (eq(array[length][0], key)) {
          return length;
        }
      }
      return -1;
    }

    /**
     * Aggregates elements of `collection` on `accumulator` with keys transformed
     * by `iteratee` and values set by `setter`.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform keys.
     * @param {Object} accumulator The initial aggregated object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseAggregator(collection, setter, iteratee, accumulator) {
      baseEach(collection, function(value, key, collection) {
        setter(accumulator, value, iteratee(value), collection);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.assign` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssign(object, source) {
      return object && copyObject(source, keys(source), object);
    }

    /**
     * The base implementation of `_.assignIn` without support for multiple sources
     * or `customizer` functions.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @returns {Object} Returns `object`.
     */
    function baseAssignIn(object, source) {
      return object && copyObject(source, keysIn(source), object);
    }

    /**
     * The base implementation of `assignValue` and `assignMergeValue` without
     * value checks.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {string} key The key of the property to assign.
     * @param {*} value The value to assign.
     */
    function baseAssignValue(object, key, value) {
      if (key == '__proto__' && defineProperty) {
        defineProperty(object, key, {
          'configurable': true,
          'enumerable': true,
          'value': value,
          'writable': true
        });
      } else {
        object[key] = value;
      }
    }

    /**
     * The base implementation of `_.at` without support for individual paths.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {string[]} paths The property paths to pick.
     * @returns {Array} Returns the picked elements.
     */
    function baseAt(object, paths) {
      var index = -1,
          length = paths.length,
          result = Array(length),
          skip = object == null;

      while (++index < length) {
        result[index] = skip ? undefined : get(object, paths[index]);
      }
      return result;
    }

    /**
     * The base implementation of `_.clamp` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     */
    function baseClamp(number, lower, upper) {
      if (number === number) {
        if (upper !== undefined) {
          number = number <= upper ? number : upper;
        }
        if (lower !== undefined) {
          number = number >= lower ? number : lower;
        }
      }
      return number;
    }

    /**
     * The base implementation of `_.clone` and `_.cloneDeep` which tracks
     * traversed objects.
     *
     * @private
     * @param {*} value The value to clone.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Deep clone
     *  2 - Flatten inherited properties
     *  4 - Clone symbols
     * @param {Function} [customizer] The function to customize cloning.
     * @param {string} [key] The key of `value`.
     * @param {Object} [object] The parent object of `value`.
     * @param {Object} [stack] Tracks traversed objects and their clone counterparts.
     * @returns {*} Returns the cloned value.
     */
    function baseClone(value, bitmask, customizer, key, object, stack) {
      var result,
          isDeep = bitmask & CLONE_DEEP_FLAG,
          isFlat = bitmask & CLONE_FLAT_FLAG,
          isFull = bitmask & CLONE_SYMBOLS_FLAG;

      if (customizer) {
        result = object ? customizer(value, key, object, stack) : customizer(value);
      }
      if (result !== undefined) {
        return result;
      }
      if (!isObject(value)) {
        return value;
      }
      var isArr = isArray(value);
      if (isArr) {
        result = initCloneArray(value);
        if (!isDeep) {
          return copyArray(value, result);
        }
      } else {
        var tag = getTag(value),
            isFunc = tag == funcTag || tag == genTag;

        if (isBuffer(value)) {
          return cloneBuffer(value, isDeep);
        }
        if (tag == objectTag || tag == argsTag || (isFunc && !object)) {
          result = (isFlat || isFunc) ? {} : initCloneObject(value);
          if (!isDeep) {
            return isFlat
              ? copySymbolsIn(value, baseAssignIn(result, value))
              : copySymbols(value, baseAssign(result, value));
          }
        } else {
          if (!cloneableTags[tag]) {
            return object ? value : {};
          }
          result = initCloneByTag(value, tag, isDeep);
        }
      }
      // Check for circular references and return its corresponding clone.
      stack || (stack = new Stack);
      var stacked = stack.get(value);
      if (stacked) {
        return stacked;
      }
      stack.set(value, result);

      if (isSet(value)) {
        value.forEach(function(subValue) {
          result.add(baseClone(subValue, bitmask, customizer, subValue, value, stack));
        });
      } else if (isMap(value)) {
        value.forEach(function(subValue, key) {
          result.set(key, baseClone(subValue, bitmask, customizer, key, value, stack));
        });
      }

      var keysFunc = isFull
        ? (isFlat ? getAllKeysIn : getAllKeys)
        : (isFlat ? keysIn : keys);

      var props = isArr ? undefined : keysFunc(value);
      arrayEach(props || value, function(subValue, key) {
        if (props) {
          key = subValue;
          subValue = value[key];
        }
        // Recursively populate clone (susceptible to call stack limits).
        assignValue(result, key, baseClone(subValue, bitmask, customizer, key, value, stack));
      });
      return result;
    }

    /**
     * The base implementation of `_.conforms` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     */
    function baseConforms(source) {
      var props = keys(source);
      return function(object) {
        return baseConformsTo(object, source, props);
      };
    }

    /**
     * The base implementation of `_.conformsTo` which accepts `props` to check.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     */
    function baseConformsTo(object, source, props) {
      var length = props.length;
      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (length--) {
        var key = props[length],
            predicate = source[key],
            value = object[key];

        if ((value === undefined && !(key in object)) || !predicate(value)) {
          return false;
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.delay` and `_.defer` which accepts `args`
     * to provide to `func`.
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {Array} args The arguments to provide to `func`.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    function baseDelay(func, wait, args) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return setTimeout(function() { func.apply(undefined, args); }, wait);
    }

    /**
     * The base implementation of methods like `_.difference` without support
     * for excluding multiple arrays or iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Array} values The values to exclude.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     */
    function baseDifference(array, values, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          isCommon = true,
          length = array.length,
          result = [],
          valuesLength = values.length;

      if (!length) {
        return result;
      }
      if (iteratee) {
        values = arrayMap(values, baseUnary(iteratee));
      }
      if (comparator) {
        includes = arrayIncludesWith;
        isCommon = false;
      }
      else if (values.length >= LARGE_ARRAY_SIZE) {
        includes = cacheHas;
        isCommon = false;
        values = new SetCache(values);
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee == null ? value : iteratee(value);

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var valuesIndex = valuesLength;
          while (valuesIndex--) {
            if (values[valuesIndex] === computed) {
              continue outer;
            }
          }
          result.push(value);
        }
        else if (!includes(values, computed, comparator)) {
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.forEach` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEach = createBaseEach(baseForOwn);

    /**
     * The base implementation of `_.forEachRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     */
    var baseEachRight = createBaseEach(baseForOwnRight, true);

    /**
     * The base implementation of `_.every` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`
     */
    function baseEvery(collection, predicate) {
      var result = true;
      baseEach(collection, function(value, index, collection) {
        result = !!predicate(value, index, collection);
        return result;
      });
      return result;
    }

    /**
     * The base implementation of methods like `_.max` and `_.min` which accepts a
     * `comparator` to determine the extremum value.
     *
     * @private
     * @param {Array} array The array to iterate over.
     * @param {Function} iteratee The iteratee invoked per iteration.
     * @param {Function} comparator The comparator used to compare values.
     * @returns {*} Returns the extremum value.
     */
    function baseExtremum(array, iteratee, comparator) {
      var index = -1,
          length = array.length;

      while (++index < length) {
        var value = array[index],
            current = iteratee(value);

        if (current != null && (computed === undefined
              ? (current === current && !isSymbol(current))
              : comparator(current, computed)
            )) {
          var computed = current,
              result = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.fill` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     */
    function baseFill(array, value, start, end) {
      var length = array.length;

      start = toInteger(start);
      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = (end === undefined || end > length) ? length : toInteger(end);
      if (end < 0) {
        end += length;
      }
      end = start > end ? 0 : toLength(end);
      while (start < end) {
        array[start++] = value;
      }
      return array;
    }

    /**
     * The base implementation of `_.filter` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     */
    function baseFilter(collection, predicate) {
      var result = [];
      baseEach(collection, function(value, index, collection) {
        if (predicate(value, index, collection)) {
          result.push(value);
        }
      });
      return result;
    }

    /**
     * The base implementation of `_.flatten` with support for restricting flattening.
     *
     * @private
     * @param {Array} array The array to flatten.
     * @param {number} depth The maximum recursion depth.
     * @param {boolean} [predicate=isFlattenable] The function invoked per iteration.
     * @param {boolean} [isStrict] Restrict to values that pass `predicate` checks.
     * @param {Array} [result=[]] The initial result value.
     * @returns {Array} Returns the new flattened array.
     */
    function baseFlatten(array, depth, predicate, isStrict, result) {
      var index = -1,
          length = array.length;

      predicate || (predicate = isFlattenable);
      result || (result = []);

      while (++index < length) {
        var value = array[index];
        if (depth > 0 && predicate(value)) {
          if (depth > 1) {
            // Recursively flatten arrays (susceptible to call stack limits).
            baseFlatten(value, depth - 1, predicate, isStrict, result);
          } else {
            arrayPush(result, value);
          }
        } else if (!isStrict) {
          result[result.length] = value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `baseForOwn` which iterates over `object`
     * properties returned by `keysFunc` and invokes `iteratee` for each property.
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseFor = createBaseFor();

    /**
     * This function is like `baseFor` except that it iterates over properties
     * in the opposite order.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @returns {Object} Returns `object`.
     */
    var baseForRight = createBaseFor(true);

    /**
     * The base implementation of `_.forOwn` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwn(object, iteratee) {
      return object && baseFor(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.forOwnRight` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Object} Returns `object`.
     */
    function baseForOwnRight(object, iteratee) {
      return object && baseForRight(object, iteratee, keys);
    }

    /**
     * The base implementation of `_.functions` which creates an array of
     * `object` function property names filtered from `props`.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Array} props The property names to filter.
     * @returns {Array} Returns the function names.
     */
    function baseFunctions(object, props) {
      return arrayFilter(props, function(key) {
        return isFunction(object[key]);
      });
    }

    /**
     * The base implementation of `_.get` without support for default values.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @returns {*} Returns the resolved value.
     */
    function baseGet(object, path) {
      path = castPath(path, object);

      var index = 0,
          length = path.length;

      while (object != null && index < length) {
        object = object[toKey(path[index++])];
      }
      return (index && index == length) ? object : undefined;
    }

    /**
     * The base implementation of `getAllKeys` and `getAllKeysIn` which uses
     * `keysFunc` and `symbolsFunc` to get the enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Function} keysFunc The function to get the keys of `object`.
     * @param {Function} symbolsFunc The function to get the symbols of `object`.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function baseGetAllKeys(object, keysFunc, symbolsFunc) {
      var result = keysFunc(object);
      return isArray(object) ? result : arrayPush(result, symbolsFunc(object));
    }

    /**
     * The base implementation of `getTag` without fallbacks for buggy environments.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    function baseGetTag(value) {
      if (value == null) {
        return value === undefined ? undefinedTag : nullTag;
      }
      return (symToStringTag && symToStringTag in Object(value))
        ? getRawTag(value)
        : objectToString(value);
    }

    /**
     * The base implementation of `_.gt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     */
    function baseGt(value, other) {
      return value > other;
    }

    /**
     * The base implementation of `_.has` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHas(object, key) {
      return object != null && hasOwnProperty.call(object, key);
    }

    /**
     * The base implementation of `_.hasIn` without support for deep paths.
     *
     * @private
     * @param {Object} [object] The object to query.
     * @param {Array|string} key The key to check.
     * @returns {boolean} Returns `true` if `key` exists, else `false`.
     */
    function baseHasIn(object, key) {
      return object != null && key in Object(object);
    }

    /**
     * The base implementation of `_.inRange` which doesn't coerce arguments.
     *
     * @private
     * @param {number} number The number to check.
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     */
    function baseInRange(number, start, end) {
      return number >= nativeMin(start, end) && number < nativeMax(start, end);
    }

    /**
     * The base implementation of methods like `_.intersection`, without support
     * for iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of shared values.
     */
    function baseIntersection(arrays, iteratee, comparator) {
      var includes = comparator ? arrayIncludesWith : arrayIncludes,
          length = arrays[0].length,
          othLength = arrays.length,
          othIndex = othLength,
          caches = Array(othLength),
          maxLength = Infinity,
          result = [];

      while (othIndex--) {
        var array = arrays[othIndex];
        if (othIndex && iteratee) {
          array = arrayMap(array, baseUnary(iteratee));
        }
        maxLength = nativeMin(array.length, maxLength);
        caches[othIndex] = !comparator && (iteratee || (length >= 120 && array.length >= 120))
          ? new SetCache(othIndex && array)
          : undefined;
      }
      array = arrays[0];

      var index = -1,
          seen = caches[0];

      outer:
      while (++index < length && result.length < maxLength) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (!(seen
              ? cacheHas(seen, computed)
              : includes(result, computed, comparator)
            )) {
          othIndex = othLength;
          while (--othIndex) {
            var cache = caches[othIndex];
            if (!(cache
                  ? cacheHas(cache, computed)
                  : includes(arrays[othIndex], computed, comparator))
                ) {
              continue outer;
            }
          }
          if (seen) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.invert` and `_.invertBy` which inverts
     * `object` with values transformed by `iteratee` and set by `setter`.
     *
     * @private
     * @param {Object} object The object to iterate over.
     * @param {Function} setter The function to set `accumulator` values.
     * @param {Function} iteratee The iteratee to transform values.
     * @param {Object} accumulator The initial inverted object.
     * @returns {Function} Returns `accumulator`.
     */
    function baseInverter(object, setter, iteratee, accumulator) {
      baseForOwn(object, function(value, key, object) {
        setter(accumulator, iteratee(value), key, object);
      });
      return accumulator;
    }

    /**
     * The base implementation of `_.invoke` without support for individual
     * method arguments.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {Array} args The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     */
    function baseInvoke(object, path, args) {
      path = castPath(path, object);
      object = parent(object, path);
      var func = object == null ? object : object[toKey(last(path))];
      return func == null ? undefined : apply(func, object, args);
    }

    /**
     * The base implementation of `_.isArguments`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     */
    function baseIsArguments(value) {
      return isObjectLike(value) && baseGetTag(value) == argsTag;
    }

    /**
     * The base implementation of `_.isArrayBuffer` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     */
    function baseIsArrayBuffer(value) {
      return isObjectLike(value) && baseGetTag(value) == arrayBufferTag;
    }

    /**
     * The base implementation of `_.isDate` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     */
    function baseIsDate(value) {
      return isObjectLike(value) && baseGetTag(value) == dateTag;
    }

    /**
     * The base implementation of `_.isEqual` which supports partial comparisons
     * and tracks traversed objects.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {boolean} bitmask The bitmask flags.
     *  1 - Unordered comparison
     *  2 - Partial comparison
     * @param {Function} [customizer] The function to customize comparisons.
     * @param {Object} [stack] Tracks traversed `value` and `other` objects.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     */
    function baseIsEqual(value, other, bitmask, customizer, stack) {
      if (value === other) {
        return true;
      }
      if (value == null || other == null || (!isObjectLike(value) && !isObjectLike(other))) {
        return value !== value && other !== other;
      }
      return baseIsEqualDeep(value, other, bitmask, customizer, baseIsEqual, stack);
    }

    /**
     * A specialized version of `baseIsEqual` for arrays and objects which performs
     * deep comparisons and tracks traversed objects enabling objects with circular
     * references to be compared.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} [stack] Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function baseIsEqualDeep(object, other, bitmask, customizer, equalFunc, stack) {
      var objIsArr = isArray(object),
          othIsArr = isArray(other),
          objTag = objIsArr ? arrayTag : getTag(object),
          othTag = othIsArr ? arrayTag : getTag(other);

      objTag = objTag == argsTag ? objectTag : objTag;
      othTag = othTag == argsTag ? objectTag : othTag;

      var objIsObj = objTag == objectTag,
          othIsObj = othTag == objectTag,
          isSameTag = objTag == othTag;

      if (isSameTag && isBuffer(object)) {
        if (!isBuffer(other)) {
          return false;
        }
        objIsArr = true;
        objIsObj = false;
      }
      if (isSameTag && !objIsObj) {
        stack || (stack = new Stack);
        return (objIsArr || isTypedArray(object))
          ? equalArrays(object, other, bitmask, customizer, equalFunc, stack)
          : equalByTag(object, other, objTag, bitmask, customizer, equalFunc, stack);
      }
      if (!(bitmask & COMPARE_PARTIAL_FLAG)) {
        var objIsWrapped = objIsObj && hasOwnProperty.call(object, '__wrapped__'),
            othIsWrapped = othIsObj && hasOwnProperty.call(other, '__wrapped__');

        if (objIsWrapped || othIsWrapped) {
          var objUnwrapped = objIsWrapped ? object.value() : object,
              othUnwrapped = othIsWrapped ? other.value() : other;

          stack || (stack = new Stack);
          return equalFunc(objUnwrapped, othUnwrapped, bitmask, customizer, stack);
        }
      }
      if (!isSameTag) {
        return false;
      }
      stack || (stack = new Stack);
      return equalObjects(object, other, bitmask, customizer, equalFunc, stack);
    }

    /**
     * The base implementation of `_.isMap` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     */
    function baseIsMap(value) {
      return isObjectLike(value) && getTag(value) == mapTag;
    }

    /**
     * The base implementation of `_.isMatch` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Array} matchData The property names, values, and compare flags to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     */
    function baseIsMatch(object, source, matchData, customizer) {
      var index = matchData.length,
          length = index,
          noCustomizer = !customizer;

      if (object == null) {
        return !length;
      }
      object = Object(object);
      while (index--) {
        var data = matchData[index];
        if ((noCustomizer && data[2])
              ? data[1] !== object[data[0]]
              : !(data[0] in object)
            ) {
          return false;
        }
      }
      while (++index < length) {
        data = matchData[index];
        var key = data[0],
            objValue = object[key],
            srcValue = data[1];

        if (noCustomizer && data[2]) {
          if (objValue === undefined && !(key in object)) {
            return false;
          }
        } else {
          var stack = new Stack;
          if (customizer) {
            var result = customizer(objValue, srcValue, key, object, source, stack);
          }
          if (!(result === undefined
                ? baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG, customizer, stack)
                : result
              )) {
            return false;
          }
        }
      }
      return true;
    }

    /**
     * The base implementation of `_.isNative` without bad shim checks.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     */
    function baseIsNative(value) {
      if (!isObject(value) || isMasked(value)) {
        return false;
      }
      var pattern = isFunction(value) ? reIsNative : reIsHostCtor;
      return pattern.test(toSource(value));
    }

    /**
     * The base implementation of `_.isRegExp` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     */
    function baseIsRegExp(value) {
      return isObjectLike(value) && baseGetTag(value) == regexpTag;
    }

    /**
     * The base implementation of `_.isSet` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     */
    function baseIsSet(value) {
      return isObjectLike(value) && getTag(value) == setTag;
    }

    /**
     * The base implementation of `_.isTypedArray` without Node.js optimizations.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     */
    function baseIsTypedArray(value) {
      return isObjectLike(value) &&
        isLength(value.length) && !!typedArrayTags[baseGetTag(value)];
    }

    /**
     * The base implementation of `_.iteratee`.
     *
     * @private
     * @param {*} [value=_.identity] The value to convert to an iteratee.
     * @returns {Function} Returns the iteratee.
     */
    function baseIteratee(value) {
      // Don't store the `typeof` result in a variable to avoid a JIT bug in Safari 9.
      // See https://bugs.webkit.org/show_bug.cgi?id=156034 for more details.
      if (typeof value == 'function') {
        return value;
      }
      if (value == null) {
        return identity;
      }
      if (typeof value == 'object') {
        return isArray(value)
          ? baseMatchesProperty(value[0], value[1])
          : baseMatches(value);
      }
      return property(value);
    }

    /**
     * The base implementation of `_.keys` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeys(object) {
      if (!isPrototype(object)) {
        return nativeKeys(object);
      }
      var result = [];
      for (var key in Object(object)) {
        if (hasOwnProperty.call(object, key) && key != 'constructor') {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.keysIn` which doesn't treat sparse arrays as dense.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function baseKeysIn(object) {
      if (!isObject(object)) {
        return nativeKeysIn(object);
      }
      var isProto = isPrototype(object),
          result = [];

      for (var key in object) {
        if (!(key == 'constructor' && (isProto || !hasOwnProperty.call(object, key)))) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.lt` which doesn't coerce arguments.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     */
    function baseLt(value, other) {
      return value < other;
    }

    /**
     * The base implementation of `_.map` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} iteratee The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     */
    function baseMap(collection, iteratee) {
      var index = -1,
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value, key, collection) {
        result[++index] = iteratee(value, key, collection);
      });
      return result;
    }

    /**
     * The base implementation of `_.matches` which doesn't clone `source`.
     *
     * @private
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatches(source) {
      var matchData = getMatchData(source);
      if (matchData.length == 1 && matchData[0][2]) {
        return matchesStrictComparable(matchData[0][0], matchData[0][1]);
      }
      return function(object) {
        return object === source || baseIsMatch(object, source, matchData);
      };
    }

    /**
     * The base implementation of `_.matchesProperty` which doesn't clone `srcValue`.
     *
     * @private
     * @param {string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function baseMatchesProperty(path, srcValue) {
      if (isKey(path) && isStrictComparable(srcValue)) {
        return matchesStrictComparable(toKey(path), srcValue);
      }
      return function(object) {
        var objValue = get(object, path);
        return (objValue === undefined && objValue === srcValue)
          ? hasIn(object, path)
          : baseIsEqual(srcValue, objValue, COMPARE_PARTIAL_FLAG | COMPARE_UNORDERED_FLAG);
      };
    }

    /**
     * The base implementation of `_.merge` without support for multiple sources.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} [customizer] The function to customize merged values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMerge(object, source, srcIndex, customizer, stack) {
      if (object === source) {
        return;
      }
      baseFor(source, function(srcValue, key) {
        stack || (stack = new Stack);
        if (isObject(srcValue)) {
          baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
        }
        else {
          var newValue = customizer
            ? customizer(safeGet(object, key), srcValue, (key + ''), object, source, stack)
            : undefined;

          if (newValue === undefined) {
            newValue = srcValue;
          }
          assignMergeValue(object, key, newValue);
        }
      }, keysIn);
    }

    /**
     * A specialized version of `baseMerge` for arrays and objects which performs
     * deep merges and tracks traversed objects enabling objects with circular
     * references to be merged.
     *
     * @private
     * @param {Object} object The destination object.
     * @param {Object} source The source object.
     * @param {string} key The key of the value to merge.
     * @param {number} srcIndex The index of `source`.
     * @param {Function} mergeFunc The function to merge values.
     * @param {Function} [customizer] The function to customize assigned values.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     */
    function baseMergeDeep(object, source, key, srcIndex, mergeFunc, customizer, stack) {
      var objValue = safeGet(object, key),
          srcValue = safeGet(source, key),
          stacked = stack.get(srcValue);

      if (stacked) {
        assignMergeValue(object, key, stacked);
        return;
      }
      var newValue = customizer
        ? customizer(objValue, srcValue, (key + ''), object, source, stack)
        : undefined;

      var isCommon = newValue === undefined;

      if (isCommon) {
        var isArr = isArray(srcValue),
            isBuff = !isArr && isBuffer(srcValue),
            isTyped = !isArr && !isBuff && isTypedArray(srcValue);

        newValue = srcValue;
        if (isArr || isBuff || isTyped) {
          if (isArray(objValue)) {
            newValue = objValue;
          }
          else if (isArrayLikeObject(objValue)) {
            newValue = copyArray(objValue);
          }
          else if (isBuff) {
            isCommon = false;
            newValue = cloneBuffer(srcValue, true);
          }
          else if (isTyped) {
            isCommon = false;
            newValue = cloneTypedArray(srcValue, true);
          }
          else {
            newValue = [];
          }
        }
        else if (isPlainObject(srcValue) || isArguments(srcValue)) {
          newValue = objValue;
          if (isArguments(objValue)) {
            newValue = toPlainObject(objValue);
          }
          else if (!isObject(objValue) || isFunction(objValue)) {
            newValue = initCloneObject(srcValue);
          }
        }
        else {
          isCommon = false;
        }
      }
      if (isCommon) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, newValue);
        mergeFunc(newValue, srcValue, srcIndex, customizer, stack);
        stack['delete'](srcValue);
      }
      assignMergeValue(object, key, newValue);
    }

    /**
     * The base implementation of `_.nth` which doesn't coerce arguments.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {number} n The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     */
    function baseNth(array, n) {
      var length = array.length;
      if (!length) {
        return;
      }
      n += n < 0 ? length : 0;
      return isIndex(n, length) ? array[n] : undefined;
    }

    /**
     * The base implementation of `_.orderBy` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function[]|Object[]|string[]} iteratees The iteratees to sort by.
     * @param {string[]} orders The sort orders of `iteratees`.
     * @returns {Array} Returns the new sorted array.
     */
    function baseOrderBy(collection, iteratees, orders) {
      var index = -1;
      iteratees = arrayMap(iteratees.length ? iteratees : [identity], baseUnary(getIteratee()));

      var result = baseMap(collection, function(value, key, collection) {
        var criteria = arrayMap(iteratees, function(iteratee) {
          return iteratee(value);
        });
        return { 'criteria': criteria, 'index': ++index, 'value': value };
      });

      return baseSortBy(result, function(object, other) {
        return compareMultiple(object, other, orders);
      });
    }

    /**
     * The base implementation of `_.pick` without support for individual
     * property identifiers.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @returns {Object} Returns the new object.
     */
    function basePick(object, paths) {
      return basePickBy(object, paths, function(value, path) {
        return hasIn(object, path);
      });
    }

    /**
     * The base implementation of  `_.pickBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Object} object The source object.
     * @param {string[]} paths The property paths to pick.
     * @param {Function} predicate The function invoked per property.
     * @returns {Object} Returns the new object.
     */
    function basePickBy(object, paths, predicate) {
      var index = -1,
          length = paths.length,
          result = {};

      while (++index < length) {
        var path = paths[index],
            value = baseGet(object, path);

        if (predicate(value, path)) {
          baseSet(result, castPath(path, object), value);
        }
      }
      return result;
    }

    /**
     * A specialized version of `baseProperty` which supports deep paths.
     *
     * @private
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     */
    function basePropertyDeep(path) {
      return function(object) {
        return baseGet(object, path);
      };
    }

    /**
     * The base implementation of `_.pullAllBy` without support for iteratee
     * shorthands.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     */
    function basePullAll(array, values, iteratee, comparator) {
      var indexOf = comparator ? baseIndexOfWith : baseIndexOf,
          index = -1,
          length = values.length,
          seen = array;

      if (array === values) {
        values = copyArray(values);
      }
      if (iteratee) {
        seen = arrayMap(array, baseUnary(iteratee));
      }
      while (++index < length) {
        var fromIndex = 0,
            value = values[index],
            computed = iteratee ? iteratee(value) : value;

        while ((fromIndex = indexOf(seen, computed, fromIndex, comparator)) > -1) {
          if (seen !== array) {
            splice.call(seen, fromIndex, 1);
          }
          splice.call(array, fromIndex, 1);
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.pullAt` without support for individual
     * indexes or capturing the removed elements.
     *
     * @private
     * @param {Array} array The array to modify.
     * @param {number[]} indexes The indexes of elements to remove.
     * @returns {Array} Returns `array`.
     */
    function basePullAt(array, indexes) {
      var length = array ? indexes.length : 0,
          lastIndex = length - 1;

      while (length--) {
        var index = indexes[length];
        if (length == lastIndex || index !== previous) {
          var previous = index;
          if (isIndex(index)) {
            splice.call(array, index, 1);
          } else {
            baseUnset(array, index);
          }
        }
      }
      return array;
    }

    /**
     * The base implementation of `_.random` without support for returning
     * floating-point numbers.
     *
     * @private
     * @param {number} lower The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the random number.
     */
    function baseRandom(lower, upper) {
      return lower + nativeFloor(nativeRandom() * (upper - lower + 1));
    }

    /**
     * The base implementation of `_.range` and `_.rangeRight` which doesn't
     * coerce arguments.
     *
     * @private
     * @param {number} start The start of the range.
     * @param {number} end The end of the range.
     * @param {number} step The value to increment or decrement by.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the range of numbers.
     */
    function baseRange(start, end, step, fromRight) {
      var index = -1,
          length = nativeMax(nativeCeil((end - start) / (step || 1)), 0),
          result = Array(length);

      while (length--) {
        result[fromRight ? length : ++index] = start;
        start += step;
      }
      return result;
    }

    /**
     * The base implementation of `_.repeat` which doesn't coerce arguments.
     *
     * @private
     * @param {string} string The string to repeat.
     * @param {number} n The number of times to repeat the string.
     * @returns {string} Returns the repeated string.
     */
    function baseRepeat(string, n) {
      var result = '';
      if (!string || n < 1 || n > MAX_SAFE_INTEGER) {
        return result;
      }
      // Leverage the exponentiation by squaring algorithm for a faster repeat.
      // See https://en.wikipedia.org/wiki/Exponentiation_by_squaring for more details.
      do {
        if (n % 2) {
          result += string;
        }
        n = nativeFloor(n / 2);
        if (n) {
          string += string;
        }
      } while (n);

      return result;
    }

    /**
     * The base implementation of `_.rest` which doesn't validate or coerce arguments.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     */
    function baseRest(func, start) {
      return setToString(overRest(func, start, identity), func + '');
    }

    /**
     * The base implementation of `_.sample`.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     */
    function baseSample(collection) {
      return arraySample(values(collection));
    }

    /**
     * The base implementation of `_.sampleSize` without param guards.
     *
     * @private
     * @param {Array|Object} collection The collection to sample.
     * @param {number} n The number of elements to sample.
     * @returns {Array} Returns the random elements.
     */
    function baseSampleSize(collection, n) {
      var array = values(collection);
      return shuffleSelf(array, baseClamp(n, 0, array.length));
    }

    /**
     * The base implementation of `_.set`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseSet(object, path, value, customizer) {
      if (!isObject(object)) {
        return object;
      }
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          lastIndex = length - 1,
          nested = object;

      while (nested != null && ++index < length) {
        var key = toKey(path[index]),
            newValue = value;

        if (index != lastIndex) {
          var objValue = nested[key];
          newValue = customizer ? customizer(objValue, key, nested) : undefined;
          if (newValue === undefined) {
            newValue = isObject(objValue)
              ? objValue
              : (isIndex(path[index + 1]) ? [] : {});
          }
        }
        assignValue(nested, key, newValue);
        nested = nested[key];
      }
      return object;
    }

    /**
     * The base implementation of `setData` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var baseSetData = !metaMap ? identity : function(func, data) {
      metaMap.set(func, data);
      return func;
    };

    /**
     * The base implementation of `setToString` without support for hot loop shorting.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var baseSetToString = !defineProperty ? identity : function(func, string) {
      return defineProperty(func, 'toString', {
        'configurable': true,
        'enumerable': false,
        'value': constant(string),
        'writable': true
      });
    };

    /**
     * The base implementation of `_.shuffle`.
     *
     * @private
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     */
    function baseShuffle(collection) {
      return shuffleSelf(values(collection));
    }

    /**
     * The base implementation of `_.slice` without an iteratee call guard.
     *
     * @private
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseSlice(array, start, end) {
      var index = -1,
          length = array.length;

      if (start < 0) {
        start = -start > length ? 0 : (length + start);
      }
      end = end > length ? length : end;
      if (end < 0) {
        end += length;
      }
      length = start > end ? 0 : ((end - start) >>> 0);
      start >>>= 0;

      var result = Array(length);
      while (++index < length) {
        result[index] = array[index + start];
      }
      return result;
    }

    /**
     * The base implementation of `_.some` without support for iteratee shorthands.
     *
     * @private
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} predicate The function invoked per iteration.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     */
    function baseSome(collection, predicate) {
      var result;

      baseEach(collection, function(value, index, collection) {
        result = predicate(value, index, collection);
        return !result;
      });
      return !!result;
    }

    /**
     * The base implementation of `_.sortedIndex` and `_.sortedLastIndex` which
     * performs a binary search of `array` to determine the index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndex(array, value, retHighest) {
      var low = 0,
          high = array == null ? low : array.length;

      if (typeof value == 'number' && value === value && high <= HALF_MAX_ARRAY_LENGTH) {
        while (low < high) {
          var mid = (low + high) >>> 1,
              computed = array[mid];

          if (computed !== null && !isSymbol(computed) &&
              (retHighest ? (computed <= value) : (computed < value))) {
            low = mid + 1;
          } else {
            high = mid;
          }
        }
        return high;
      }
      return baseSortedIndexBy(array, value, identity, retHighest);
    }

    /**
     * The base implementation of `_.sortedIndexBy` and `_.sortedLastIndexBy`
     * which invokes `iteratee` for `value` and each element of `array` to compute
     * their sort ranking. The iteratee is invoked with one argument; (value).
     *
     * @private
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} iteratee The iteratee invoked per element.
     * @param {boolean} [retHighest] Specify returning the highest qualified index.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     */
    function baseSortedIndexBy(array, value, iteratee, retHighest) {
      value = iteratee(value);

      var low = 0,
          high = array == null ? 0 : array.length,
          valIsNaN = value !== value,
          valIsNull = value === null,
          valIsSymbol = isSymbol(value),
          valIsUndefined = value === undefined;

      while (low < high) {
        var mid = nativeFloor((low + high) / 2),
            computed = iteratee(array[mid]),
            othIsDefined = computed !== undefined,
            othIsNull = computed === null,
            othIsReflexive = computed === computed,
            othIsSymbol = isSymbol(computed);

        if (valIsNaN) {
          var setLow = retHighest || othIsReflexive;
        } else if (valIsUndefined) {
          setLow = othIsReflexive && (retHighest || othIsDefined);
        } else if (valIsNull) {
          setLow = othIsReflexive && othIsDefined && (retHighest || !othIsNull);
        } else if (valIsSymbol) {
          setLow = othIsReflexive && othIsDefined && !othIsNull && (retHighest || !othIsSymbol);
        } else if (othIsNull || othIsSymbol) {
          setLow = false;
        } else {
          setLow = retHighest ? (computed <= value) : (computed < value);
        }
        if (setLow) {
          low = mid + 1;
        } else {
          high = mid;
        }
      }
      return nativeMin(high, MAX_ARRAY_INDEX);
    }

    /**
     * The base implementation of `_.sortedUniq` and `_.sortedUniqBy` without
     * support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseSortedUniq(array, iteratee) {
      var index = -1,
          length = array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        if (!index || !eq(computed, seen)) {
          var seen = computed;
          result[resIndex++] = value === 0 ? 0 : value;
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.toNumber` which doesn't ensure correct
     * conversions of binary, hexadecimal, or octal string values.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     */
    function baseToNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      return +value;
    }

    /**
     * The base implementation of `_.toString` which doesn't convert nullish
     * values to empty strings.
     *
     * @private
     * @param {*} value The value to process.
     * @returns {string} Returns the string.
     */
    function baseToString(value) {
      // Exit early for strings to avoid a performance hit in some environments.
      if (typeof value == 'string') {
        return value;
      }
      if (isArray(value)) {
        // Recursively convert values (susceptible to call stack limits).
        return arrayMap(value, baseToString) + '';
      }
      if (isSymbol(value)) {
        return symbolToString ? symbolToString.call(value) : '';
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * The base implementation of `_.uniqBy` without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     */
    function baseUniq(array, iteratee, comparator) {
      var index = -1,
          includes = arrayIncludes,
          length = array.length,
          isCommon = true,
          result = [],
          seen = result;

      if (comparator) {
        isCommon = false;
        includes = arrayIncludesWith;
      }
      else if (length >= LARGE_ARRAY_SIZE) {
        var set = iteratee ? null : createSet(array);
        if (set) {
          return setToArray(set);
        }
        isCommon = false;
        includes = cacheHas;
        seen = new SetCache;
      }
      else {
        seen = iteratee ? [] : result;
      }
      outer:
      while (++index < length) {
        var value = array[index],
            computed = iteratee ? iteratee(value) : value;

        value = (comparator || value !== 0) ? value : 0;
        if (isCommon && computed === computed) {
          var seenIndex = seen.length;
          while (seenIndex--) {
            if (seen[seenIndex] === computed) {
              continue outer;
            }
          }
          if (iteratee) {
            seen.push(computed);
          }
          result.push(value);
        }
        else if (!includes(seen, computed, comparator)) {
          if (seen !== result) {
            seen.push(computed);
          }
          result.push(value);
        }
      }
      return result;
    }

    /**
     * The base implementation of `_.unset`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The property path to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     */
    function baseUnset(object, path) {
      path = castPath(path, object);
      object = parent(object, path);
      return object == null || delete object[toKey(last(path))];
    }

    /**
     * The base implementation of `_.update`.
     *
     * @private
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to update.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize path creation.
     * @returns {Object} Returns `object`.
     */
    function baseUpdate(object, path, updater, customizer) {
      return baseSet(object, path, updater(baseGet(object, path)), customizer);
    }

    /**
     * The base implementation of methods like `_.dropWhile` and `_.takeWhile`
     * without support for iteratee shorthands.
     *
     * @private
     * @param {Array} array The array to query.
     * @param {Function} predicate The function invoked per iteration.
     * @param {boolean} [isDrop] Specify dropping elements instead of taking them.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Array} Returns the slice of `array`.
     */
    function baseWhile(array, predicate, isDrop, fromRight) {
      var length = array.length,
          index = fromRight ? length : -1;

      while ((fromRight ? index-- : ++index < length) &&
        predicate(array[index], index, array)) {}

      return isDrop
        ? baseSlice(array, (fromRight ? 0 : index), (fromRight ? index + 1 : length))
        : baseSlice(array, (fromRight ? index + 1 : 0), (fromRight ? length : index));
    }

    /**
     * The base implementation of `wrapperValue` which returns the result of
     * performing a sequence of actions on the unwrapped `value`, where each
     * successive action is supplied the return value of the previous.
     *
     * @private
     * @param {*} value The unwrapped value.
     * @param {Array} actions Actions to perform to resolve the unwrapped value.
     * @returns {*} Returns the resolved value.
     */
    function baseWrapperValue(value, actions) {
      var result = value;
      if (result instanceof LazyWrapper) {
        result = result.value();
      }
      return arrayReduce(actions, function(result, action) {
        return action.func.apply(action.thisArg, arrayPush([result], action.args));
      }, result);
    }

    /**
     * The base implementation of methods like `_.xor`, without support for
     * iteratee shorthands, that accepts an array of arrays to inspect.
     *
     * @private
     * @param {Array} arrays The arrays to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of values.
     */
    function baseXor(arrays, iteratee, comparator) {
      var length = arrays.length;
      if (length < 2) {
        return length ? baseUniq(arrays[0]) : [];
      }
      var index = -1,
          result = Array(length);

      while (++index < length) {
        var array = arrays[index],
            othIndex = -1;

        while (++othIndex < length) {
          if (othIndex != index) {
            result[index] = baseDifference(result[index] || array, arrays[othIndex], iteratee, comparator);
          }
        }
      }
      return baseUniq(baseFlatten(result, 1), iteratee, comparator);
    }

    /**
     * This base implementation of `_.zipObject` which assigns values using `assignFunc`.
     *
     * @private
     * @param {Array} props The property identifiers.
     * @param {Array} values The property values.
     * @param {Function} assignFunc The function to assign values.
     * @returns {Object} Returns the new object.
     */
    function baseZipObject(props, values, assignFunc) {
      var index = -1,
          length = props.length,
          valsLength = values.length,
          result = {};

      while (++index < length) {
        var value = index < valsLength ? values[index] : undefined;
        assignFunc(result, props[index], value);
      }
      return result;
    }

    /**
     * Casts `value` to an empty array if it's not an array like object.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Array|Object} Returns the cast array-like object.
     */
    function castArrayLikeObject(value) {
      return isArrayLikeObject(value) ? value : [];
    }

    /**
     * Casts `value` to `identity` if it's not a function.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {Function} Returns cast function.
     */
    function castFunction(value) {
      return typeof value == 'function' ? value : identity;
    }

    /**
     * Casts `value` to a path array if it's not one.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {Object} [object] The object to query keys on.
     * @returns {Array} Returns the cast property path array.
     */
    function castPath(value, object) {
      if (isArray(value)) {
        return value;
      }
      return isKey(value, object) ? [value] : stringToPath(toString(value));
    }

    /**
     * A `baseRest` alias which can be replaced with `identity` by module
     * replacement plugins.
     *
     * @private
     * @type {Function}
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    var castRest = baseRest;

    /**
     * Casts `array` to a slice if it's needed.
     *
     * @private
     * @param {Array} array The array to inspect.
     * @param {number} start The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the cast slice.
     */
    function castSlice(array, start, end) {
      var length = array.length;
      end = end === undefined ? length : end;
      return (!start && end >= length) ? array : baseSlice(array, start, end);
    }

    /**
     * A simple wrapper around the global [`clearTimeout`](https://mdn.io/clearTimeout).
     *
     * @private
     * @param {number|Object} id The timer id or timeout object of the timer to clear.
     */
    var clearTimeout = ctxClearTimeout || function(id) {
      return root.clearTimeout(id);
    };

    /**
     * Creates a clone of  `buffer`.
     *
     * @private
     * @param {Buffer} buffer The buffer to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Buffer} Returns the cloned buffer.
     */
    function cloneBuffer(buffer, isDeep) {
      if (isDeep) {
        return buffer.slice();
      }
      var length = buffer.length,
          result = allocUnsafe ? allocUnsafe(length) : new buffer.constructor(length);

      buffer.copy(result);
      return result;
    }

    /**
     * Creates a clone of `arrayBuffer`.
     *
     * @private
     * @param {ArrayBuffer} arrayBuffer The array buffer to clone.
     * @returns {ArrayBuffer} Returns the cloned array buffer.
     */
    function cloneArrayBuffer(arrayBuffer) {
      var result = new arrayBuffer.constructor(arrayBuffer.byteLength);
      new Uint8Array(result).set(new Uint8Array(arrayBuffer));
      return result;
    }

    /**
     * Creates a clone of `dataView`.
     *
     * @private
     * @param {Object} dataView The data view to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned data view.
     */
    function cloneDataView(dataView, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(dataView.buffer) : dataView.buffer;
      return new dataView.constructor(buffer, dataView.byteOffset, dataView.byteLength);
    }

    /**
     * Creates a clone of `regexp`.
     *
     * @private
     * @param {Object} regexp The regexp to clone.
     * @returns {Object} Returns the cloned regexp.
     */
    function cloneRegExp(regexp) {
      var result = new regexp.constructor(regexp.source, reFlags.exec(regexp));
      result.lastIndex = regexp.lastIndex;
      return result;
    }

    /**
     * Creates a clone of the `symbol` object.
     *
     * @private
     * @param {Object} symbol The symbol object to clone.
     * @returns {Object} Returns the cloned symbol object.
     */
    function cloneSymbol(symbol) {
      return symbolValueOf ? Object(symbolValueOf.call(symbol)) : {};
    }

    /**
     * Creates a clone of `typedArray`.
     *
     * @private
     * @param {Object} typedArray The typed array to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the cloned typed array.
     */
    function cloneTypedArray(typedArray, isDeep) {
      var buffer = isDeep ? cloneArrayBuffer(typedArray.buffer) : typedArray.buffer;
      return new typedArray.constructor(buffer, typedArray.byteOffset, typedArray.length);
    }

    /**
     * Compares values to sort them in ascending order.
     *
     * @private
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {number} Returns the sort order indicator for `value`.
     */
    function compareAscending(value, other) {
      if (value !== other) {
        var valIsDefined = value !== undefined,
            valIsNull = value === null,
            valIsReflexive = value === value,
            valIsSymbol = isSymbol(value);

        var othIsDefined = other !== undefined,
            othIsNull = other === null,
            othIsReflexive = other === other,
            othIsSymbol = isSymbol(other);

        if ((!othIsNull && !othIsSymbol && !valIsSymbol && value > other) ||
            (valIsSymbol && othIsDefined && othIsReflexive && !othIsNull && !othIsSymbol) ||
            (valIsNull && othIsDefined && othIsReflexive) ||
            (!valIsDefined && othIsReflexive) ||
            !valIsReflexive) {
          return 1;
        }
        if ((!valIsNull && !valIsSymbol && !othIsSymbol && value < other) ||
            (othIsSymbol && valIsDefined && valIsReflexive && !valIsNull && !valIsSymbol) ||
            (othIsNull && valIsDefined && valIsReflexive) ||
            (!othIsDefined && valIsReflexive) ||
            !othIsReflexive) {
          return -1;
        }
      }
      return 0;
    }

    /**
     * Used by `_.orderBy` to compare multiple properties of a value to another
     * and stable sort them.
     *
     * If `orders` is unspecified, all values are sorted in ascending order. Otherwise,
     * specify an order of "desc" for descending or "asc" for ascending sort order
     * of corresponding values.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {boolean[]|string[]} orders The order to sort by for each property.
     * @returns {number} Returns the sort order indicator for `object`.
     */
    function compareMultiple(object, other, orders) {
      var index = -1,
          objCriteria = object.criteria,
          othCriteria = other.criteria,
          length = objCriteria.length,
          ordersLength = orders.length;

      while (++index < length) {
        var result = compareAscending(objCriteria[index], othCriteria[index]);
        if (result) {
          if (index >= ordersLength) {
            return result;
          }
          var order = orders[index];
          return result * (order == 'desc' ? -1 : 1);
        }
      }
      // Fixes an `Array#sort` bug in the JS engine embedded in Adobe applications
      // that causes it, under certain circumstances, to provide the same value for
      // `object` and `other`. See https://github.com/jashkenas/underscore/pull/1247
      // for more details.
      //
      // This also ensures a stable sort in V8 and other engines.
      // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.
      return object.index - other.index;
    }

    /**
     * Creates an array that is the composition of partially applied arguments,
     * placeholders, and provided arguments into a single array of arguments.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to prepend to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgs(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersLength = holders.length,
          leftIndex = -1,
          leftLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(leftLength + rangeLength),
          isUncurried = !isCurried;

      while (++leftIndex < leftLength) {
        result[leftIndex] = partials[leftIndex];
      }
      while (++argsIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[holders[argsIndex]] = args[argsIndex];
        }
      }
      while (rangeLength--) {
        result[leftIndex++] = args[argsIndex++];
      }
      return result;
    }

    /**
     * This function is like `composeArgs` except that the arguments composition
     * is tailored for `_.partialRight`.
     *
     * @private
     * @param {Array} args The provided arguments.
     * @param {Array} partials The arguments to append to those provided.
     * @param {Array} holders The `partials` placeholder indexes.
     * @params {boolean} [isCurried] Specify composing for a curried function.
     * @returns {Array} Returns the new array of composed arguments.
     */
    function composeArgsRight(args, partials, holders, isCurried) {
      var argsIndex = -1,
          argsLength = args.length,
          holdersIndex = -1,
          holdersLength = holders.length,
          rightIndex = -1,
          rightLength = partials.length,
          rangeLength = nativeMax(argsLength - holdersLength, 0),
          result = Array(rangeLength + rightLength),
          isUncurried = !isCurried;

      while (++argsIndex < rangeLength) {
        result[argsIndex] = args[argsIndex];
      }
      var offset = argsIndex;
      while (++rightIndex < rightLength) {
        result[offset + rightIndex] = partials[rightIndex];
      }
      while (++holdersIndex < holdersLength) {
        if (isUncurried || argsIndex < argsLength) {
          result[offset + holders[holdersIndex]] = args[argsIndex++];
        }
      }
      return result;
    }

    /**
     * Copies the values of `source` to `array`.
     *
     * @private
     * @param {Array} source The array to copy values from.
     * @param {Array} [array=[]] The array to copy values to.
     * @returns {Array} Returns `array`.
     */
    function copyArray(source, array) {
      var index = -1,
          length = source.length;

      array || (array = Array(length));
      while (++index < length) {
        array[index] = source[index];
      }
      return array;
    }

    /**
     * Copies properties of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy properties from.
     * @param {Array} props The property identifiers to copy.
     * @param {Object} [object={}] The object to copy properties to.
     * @param {Function} [customizer] The function to customize copied values.
     * @returns {Object} Returns `object`.
     */
    function copyObject(source, props, object, customizer) {
      var isNew = !object;
      object || (object = {});

      var index = -1,
          length = props.length;

      while (++index < length) {
        var key = props[index];

        var newValue = customizer
          ? customizer(object[key], source[key], key, object, source)
          : undefined;

        if (newValue === undefined) {
          newValue = source[key];
        }
        if (isNew) {
          baseAssignValue(object, key, newValue);
        } else {
          assignValue(object, key, newValue);
        }
      }
      return object;
    }

    /**
     * Copies own symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbols(source, object) {
      return copyObject(source, getSymbols(source), object);
    }

    /**
     * Copies own and inherited symbols of `source` to `object`.
     *
     * @private
     * @param {Object} source The object to copy symbols from.
     * @param {Object} [object={}] The object to copy symbols to.
     * @returns {Object} Returns `object`.
     */
    function copySymbolsIn(source, object) {
      return copyObject(source, getSymbolsIn(source), object);
    }

    /**
     * Creates a function like `_.groupBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} [initializer] The accumulator object initializer.
     * @returns {Function} Returns the new aggregator function.
     */
    function createAggregator(setter, initializer) {
      return function(collection, iteratee) {
        var func = isArray(collection) ? arrayAggregator : baseAggregator,
            accumulator = initializer ? initializer() : {};

        return func(collection, setter, getIteratee(iteratee, 2), accumulator);
      };
    }

    /**
     * Creates a function like `_.assign`.
     *
     * @private
     * @param {Function} assigner The function to assign values.
     * @returns {Function} Returns the new assigner function.
     */
    function createAssigner(assigner) {
      return baseRest(function(object, sources) {
        var index = -1,
            length = sources.length,
            customizer = length > 1 ? sources[length - 1] : undefined,
            guard = length > 2 ? sources[2] : undefined;

        customizer = (assigner.length > 3 && typeof customizer == 'function')
          ? (length--, customizer)
          : undefined;

        if (guard && isIterateeCall(sources[0], sources[1], guard)) {
          customizer = length < 3 ? undefined : customizer;
          length = 1;
        }
        object = Object(object);
        while (++index < length) {
          var source = sources[index];
          if (source) {
            assigner(object, source, index, customizer);
          }
        }
        return object;
      });
    }

    /**
     * Creates a `baseEach` or `baseEachRight` function.
     *
     * @private
     * @param {Function} eachFunc The function to iterate over a collection.
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseEach(eachFunc, fromRight) {
      return function(collection, iteratee) {
        if (collection == null) {
          return collection;
        }
        if (!isArrayLike(collection)) {
          return eachFunc(collection, iteratee);
        }
        var length = collection.length,
            index = fromRight ? length : -1,
            iterable = Object(collection);

        while ((fromRight ? index-- : ++index < length)) {
          if (iteratee(iterable[index], index, iterable) === false) {
            break;
          }
        }
        return collection;
      };
    }

    /**
     * Creates a base function for methods like `_.forIn` and `_.forOwn`.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new base function.
     */
    function createBaseFor(fromRight) {
      return function(object, iteratee, keysFunc) {
        var index = -1,
            iterable = Object(object),
            props = keysFunc(object),
            length = props.length;

        while (length--) {
          var key = props[fromRight ? length : ++index];
          if (iteratee(iterable[key], key, iterable) === false) {
            break;
          }
        }
        return object;
      };
    }

    /**
     * Creates a function that wraps `func` to invoke it with the optional `this`
     * binding of `thisArg`.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createBind(func, bitmask, thisArg) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return fn.apply(isBind ? thisArg : this, arguments);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.lowerFirst`.
     *
     * @private
     * @param {string} methodName The name of the `String` case method to use.
     * @returns {Function} Returns the new case function.
     */
    function createCaseFirst(methodName) {
      return function(string) {
        string = toString(string);

        var strSymbols = hasUnicode(string)
          ? stringToArray(string)
          : undefined;

        var chr = strSymbols
          ? strSymbols[0]
          : string.charAt(0);

        var trailing = strSymbols
          ? castSlice(strSymbols, 1).join('')
          : string.slice(1);

        return chr[methodName]() + trailing;
      };
    }

    /**
     * Creates a function like `_.camelCase`.
     *
     * @private
     * @param {Function} callback The function to combine each word.
     * @returns {Function} Returns the new compounder function.
     */
    function createCompounder(callback) {
      return function(string) {
        return arrayReduce(words(deburr(string).replace(reApos, '')), callback, '');
      };
    }

    /**
     * Creates a function that produces an instance of `Ctor` regardless of
     * whether it was invoked as part of a `new` expression or by `call` or `apply`.
     *
     * @private
     * @param {Function} Ctor The constructor to wrap.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCtor(Ctor) {
      return function() {
        // Use a `switch` statement to work with class constructors. See
        // http://ecma-international.org/ecma-262/7.0/#sec-ecmascript-function-objects-call-thisargument-argumentslist
        // for more details.
        var args = arguments;
        switch (args.length) {
          case 0: return new Ctor;
          case 1: return new Ctor(args[0]);
          case 2: return new Ctor(args[0], args[1]);
          case 3: return new Ctor(args[0], args[1], args[2]);
          case 4: return new Ctor(args[0], args[1], args[2], args[3]);
          case 5: return new Ctor(args[0], args[1], args[2], args[3], args[4]);
          case 6: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5]);
          case 7: return new Ctor(args[0], args[1], args[2], args[3], args[4], args[5], args[6]);
        }
        var thisBinding = baseCreate(Ctor.prototype),
            result = Ctor.apply(thisBinding, args);

        // Mimic the constructor's `return` behavior.
        // See https://es5.github.io/#x13.2.2 for more details.
        return isObject(result) ? result : thisBinding;
      };
    }

    /**
     * Creates a function that wraps `func` to enable currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {number} arity The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createCurry(func, bitmask, arity) {
      var Ctor = createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length,
            placeholder = getHolder(wrapper);

        while (index--) {
          args[index] = arguments[index];
        }
        var holders = (length < 3 && args[0] !== placeholder && args[length - 1] !== placeholder)
          ? []
          : replaceHolders(args, placeholder);

        length -= holders.length;
        if (length < arity) {
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, undefined,
            args, holders, undefined, undefined, arity - length);
        }
        var fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;
        return apply(fn, this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.find` or `_.findLast` function.
     *
     * @private
     * @param {Function} findIndexFunc The function to find the collection index.
     * @returns {Function} Returns the new find function.
     */
    function createFind(findIndexFunc) {
      return function(collection, predicate, fromIndex) {
        var iterable = Object(collection);
        if (!isArrayLike(collection)) {
          var iteratee = getIteratee(predicate, 3);
          collection = keys(collection);
          predicate = function(key) { return iteratee(iterable[key], key, iterable); };
        }
        var index = findIndexFunc(collection, predicate, fromIndex);
        return index > -1 ? iterable[iteratee ? collection[index] : index] : undefined;
      };
    }

    /**
     * Creates a `_.flow` or `_.flowRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new flow function.
     */
    function createFlow(fromRight) {
      return flatRest(function(funcs) {
        var length = funcs.length,
            index = length,
            prereq = LodashWrapper.prototype.thru;

        if (fromRight) {
          funcs.reverse();
        }
        while (index--) {
          var func = funcs[index];
          if (typeof func != 'function') {
            throw new TypeError(FUNC_ERROR_TEXT);
          }
          if (prereq && !wrapper && getFuncName(func) == 'wrapper') {
            var wrapper = new LodashWrapper([], true);
          }
        }
        index = wrapper ? index : length;
        while (++index < length) {
          func = funcs[index];

          var funcName = getFuncName(func),
              data = funcName == 'wrapper' ? getData(func) : undefined;

          if (data && isLaziable(data[0]) &&
                data[1] == (WRAP_ARY_FLAG | WRAP_CURRY_FLAG | WRAP_PARTIAL_FLAG | WRAP_REARG_FLAG) &&
                !data[4].length && data[9] == 1
              ) {
            wrapper = wrapper[getFuncName(data[0])].apply(wrapper, data[3]);
          } else {
            wrapper = (func.length == 1 && isLaziable(func))
              ? wrapper[funcName]()
              : wrapper.thru(func);
          }
        }
        return function() {
          var args = arguments,
              value = args[0];

          if (wrapper && args.length == 1 && isArray(value)) {
            return wrapper.plant(value).value();
          }
          var index = 0,
              result = length ? funcs[index].apply(this, args) : value;

          while (++index < length) {
            result = funcs[index].call(this, result);
          }
          return result;
        };
      });
    }

    /**
     * Creates a function that wraps `func` to invoke it with optional `this`
     * binding of `thisArg`, partial application, and currying.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [partialsRight] The arguments to append to those provided
     *  to the new function.
     * @param {Array} [holdersRight] The `partialsRight` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createHybrid(func, bitmask, thisArg, partials, holders, partialsRight, holdersRight, argPos, ary, arity) {
      var isAry = bitmask & WRAP_ARY_FLAG,
          isBind = bitmask & WRAP_BIND_FLAG,
          isBindKey = bitmask & WRAP_BIND_KEY_FLAG,
          isCurried = bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG),
          isFlip = bitmask & WRAP_FLIP_FLAG,
          Ctor = isBindKey ? undefined : createCtor(func);

      function wrapper() {
        var length = arguments.length,
            args = Array(length),
            index = length;

        while (index--) {
          args[index] = arguments[index];
        }
        if (isCurried) {
          var placeholder = getHolder(wrapper),
              holdersCount = countHolders(args, placeholder);
        }
        if (partials) {
          args = composeArgs(args, partials, holders, isCurried);
        }
        if (partialsRight) {
          args = composeArgsRight(args, partialsRight, holdersRight, isCurried);
        }
        length -= holdersCount;
        if (isCurried && length < arity) {
          var newHolders = replaceHolders(args, placeholder);
          return createRecurry(
            func, bitmask, createHybrid, wrapper.placeholder, thisArg,
            args, newHolders, argPos, ary, arity - length
          );
        }
        var thisBinding = isBind ? thisArg : this,
            fn = isBindKey ? thisBinding[func] : func;

        length = args.length;
        if (argPos) {
          args = reorder(args, argPos);
        } else if (isFlip && length > 1) {
          args.reverse();
        }
        if (isAry && ary < length) {
          args.length = ary;
        }
        if (this && this !== root && this instanceof wrapper) {
          fn = Ctor || createCtor(fn);
        }
        return fn.apply(thisBinding, args);
      }
      return wrapper;
    }

    /**
     * Creates a function like `_.invertBy`.
     *
     * @private
     * @param {Function} setter The function to set accumulator values.
     * @param {Function} toIteratee The function to resolve iteratees.
     * @returns {Function} Returns the new inverter function.
     */
    function createInverter(setter, toIteratee) {
      return function(object, iteratee) {
        return baseInverter(object, setter, toIteratee(iteratee), {});
      };
    }

    /**
     * Creates a function that performs a mathematical operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @param {number} [defaultValue] The value used for `undefined` arguments.
     * @returns {Function} Returns the new mathematical operation function.
     */
    function createMathOperation(operator, defaultValue) {
      return function(value, other) {
        var result;
        if (value === undefined && other === undefined) {
          return defaultValue;
        }
        if (value !== undefined) {
          result = value;
        }
        if (other !== undefined) {
          if (result === undefined) {
            return other;
          }
          if (typeof value == 'string' || typeof other == 'string') {
            value = baseToString(value);
            other = baseToString(other);
          } else {
            value = baseToNumber(value);
            other = baseToNumber(other);
          }
          result = operator(value, other);
        }
        return result;
      };
    }

    /**
     * Creates a function like `_.over`.
     *
     * @private
     * @param {Function} arrayFunc The function to iterate over iteratees.
     * @returns {Function} Returns the new over function.
     */
    function createOver(arrayFunc) {
      return flatRest(function(iteratees) {
        iteratees = arrayMap(iteratees, baseUnary(getIteratee()));
        return baseRest(function(args) {
          var thisArg = this;
          return arrayFunc(iteratees, function(iteratee) {
            return apply(iteratee, thisArg, args);
          });
        });
      });
    }

    /**
     * Creates the padding for `string` based on `length`. The `chars` string
     * is truncated if the number of characters exceeds `length`.
     *
     * @private
     * @param {number} length The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padding for `string`.
     */
    function createPadding(length, chars) {
      chars = chars === undefined ? ' ' : baseToString(chars);

      var charsLength = chars.length;
      if (charsLength < 2) {
        return charsLength ? baseRepeat(chars, length) : chars;
      }
      var result = baseRepeat(chars, nativeCeil(length / stringSize(chars)));
      return hasUnicode(chars)
        ? castSlice(stringToArray(result), 0, length).join('')
        : result.slice(0, length);
    }

    /**
     * Creates a function that wraps `func` to invoke it with the `this` binding
     * of `thisArg` and `partials` prepended to the arguments it receives.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {Array} partials The arguments to prepend to those provided to
     *  the new function.
     * @returns {Function} Returns the new wrapped function.
     */
    function createPartial(func, bitmask, thisArg, partials) {
      var isBind = bitmask & WRAP_BIND_FLAG,
          Ctor = createCtor(func);

      function wrapper() {
        var argsIndex = -1,
            argsLength = arguments.length,
            leftIndex = -1,
            leftLength = partials.length,
            args = Array(leftLength + argsLength),
            fn = (this && this !== root && this instanceof wrapper) ? Ctor : func;

        while (++leftIndex < leftLength) {
          args[leftIndex] = partials[leftIndex];
        }
        while (argsLength--) {
          args[leftIndex++] = arguments[++argsIndex];
        }
        return apply(fn, isBind ? thisArg : this, args);
      }
      return wrapper;
    }

    /**
     * Creates a `_.range` or `_.rangeRight` function.
     *
     * @private
     * @param {boolean} [fromRight] Specify iterating from right to left.
     * @returns {Function} Returns the new range function.
     */
    function createRange(fromRight) {
      return function(start, end, step) {
        if (step && typeof step != 'number' && isIterateeCall(start, end, step)) {
          end = step = undefined;
        }
        // Ensure the sign of `-0` is preserved.
        start = toFinite(start);
        if (end === undefined) {
          end = start;
          start = 0;
        } else {
          end = toFinite(end);
        }
        step = step === undefined ? (start < end ? 1 : -1) : toFinite(step);
        return baseRange(start, end, step, fromRight);
      };
    }

    /**
     * Creates a function that performs a relational operation on two values.
     *
     * @private
     * @param {Function} operator The function to perform the operation.
     * @returns {Function} Returns the new relational operation function.
     */
    function createRelationalOperation(operator) {
      return function(value, other) {
        if (!(typeof value == 'string' && typeof other == 'string')) {
          value = toNumber(value);
          other = toNumber(other);
        }
        return operator(value, other);
      };
    }

    /**
     * Creates a function that wraps `func` to continue currying.
     *
     * @private
     * @param {Function} func The function to wrap.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @param {Function} wrapFunc The function to create the `func` wrapper.
     * @param {*} placeholder The placeholder value.
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to prepend to those provided to
     *  the new function.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createRecurry(func, bitmask, wrapFunc, placeholder, thisArg, partials, holders, argPos, ary, arity) {
      var isCurry = bitmask & WRAP_CURRY_FLAG,
          newHolders = isCurry ? holders : undefined,
          newHoldersRight = isCurry ? undefined : holders,
          newPartials = isCurry ? partials : undefined,
          newPartialsRight = isCurry ? undefined : partials;

      bitmask |= (isCurry ? WRAP_PARTIAL_FLAG : WRAP_PARTIAL_RIGHT_FLAG);
      bitmask &= ~(isCurry ? WRAP_PARTIAL_RIGHT_FLAG : WRAP_PARTIAL_FLAG);

      if (!(bitmask & WRAP_CURRY_BOUND_FLAG)) {
        bitmask &= ~(WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG);
      }
      var newData = [
        func, bitmask, thisArg, newPartials, newHolders, newPartialsRight,
        newHoldersRight, argPos, ary, arity
      ];

      var result = wrapFunc.apply(undefined, newData);
      if (isLaziable(func)) {
        setData(result, newData);
      }
      result.placeholder = placeholder;
      return setWrapToString(result, func, bitmask);
    }

    /**
     * Creates a function like `_.round`.
     *
     * @private
     * @param {string} methodName The name of the `Math` method to use when rounding.
     * @returns {Function} Returns the new round function.
     */
    function createRound(methodName) {
      var func = Math[methodName];
      return function(number, precision) {
        number = toNumber(number);
        precision = precision == null ? 0 : nativeMin(toInteger(precision), 292);
        if (precision && nativeIsFinite(number)) {
          // Shift with exponential notation to avoid floating-point issues.
          // See [MDN](https://mdn.io/round#Examples) for more details.
          var pair = (toString(number) + 'e').split('e'),
              value = func(pair[0] + 'e' + (+pair[1] + precision));

          pair = (toString(value) + 'e').split('e');
          return +(pair[0] + 'e' + (+pair[1] - precision));
        }
        return func(number);
      };
    }

    /**
     * Creates a set object of `values`.
     *
     * @private
     * @param {Array} values The values to add to the set.
     * @returns {Object} Returns the new set.
     */
    var createSet = !(Set && (1 / setToArray(new Set([,-0]))[1]) == INFINITY) ? noop : function(values) {
      return new Set(values);
    };

    /**
     * Creates a `_.toPairs` or `_.toPairsIn` function.
     *
     * @private
     * @param {Function} keysFunc The function to get the keys of a given object.
     * @returns {Function} Returns the new pairs function.
     */
    function createToPairs(keysFunc) {
      return function(object) {
        var tag = getTag(object);
        if (tag == mapTag) {
          return mapToArray(object);
        }
        if (tag == setTag) {
          return setToPairs(object);
        }
        return baseToPairs(object, keysFunc(object));
      };
    }

    /**
     * Creates a function that either curries or invokes `func` with optional
     * `this` binding and partially applied arguments.
     *
     * @private
     * @param {Function|string} func The function or method name to wrap.
     * @param {number} bitmask The bitmask flags.
     *    1 - `_.bind`
     *    2 - `_.bindKey`
     *    4 - `_.curry` or `_.curryRight` of a bound function
     *    8 - `_.curry`
     *   16 - `_.curryRight`
     *   32 - `_.partial`
     *   64 - `_.partialRight`
     *  128 - `_.rearg`
     *  256 - `_.ary`
     *  512 - `_.flip`
     * @param {*} [thisArg] The `this` binding of `func`.
     * @param {Array} [partials] The arguments to be partially applied.
     * @param {Array} [holders] The `partials` placeholder indexes.
     * @param {Array} [argPos] The argument positions of the new function.
     * @param {number} [ary] The arity cap of `func`.
     * @param {number} [arity] The arity of `func`.
     * @returns {Function} Returns the new wrapped function.
     */
    function createWrap(func, bitmask, thisArg, partials, holders, argPos, ary, arity) {
      var isBindKey = bitmask & WRAP_BIND_KEY_FLAG;
      if (!isBindKey && typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var length = partials ? partials.length : 0;
      if (!length) {
        bitmask &= ~(WRAP_PARTIAL_FLAG | WRAP_PARTIAL_RIGHT_FLAG);
        partials = holders = undefined;
      }
      ary = ary === undefined ? ary : nativeMax(toInteger(ary), 0);
      arity = arity === undefined ? arity : toInteger(arity);
      length -= holders ? holders.length : 0;

      if (bitmask & WRAP_PARTIAL_RIGHT_FLAG) {
        var partialsRight = partials,
            holdersRight = holders;

        partials = holders = undefined;
      }
      var data = isBindKey ? undefined : getData(func);

      var newData = [
        func, bitmask, thisArg, partials, holders, partialsRight, holdersRight,
        argPos, ary, arity
      ];

      if (data) {
        mergeData(newData, data);
      }
      func = newData[0];
      bitmask = newData[1];
      thisArg = newData[2];
      partials = newData[3];
      holders = newData[4];
      arity = newData[9] = newData[9] === undefined
        ? (isBindKey ? 0 : func.length)
        : nativeMax(newData[9] - length, 0);

      if (!arity && bitmask & (WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG)) {
        bitmask &= ~(WRAP_CURRY_FLAG | WRAP_CURRY_RIGHT_FLAG);
      }
      if (!bitmask || bitmask == WRAP_BIND_FLAG) {
        var result = createBind(func, bitmask, thisArg);
      } else if (bitmask == WRAP_CURRY_FLAG || bitmask == WRAP_CURRY_RIGHT_FLAG) {
        result = createCurry(func, bitmask, arity);
      } else if ((bitmask == WRAP_PARTIAL_FLAG || bitmask == (WRAP_BIND_FLAG | WRAP_PARTIAL_FLAG)) && !holders.length) {
        result = createPartial(func, bitmask, thisArg, partials);
      } else {
        result = createHybrid.apply(undefined, newData);
      }
      var setter = data ? baseSetData : setData;
      return setWrapToString(setter(result, newData), func, bitmask);
    }

    /**
     * Used by `_.defaults` to customize its `_.assignIn` use to assign properties
     * of source objects to the destination object for all destination properties
     * that resolve to `undefined`.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to assign.
     * @param {Object} object The parent object of `objValue`.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsAssignIn(objValue, srcValue, key, object) {
      if (objValue === undefined ||
          (eq(objValue, objectProto[key]) && !hasOwnProperty.call(object, key))) {
        return srcValue;
      }
      return objValue;
    }

    /**
     * Used by `_.defaultsDeep` to customize its `_.merge` use to merge source
     * objects into destination objects that are passed thru.
     *
     * @private
     * @param {*} objValue The destination value.
     * @param {*} srcValue The source value.
     * @param {string} key The key of the property to merge.
     * @param {Object} object The parent object of `objValue`.
     * @param {Object} source The parent object of `srcValue`.
     * @param {Object} [stack] Tracks traversed source values and their merged
     *  counterparts.
     * @returns {*} Returns the value to assign.
     */
    function customDefaultsMerge(objValue, srcValue, key, object, source, stack) {
      if (isObject(objValue) && isObject(srcValue)) {
        // Recursively merge objects and arrays (susceptible to call stack limits).
        stack.set(srcValue, objValue);
        baseMerge(objValue, srcValue, undefined, customDefaultsMerge, stack);
        stack['delete'](srcValue);
      }
      return objValue;
    }

    /**
     * Used by `_.omit` to customize its `_.cloneDeep` use to only clone plain
     * objects.
     *
     * @private
     * @param {*} value The value to inspect.
     * @param {string} key The key of the property to inspect.
     * @returns {*} Returns the uncloned value or `undefined` to defer cloning to `_.cloneDeep`.
     */
    function customOmitClone(value) {
      return isPlainObject(value) ? undefined : value;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for arrays with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Array} array The array to compare.
     * @param {Array} other The other array to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `array` and `other` objects.
     * @returns {boolean} Returns `true` if the arrays are equivalent, else `false`.
     */
    function equalArrays(array, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          arrLength = array.length,
          othLength = other.length;

      if (arrLength != othLength && !(isPartial && othLength > arrLength)) {
        return false;
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(array);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var index = -1,
          result = true,
          seen = (bitmask & COMPARE_UNORDERED_FLAG) ? new SetCache : undefined;

      stack.set(array, other);
      stack.set(other, array);

      // Ignore non-index properties.
      while (++index < arrLength) {
        var arrValue = array[index],
            othValue = other[index];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, arrValue, index, other, array, stack)
            : customizer(arrValue, othValue, index, array, other, stack);
        }
        if (compared !== undefined) {
          if (compared) {
            continue;
          }
          result = false;
          break;
        }
        // Recursively compare arrays (susceptible to call stack limits).
        if (seen) {
          if (!arraySome(other, function(othValue, othIndex) {
                if (!cacheHas(seen, othIndex) &&
                    (arrValue === othValue || equalFunc(arrValue, othValue, bitmask, customizer, stack))) {
                  return seen.push(othIndex);
                }
              })) {
            result = false;
            break;
          }
        } else if (!(
              arrValue === othValue ||
                equalFunc(arrValue, othValue, bitmask, customizer, stack)
            )) {
          result = false;
          break;
        }
      }
      stack['delete'](array);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for comparing objects of
     * the same `toStringTag`.
     *
     * **Note:** This function only supports comparing values with tags of
     * `Boolean`, `Date`, `Error`, `Number`, `RegExp`, or `String`.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {string} tag The `toStringTag` of the objects to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalByTag(object, other, tag, bitmask, customizer, equalFunc, stack) {
      switch (tag) {
        case dataViewTag:
          if ((object.byteLength != other.byteLength) ||
              (object.byteOffset != other.byteOffset)) {
            return false;
          }
          object = object.buffer;
          other = other.buffer;

        case arrayBufferTag:
          if ((object.byteLength != other.byteLength) ||
              !equalFunc(new Uint8Array(object), new Uint8Array(other))) {
            return false;
          }
          return true;

        case boolTag:
        case dateTag:
        case numberTag:
          // Coerce booleans to `1` or `0` and dates to milliseconds.
          // Invalid dates are coerced to `NaN`.
          return eq(+object, +other);

        case errorTag:
          return object.name == other.name && object.message == other.message;

        case regexpTag:
        case stringTag:
          // Coerce regexes to strings and treat strings, primitives and objects,
          // as equal. See http://www.ecma-international.org/ecma-262/7.0/#sec-regexp.prototype.tostring
          // for more details.
          return object == (other + '');

        case mapTag:
          var convert = mapToArray;

        case setTag:
          var isPartial = bitmask & COMPARE_PARTIAL_FLAG;
          convert || (convert = setToArray);

          if (object.size != other.size && !isPartial) {
            return false;
          }
          // Assume cyclic values are equal.
          var stacked = stack.get(object);
          if (stacked) {
            return stacked == other;
          }
          bitmask |= COMPARE_UNORDERED_FLAG;

          // Recursively compare objects (susceptible to call stack limits).
          stack.set(object, other);
          var result = equalArrays(convert(object), convert(other), bitmask, customizer, equalFunc, stack);
          stack['delete'](object);
          return result;

        case symbolTag:
          if (symbolValueOf) {
            return symbolValueOf.call(object) == symbolValueOf.call(other);
          }
      }
      return false;
    }

    /**
     * A specialized version of `baseIsEqualDeep` for objects with support for
     * partial deep comparisons.
     *
     * @private
     * @param {Object} object The object to compare.
     * @param {Object} other The other object to compare.
     * @param {number} bitmask The bitmask flags. See `baseIsEqual` for more details.
     * @param {Function} customizer The function to customize comparisons.
     * @param {Function} equalFunc The function to determine equivalents of values.
     * @param {Object} stack Tracks traversed `object` and `other` objects.
     * @returns {boolean} Returns `true` if the objects are equivalent, else `false`.
     */
    function equalObjects(object, other, bitmask, customizer, equalFunc, stack) {
      var isPartial = bitmask & COMPARE_PARTIAL_FLAG,
          objProps = getAllKeys(object),
          objLength = objProps.length,
          othProps = getAllKeys(other),
          othLength = othProps.length;

      if (objLength != othLength && !isPartial) {
        return false;
      }
      var index = objLength;
      while (index--) {
        var key = objProps[index];
        if (!(isPartial ? key in other : hasOwnProperty.call(other, key))) {
          return false;
        }
      }
      // Assume cyclic values are equal.
      var stacked = stack.get(object);
      if (stacked && stack.get(other)) {
        return stacked == other;
      }
      var result = true;
      stack.set(object, other);
      stack.set(other, object);

      var skipCtor = isPartial;
      while (++index < objLength) {
        key = objProps[index];
        var objValue = object[key],
            othValue = other[key];

        if (customizer) {
          var compared = isPartial
            ? customizer(othValue, objValue, key, other, object, stack)
            : customizer(objValue, othValue, key, object, other, stack);
        }
        // Recursively compare objects (susceptible to call stack limits).
        if (!(compared === undefined
              ? (objValue === othValue || equalFunc(objValue, othValue, bitmask, customizer, stack))
              : compared
            )) {
          result = false;
          break;
        }
        skipCtor || (skipCtor = key == 'constructor');
      }
      if (result && !skipCtor) {
        var objCtor = object.constructor,
            othCtor = other.constructor;

        // Non `Object` object instances with different constructors are not equal.
        if (objCtor != othCtor &&
            ('constructor' in object && 'constructor' in other) &&
            !(typeof objCtor == 'function' && objCtor instanceof objCtor &&
              typeof othCtor == 'function' && othCtor instanceof othCtor)) {
          result = false;
        }
      }
      stack['delete'](object);
      stack['delete'](other);
      return result;
    }

    /**
     * A specialized version of `baseRest` which flattens the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @returns {Function} Returns the new function.
     */
    function flatRest(func) {
      return setToString(overRest(func, undefined, flatten), func + '');
    }

    /**
     * Creates an array of own enumerable property names and symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeys(object) {
      return baseGetAllKeys(object, keys, getSymbols);
    }

    /**
     * Creates an array of own and inherited enumerable property names and
     * symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names and symbols.
     */
    function getAllKeysIn(object) {
      return baseGetAllKeys(object, keysIn, getSymbolsIn);
    }

    /**
     * Gets metadata for `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {*} Returns the metadata for `func`.
     */
    var getData = !metaMap ? noop : function(func) {
      return metaMap.get(func);
    };

    /**
     * Gets the name of `func`.
     *
     * @private
     * @param {Function} func The function to query.
     * @returns {string} Returns the function name.
     */
    function getFuncName(func) {
      var result = (func.name + ''),
          array = realNames[result],
          length = hasOwnProperty.call(realNames, result) ? array.length : 0;

      while (length--) {
        var data = array[length],
            otherFunc = data.func;
        if (otherFunc == null || otherFunc == func) {
          return data.name;
        }
      }
      return result;
    }

    /**
     * Gets the argument placeholder value for `func`.
     *
     * @private
     * @param {Function} func The function to inspect.
     * @returns {*} Returns the placeholder value.
     */
    function getHolder(func) {
      var object = hasOwnProperty.call(lodash, 'placeholder') ? lodash : func;
      return object.placeholder;
    }

    /**
     * Gets the appropriate "iteratee" function. If `_.iteratee` is customized,
     * this function returns the custom method, otherwise it returns `baseIteratee`.
     * If arguments are provided, the chosen function is invoked with them and
     * its result is returned.
     *
     * @private
     * @param {*} [value] The value to convert to an iteratee.
     * @param {number} [arity] The arity of the created iteratee.
     * @returns {Function} Returns the chosen function or its result.
     */
    function getIteratee() {
      var result = lodash.iteratee || iteratee;
      result = result === iteratee ? baseIteratee : result;
      return arguments.length ? result(arguments[0], arguments[1]) : result;
    }

    /**
     * Gets the data for `map`.
     *
     * @private
     * @param {Object} map The map to query.
     * @param {string} key The reference key.
     * @returns {*} Returns the map data.
     */
    function getMapData(map, key) {
      var data = map.__data__;
      return isKeyable(key)
        ? data[typeof key == 'string' ? 'string' : 'hash']
        : data.map;
    }

    /**
     * Gets the property names, values, and compare flags of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the match data of `object`.
     */
    function getMatchData(object) {
      var result = keys(object),
          length = result.length;

      while (length--) {
        var key = result[length],
            value = object[key];

        result[length] = [key, value, isStrictComparable(value)];
      }
      return result;
    }

    /**
     * Gets the native function at `key` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the method to get.
     * @returns {*} Returns the function if it's native, else `undefined`.
     */
    function getNative(object, key) {
      var value = getValue(object, key);
      return baseIsNative(value) ? value : undefined;
    }

    /**
     * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the raw `toStringTag`.
     */
    function getRawTag(value) {
      var isOwn = hasOwnProperty.call(value, symToStringTag),
          tag = value[symToStringTag];

      try {
        value[symToStringTag] = undefined;
        var unmasked = true;
      } catch (e) {}

      var result = nativeObjectToString.call(value);
      if (unmasked) {
        if (isOwn) {
          value[symToStringTag] = tag;
        } else {
          delete value[symToStringTag];
        }
      }
      return result;
    }

    /**
     * Creates an array of the own enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbols = !nativeGetSymbols ? stubArray : function(object) {
      if (object == null) {
        return [];
      }
      object = Object(object);
      return arrayFilter(nativeGetSymbols(object), function(symbol) {
        return propertyIsEnumerable.call(object, symbol);
      });
    };

    /**
     * Creates an array of the own and inherited enumerable symbols of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of symbols.
     */
    var getSymbolsIn = !nativeGetSymbols ? stubArray : function(object) {
      var result = [];
      while (object) {
        arrayPush(result, getSymbols(object));
        object = getPrototype(object);
      }
      return result;
    };

    /**
     * Gets the `toStringTag` of `value`.
     *
     * @private
     * @param {*} value The value to query.
     * @returns {string} Returns the `toStringTag`.
     */
    var getTag = baseGetTag;

    // Fallback for data views, maps, sets, and weak maps in IE 11 and promises in Node.js < 6.
    if ((DataView && getTag(new DataView(new ArrayBuffer(1))) != dataViewTag) ||
        (Map && getTag(new Map) != mapTag) ||
        (Promise && getTag(Promise.resolve()) != promiseTag) ||
        (Set && getTag(new Set) != setTag) ||
        (WeakMap && getTag(new WeakMap) != weakMapTag)) {
      getTag = function(value) {
        var result = baseGetTag(value),
            Ctor = result == objectTag ? value.constructor : undefined,
            ctorString = Ctor ? toSource(Ctor) : '';

        if (ctorString) {
          switch (ctorString) {
            case dataViewCtorString: return dataViewTag;
            case mapCtorString: return mapTag;
            case promiseCtorString: return promiseTag;
            case setCtorString: return setTag;
            case weakMapCtorString: return weakMapTag;
          }
        }
        return result;
      };
    }

    /**
     * Gets the view, applying any `transforms` to the `start` and `end` positions.
     *
     * @private
     * @param {number} start The start of the view.
     * @param {number} end The end of the view.
     * @param {Array} transforms The transformations to apply to the view.
     * @returns {Object} Returns an object containing the `start` and `end`
     *  positions of the view.
     */
    function getView(start, end, transforms) {
      var index = -1,
          length = transforms.length;

      while (++index < length) {
        var data = transforms[index],
            size = data.size;

        switch (data.type) {
          case 'drop':      start += size; break;
          case 'dropRight': end -= size; break;
          case 'take':      end = nativeMin(end, start + size); break;
          case 'takeRight': start = nativeMax(start, end - size); break;
        }
      }
      return { 'start': start, 'end': end };
    }

    /**
     * Extracts wrapper details from the `source` body comment.
     *
     * @private
     * @param {string} source The source to inspect.
     * @returns {Array} Returns the wrapper details.
     */
    function getWrapDetails(source) {
      var match = source.match(reWrapDetails);
      return match ? match[1].split(reSplitDetails) : [];
    }

    /**
     * Checks if `path` exists on `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @param {Function} hasFunc The function to check properties.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     */
    function hasPath(object, path, hasFunc) {
      path = castPath(path, object);

      var index = -1,
          length = path.length,
          result = false;

      while (++index < length) {
        var key = toKey(path[index]);
        if (!(result = object != null && hasFunc(object, key))) {
          break;
        }
        object = object[key];
      }
      if (result || ++index != length) {
        return result;
      }
      length = object == null ? 0 : object.length;
      return !!length && isLength(length) && isIndex(key, length) &&
        (isArray(object) || isArguments(object));
    }

    /**
     * Initializes an array clone.
     *
     * @private
     * @param {Array} array The array to clone.
     * @returns {Array} Returns the initialized clone.
     */
    function initCloneArray(array) {
      var length = array.length,
          result = new array.constructor(length);

      // Add properties assigned by `RegExp#exec`.
      if (length && typeof array[0] == 'string' && hasOwnProperty.call(array, 'index')) {
        result.index = array.index;
        result.input = array.input;
      }
      return result;
    }

    /**
     * Initializes an object clone.
     *
     * @private
     * @param {Object} object The object to clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneObject(object) {
      return (typeof object.constructor == 'function' && !isPrototype(object))
        ? baseCreate(getPrototype(object))
        : {};
    }

    /**
     * Initializes an object clone based on its `toStringTag`.
     *
     * **Note:** This function only supports cloning values with tags of
     * `Boolean`, `Date`, `Error`, `Map`, `Number`, `RegExp`, `Set`, or `String`.
     *
     * @private
     * @param {Object} object The object to clone.
     * @param {string} tag The `toStringTag` of the object to clone.
     * @param {boolean} [isDeep] Specify a deep clone.
     * @returns {Object} Returns the initialized clone.
     */
    function initCloneByTag(object, tag, isDeep) {
      var Ctor = object.constructor;
      switch (tag) {
        case arrayBufferTag:
          return cloneArrayBuffer(object);

        case boolTag:
        case dateTag:
          return new Ctor(+object);

        case dataViewTag:
          return cloneDataView(object, isDeep);

        case float32Tag: case float64Tag:
        case int8Tag: case int16Tag: case int32Tag:
        case uint8Tag: case uint8ClampedTag: case uint16Tag: case uint32Tag:
          return cloneTypedArray(object, isDeep);

        case mapTag:
          return new Ctor;

        case numberTag:
        case stringTag:
          return new Ctor(object);

        case regexpTag:
          return cloneRegExp(object);

        case setTag:
          return new Ctor;

        case symbolTag:
          return cloneSymbol(object);
      }
    }

    /**
     * Inserts wrapper `details` in a comment at the top of the `source` body.
     *
     * @private
     * @param {string} source The source to modify.
     * @returns {Array} details The details to insert.
     * @returns {string} Returns the modified source.
     */
    function insertWrapDetails(source, details) {
      var length = details.length;
      if (!length) {
        return source;
      }
      var lastIndex = length - 1;
      details[lastIndex] = (length > 1 ? '& ' : '') + details[lastIndex];
      details = details.join(length > 2 ? ', ' : ' ');
      return source.replace(reWrapComment, '{\n/* [wrapped with ' + details + '] */\n');
    }

    /**
     * Checks if `value` is a flattenable `arguments` object or array.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is flattenable, else `false`.
     */
    function isFlattenable(value) {
      return isArray(value) || isArguments(value) ||
        !!(spreadableSymbol && value && value[spreadableSymbol]);
    }

    /**
     * Checks if `value` is a valid array-like index.
     *
     * @private
     * @param {*} value The value to check.
     * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.
     * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.
     */
    function isIndex(value, length) {
      var type = typeof value;
      length = length == null ? MAX_SAFE_INTEGER : length;

      return !!length &&
        (type == 'number' ||
          (type != 'symbol' && reIsUint.test(value))) &&
            (value > -1 && value % 1 == 0 && value < length);
    }

    /**
     * Checks if the given arguments are from an iteratee call.
     *
     * @private
     * @param {*} value The potential iteratee value argument.
     * @param {*} index The potential iteratee index or key argument.
     * @param {*} object The potential iteratee object argument.
     * @returns {boolean} Returns `true` if the arguments are from an iteratee call,
     *  else `false`.
     */
    function isIterateeCall(value, index, object) {
      if (!isObject(object)) {
        return false;
      }
      var type = typeof index;
      if (type == 'number'
            ? (isArrayLike(object) && isIndex(index, object.length))
            : (type == 'string' && index in object)
          ) {
        return eq(object[index], value);
      }
      return false;
    }

    /**
     * Checks if `value` is a property name and not a property path.
     *
     * @private
     * @param {*} value The value to check.
     * @param {Object} [object] The object to query keys on.
     * @returns {boolean} Returns `true` if `value` is a property name, else `false`.
     */
    function isKey(value, object) {
      if (isArray(value)) {
        return false;
      }
      var type = typeof value;
      if (type == 'number' || type == 'symbol' || type == 'boolean' ||
          value == null || isSymbol(value)) {
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    }

    /**
     * Checks if `value` is suitable for use as unique object key.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is suitable, else `false`.
     */
    function isKeyable(value) {
      var type = typeof value;
      return (type == 'string' || type == 'number' || type == 'symbol' || type == 'boolean')
        ? (value !== '__proto__')
        : (value === null);
    }

    /**
     * Checks if `func` has a lazy counterpart.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` has a lazy counterpart,
     *  else `false`.
     */
    function isLaziable(func) {
      var funcName = getFuncName(func),
          other = lodash[funcName];

      if (typeof other != 'function' || !(funcName in LazyWrapper.prototype)) {
        return false;
      }
      if (func === other) {
        return true;
      }
      var data = getData(other);
      return !!data && func === data[0];
    }

    /**
     * Checks if `func` has its source masked.
     *
     * @private
     * @param {Function} func The function to check.
     * @returns {boolean} Returns `true` if `func` is masked, else `false`.
     */
    function isMasked(func) {
      return !!maskSrcKey && (maskSrcKey in func);
    }

    /**
     * Checks if `func` is capable of being masked.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `func` is maskable, else `false`.
     */
    var isMaskable = coreJsData ? isFunction : stubFalse;

    /**
     * Checks if `value` is likely a prototype object.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a prototype, else `false`.
     */
    function isPrototype(value) {
      var Ctor = value && value.constructor,
          proto = (typeof Ctor == 'function' && Ctor.prototype) || objectProto;

      return value === proto;
    }

    /**
     * Checks if `value` is suitable for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` if suitable for strict
     *  equality comparisons, else `false`.
     */
    function isStrictComparable(value) {
      return value === value && !isObject(value);
    }

    /**
     * A specialized version of `matchesProperty` for source values suitable
     * for strict equality comparisons, i.e. `===`.
     *
     * @private
     * @param {string} key The key of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     */
    function matchesStrictComparable(key, srcValue) {
      return function(object) {
        if (object == null) {
          return false;
        }
        return object[key] === srcValue &&
          (srcValue !== undefined || (key in Object(object)));
      };
    }

    /**
     * A specialized version of `_.memoize` which clears the memoized function's
     * cache when it exceeds `MAX_MEMOIZE_SIZE`.
     *
     * @private
     * @param {Function} func The function to have its output memoized.
     * @returns {Function} Returns the new memoized function.
     */
    function memoizeCapped(func) {
      var result = memoize(func, function(key) {
        if (cache.size === MAX_MEMOIZE_SIZE) {
          cache.clear();
        }
        return key;
      });

      var cache = result.cache;
      return result;
    }

    /**
     * Merges the function metadata of `source` into `data`.
     *
     * Merging metadata reduces the number of wrappers used to invoke a function.
     * This is possible because methods like `_.bind`, `_.curry`, and `_.partial`
     * may be applied regardless of execution order. Methods like `_.ary` and
     * `_.rearg` modify function arguments, making the order in which they are
     * executed important, preventing the merging of metadata. However, we make
     * an exception for a safe combined case where curried functions have `_.ary`
     * and or `_.rearg` applied.
     *
     * @private
     * @param {Array} data The destination metadata.
     * @param {Array} source The source metadata.
     * @returns {Array} Returns `data`.
     */
    function mergeData(data, source) {
      var bitmask = data[1],
          srcBitmask = source[1],
          newBitmask = bitmask | srcBitmask,
          isCommon = newBitmask < (WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG | WRAP_ARY_FLAG);

      var isCombo =
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_CURRY_FLAG)) ||
        ((srcBitmask == WRAP_ARY_FLAG) && (bitmask == WRAP_REARG_FLAG) && (data[7].length <= source[8])) ||
        ((srcBitmask == (WRAP_ARY_FLAG | WRAP_REARG_FLAG)) && (source[7].length <= source[8]) && (bitmask == WRAP_CURRY_FLAG));

      // Exit early if metadata can't be merged.
      if (!(isCommon || isCombo)) {
        return data;
      }
      // Use source `thisArg` if available.
      if (srcBitmask & WRAP_BIND_FLAG) {
        data[2] = source[2];
        // Set when currying a bound function.
        newBitmask |= bitmask & WRAP_BIND_FLAG ? 0 : WRAP_CURRY_BOUND_FLAG;
      }
      // Compose partial arguments.
      var value = source[3];
      if (value) {
        var partials = data[3];
        data[3] = partials ? composeArgs(partials, value, source[4]) : value;
        data[4] = partials ? replaceHolders(data[3], PLACEHOLDER) : source[4];
      }
      // Compose partial right arguments.
      value = source[5];
      if (value) {
        partials = data[5];
        data[5] = partials ? composeArgsRight(partials, value, source[6]) : value;
        data[6] = partials ? replaceHolders(data[5], PLACEHOLDER) : source[6];
      }
      // Use source `argPos` if available.
      value = source[7];
      if (value) {
        data[7] = value;
      }
      // Use source `ary` if it's smaller.
      if (srcBitmask & WRAP_ARY_FLAG) {
        data[8] = data[8] == null ? source[8] : nativeMin(data[8], source[8]);
      }
      // Use source `arity` if one is not provided.
      if (data[9] == null) {
        data[9] = source[9];
      }
      // Use source `func` and merge bitmasks.
      data[0] = source[0];
      data[1] = newBitmask;

      return data;
    }

    /**
     * This function is like
     * [`Object.keys`](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * except that it includes inherited enumerable properties.
     *
     * @private
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     */
    function nativeKeysIn(object) {
      var result = [];
      if (object != null) {
        for (var key in Object(object)) {
          result.push(key);
        }
      }
      return result;
    }

    /**
     * Converts `value` to a string using `Object.prototype.toString`.
     *
     * @private
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     */
    function objectToString(value) {
      return nativeObjectToString.call(value);
    }

    /**
     * A specialized version of `baseRest` which transforms the rest array.
     *
     * @private
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @param {Function} transform The rest array transform.
     * @returns {Function} Returns the new function.
     */
    function overRest(func, start, transform) {
      start = nativeMax(start === undefined ? (func.length - 1) : start, 0);
      return function() {
        var args = arguments,
            index = -1,
            length = nativeMax(args.length - start, 0),
            array = Array(length);

        while (++index < length) {
          array[index] = args[start + index];
        }
        index = -1;
        var otherArgs = Array(start + 1);
        while (++index < start) {
          otherArgs[index] = args[index];
        }
        otherArgs[start] = transform(array);
        return apply(func, this, otherArgs);
      };
    }

    /**
     * Gets the parent value at `path` of `object`.
     *
     * @private
     * @param {Object} object The object to query.
     * @param {Array} path The path to get the parent value of.
     * @returns {*} Returns the parent value.
     */
    function parent(object, path) {
      return path.length < 2 ? object : baseGet(object, baseSlice(path, 0, -1));
    }

    /**
     * Reorder `array` according to the specified indexes where the element at
     * the first index is assigned as the first element, the element at
     * the second index is assigned as the second element, and so on.
     *
     * @private
     * @param {Array} array The array to reorder.
     * @param {Array} indexes The arranged array indexes.
     * @returns {Array} Returns `array`.
     */
    function reorder(array, indexes) {
      var arrLength = array.length,
          length = nativeMin(indexes.length, arrLength),
          oldArray = copyArray(array);

      while (length--) {
        var index = indexes[length];
        array[length] = isIndex(index, arrLength) ? oldArray[index] : undefined;
      }
      return array;
    }

    /**
     * Gets the value at `key`, unless `key` is "__proto__" or "constructor".
     *
     * @private
     * @param {Object} object The object to query.
     * @param {string} key The key of the property to get.
     * @returns {*} Returns the property value.
     */
    function safeGet(object, key) {
      if (key === 'constructor' && typeof object[key] === 'function') {
        return;
      }

      if (key == '__proto__') {
        return;
      }

      return object[key];
    }

    /**
     * Sets metadata for `func`.
     *
     * **Note:** If this function becomes hot, i.e. is invoked a lot in a short
     * period of time, it will trip its breaker and transition to an identity
     * function to avoid garbage collection pauses in V8. See
     * [V8 issue 2070](https://bugs.chromium.org/p/v8/issues/detail?id=2070)
     * for more details.
     *
     * @private
     * @param {Function} func The function to associate metadata with.
     * @param {*} data The metadata.
     * @returns {Function} Returns `func`.
     */
    var setData = shortOut(baseSetData);

    /**
     * A simple wrapper around the global [`setTimeout`](https://mdn.io/setTimeout).
     *
     * @private
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @returns {number|Object} Returns the timer id or timeout object.
     */
    var setTimeout = ctxSetTimeout || function(func, wait) {
      return root.setTimeout(func, wait);
    };

    /**
     * Sets the `toString` method of `func` to return `string`.
     *
     * @private
     * @param {Function} func The function to modify.
     * @param {Function} string The `toString` result.
     * @returns {Function} Returns `func`.
     */
    var setToString = shortOut(baseSetToString);

    /**
     * Sets the `toString` method of `wrapper` to mimic the source of `reference`
     * with wrapper details in a comment at the top of the source body.
     *
     * @private
     * @param {Function} wrapper The function to modify.
     * @param {Function} reference The reference function.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Function} Returns `wrapper`.
     */
    function setWrapToString(wrapper, reference, bitmask) {
      var source = (reference + '');
      return setToString(wrapper, insertWrapDetails(source, updateWrapDetails(getWrapDetails(source), bitmask)));
    }

    /**
     * Creates a function that'll short out and invoke `identity` instead
     * of `func` when it's called `HOT_COUNT` or more times in `HOT_SPAN`
     * milliseconds.
     *
     * @private
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new shortable function.
     */
    function shortOut(func) {
      var count = 0,
          lastCalled = 0;

      return function() {
        var stamp = nativeNow(),
            remaining = HOT_SPAN - (stamp - lastCalled);

        lastCalled = stamp;
        if (remaining > 0) {
          if (++count >= HOT_COUNT) {
            return arguments[0];
          }
        } else {
          count = 0;
        }
        return func.apply(undefined, arguments);
      };
    }

    /**
     * A specialized version of `_.shuffle` which mutates and sets the size of `array`.
     *
     * @private
     * @param {Array} array The array to shuffle.
     * @param {number} [size=array.length] The size of `array`.
     * @returns {Array} Returns `array`.
     */
    function shuffleSelf(array, size) {
      var index = -1,
          length = array.length,
          lastIndex = length - 1;

      size = size === undefined ? length : size;
      while (++index < size) {
        var rand = baseRandom(index, lastIndex),
            value = array[rand];

        array[rand] = array[index];
        array[index] = value;
      }
      array.length = size;
      return array;
    }

    /**
     * Converts `string` to a property path array.
     *
     * @private
     * @param {string} string The string to convert.
     * @returns {Array} Returns the property path array.
     */
    var stringToPath = memoizeCapped(function(string) {
      var result = [];
      if (string.charCodeAt(0) === 46 /* . */) {
        result.push('');
      }
      string.replace(rePropName, function(match, number, quote, subString) {
        result.push(quote ? subString.replace(reEscapeChar, '$1') : (number || match));
      });
      return result;
    });

    /**
     * Converts `value` to a string key if it's not a string or symbol.
     *
     * @private
     * @param {*} value The value to inspect.
     * @returns {string|symbol} Returns the key.
     */
    function toKey(value) {
      if (typeof value == 'string' || isSymbol(value)) {
        return value;
      }
      var result = (value + '');
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    }

    /**
     * Converts `func` to its source code.
     *
     * @private
     * @param {Function} func The function to convert.
     * @returns {string} Returns the source code.
     */
    function toSource(func) {
      if (func != null) {
        try {
          return funcToString.call(func);
        } catch (e) {}
        try {
          return (func + '');
        } catch (e) {}
      }
      return '';
    }

    /**
     * Updates wrapper `details` based on `bitmask` flags.
     *
     * @private
     * @returns {Array} details The details to modify.
     * @param {number} bitmask The bitmask flags. See `createWrap` for more details.
     * @returns {Array} Returns `details`.
     */
    function updateWrapDetails(details, bitmask) {
      arrayEach(wrapFlags, function(pair) {
        var value = '_.' + pair[0];
        if ((bitmask & pair[1]) && !arrayIncludes(details, value)) {
          details.push(value);
        }
      });
      return details.sort();
    }

    /**
     * Creates a clone of `wrapper`.
     *
     * @private
     * @param {Object} wrapper The wrapper to clone.
     * @returns {Object} Returns the cloned wrapper.
     */
    function wrapperClone(wrapper) {
      if (wrapper instanceof LazyWrapper) {
        return wrapper.clone();
      }
      var result = new LodashWrapper(wrapper.__wrapped__, wrapper.__chain__);
      result.__actions__ = copyArray(wrapper.__actions__);
      result.__index__  = wrapper.__index__;
      result.__values__ = wrapper.__values__;
      return result;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an array of elements split into groups the length of `size`.
     * If `array` can't be split evenly, the final chunk will be the remaining
     * elements.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to process.
     * @param {number} [size=1] The length of each chunk
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the new array of chunks.
     * @example
     *
     * _.chunk(['a', 'b', 'c', 'd'], 2);
     * // => [['a', 'b'], ['c', 'd']]
     *
     * _.chunk(['a', 'b', 'c', 'd'], 3);
     * // => [['a', 'b', 'c'], ['d']]
     */
    function chunk(array, size, guard) {
      if ((guard ? isIterateeCall(array, size, guard) : size === undefined)) {
        size = 1;
      } else {
        size = nativeMax(toInteger(size), 0);
      }
      var length = array == null ? 0 : array.length;
      if (!length || size < 1) {
        return [];
      }
      var index = 0,
          resIndex = 0,
          result = Array(nativeCeil(length / size));

      while (index < length) {
        result[resIndex++] = baseSlice(array, index, (index += size));
      }
      return result;
    }

    /**
     * Creates an array with all falsey values removed. The values `false`, `null`,
     * `0`, `""`, `undefined`, and `NaN` are falsey.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to compact.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.compact([0, 1, false, 2, '', 3]);
     * // => [1, 2, 3]
     */
    function compact(array) {
      var index = -1,
          length = array == null ? 0 : array.length,
          resIndex = 0,
          result = [];

      while (++index < length) {
        var value = array[index];
        if (value) {
          result[resIndex++] = value;
        }
      }
      return result;
    }

    /**
     * Creates a new array concatenating `array` with any additional arrays
     * and/or values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to concatenate.
     * @param {...*} [values] The values to concatenate.
     * @returns {Array} Returns the new concatenated array.
     * @example
     *
     * var array = [1];
     * var other = _.concat(array, 2, [3], [[4]]);
     *
     * console.log(other);
     * // => [1, 2, 3, [4]]
     *
     * console.log(array);
     * // => [1]
     */
    function concat() {
      var length = arguments.length;
      if (!length) {
        return [];
      }
      var args = Array(length - 1),
          array = arguments[0],
          index = length;

      while (index--) {
        args[index - 1] = arguments[index];
      }
      return arrayPush(isArray(array) ? copyArray(array) : [array], baseFlatten(args, 1));
    }

    /**
     * Creates an array of `array` values not included in the other given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * **Note:** Unlike `_.pullAll`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.without, _.xor
     * @example
     *
     * _.difference([2, 1], [2, 3]);
     * // => [1]
     */
    var difference = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `iteratee` which
     * is invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * **Note:** Unlike `_.pullAllBy`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.differenceBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.differenceBy([{ 'x': 2 }, { 'x': 1 }], [{ 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var differenceBy = baseRest(function(array, values) {
      var iteratee = last(values);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.difference` except that it accepts `comparator`
     * which is invoked to compare elements of `array` to `values`. The order and
     * references of result values are determined by the first array. The comparator
     * is invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.pullAllWith`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...Array} [values] The values to exclude.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     *
     * _.differenceWith(objects, [{ 'x': 1, 'y': 2 }], _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }]
     */
    var differenceWith = baseRest(function(array, values) {
      var comparator = last(values);
      if (isArrayLikeObject(comparator)) {
        comparator = undefined;
      }
      return isArrayLikeObject(array)
        ? baseDifference(array, baseFlatten(values, 1, isArrayLikeObject, true), undefined, comparator)
        : [];
    });

    /**
     * Creates a slice of `array` with `n` elements dropped from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.drop([1, 2, 3]);
     * // => [2, 3]
     *
     * _.drop([1, 2, 3], 2);
     * // => [3]
     *
     * _.drop([1, 2, 3], 5);
     * // => []
     *
     * _.drop([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function drop(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with `n` elements dropped from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to drop.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.dropRight([1, 2, 3]);
     * // => [1, 2]
     *
     * _.dropRight([1, 2, 3], 2);
     * // => [1]
     *
     * _.dropRight([1, 2, 3], 5);
     * // => []
     *
     * _.dropRight([1, 2, 3], 0);
     * // => [1, 2, 3]
     */
    function dropRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the end.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.dropRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropRightWhile(users, ['active', false]);
     * // => objects for ['barney']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropRightWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true, true)
        : [];
    }

    /**
     * Creates a slice of `array` excluding elements dropped from the beginning.
     * Elements are dropped until `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.dropWhile(users, function(o) { return !o.active; });
     * // => objects for ['pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.dropWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.dropWhile(users, ['active', false]);
     * // => objects for ['pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.dropWhile(users, 'active');
     * // => objects for ['barney', 'fred', 'pebbles']
     */
    function dropWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), true)
        : [];
    }

    /**
     * Fills elements of `array` with `value` from `start` up to, but not
     * including, `end`.
     *
     * **Note:** This method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Array
     * @param {Array} array The array to fill.
     * @param {*} value The value to fill `array` with.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.fill(array, 'a');
     * console.log(array);
     * // => ['a', 'a', 'a']
     *
     * _.fill(Array(3), 2);
     * // => [2, 2, 2]
     *
     * _.fill([4, 6, 8, 10], '*', 1, 3);
     * // => [4, '*', '*', 10]
     */
    function fill(array, value, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (start && typeof start != 'number' && isIterateeCall(array, value, start)) {
        start = 0;
        end = length;
      }
      return baseFill(array, value, start, end);
    }

    /**
     * This method is like `_.find` except that it returns the index of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.findIndex(users, function(o) { return o.user == 'barney'; });
     * // => 0
     *
     * // The `_.matches` iteratee shorthand.
     * _.findIndex(users, { 'user': 'fred', 'active': false });
     * // => 1
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findIndex(users, ['active', false]);
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.findIndex(users, 'active');
     * // => 2
     */
    function findIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index);
    }

    /**
     * This method is like `_.findIndex` except that it iterates over elements
     * of `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the found element, else `-1`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.findLastIndex(users, function(o) { return o.user == 'pebbles'; });
     * // => 2
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastIndex(users, { 'user': 'barney', 'active': true });
     * // => 0
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastIndex(users, ['active', false]);
     * // => 2
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastIndex(users, 'active');
     * // => 0
     */
    function findLastIndex(array, predicate, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length - 1;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = fromIndex < 0
          ? nativeMax(length + index, 0)
          : nativeMin(index, length - 1);
      }
      return baseFindIndex(array, getIteratee(predicate, 3), index, true);
    }

    /**
     * Flattens `array` a single level deep.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flatten([1, [2, [3, [4]], 5]]);
     * // => [1, 2, [3, [4]], 5]
     */
    function flatten(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, 1) : [];
    }

    /**
     * Recursively flattens `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * _.flattenDeep([1, [2, [3, [4]], 5]]);
     * // => [1, 2, 3, 4, 5]
     */
    function flattenDeep(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseFlatten(array, INFINITY) : [];
    }

    /**
     * Recursively flatten `array` up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Array
     * @param {Array} array The array to flatten.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * var array = [1, [2, [3, [4]], 5]];
     *
     * _.flattenDepth(array, 1);
     * // => [1, 2, [3, [4]], 5]
     *
     * _.flattenDepth(array, 2);
     * // => [1, 2, 3, [4], 5]
     */
    function flattenDepth(array, depth) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(array, depth);
    }

    /**
     * The inverse of `_.toPairs`; this method returns an object composed
     * from key-value `pairs`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} pairs The key-value pairs.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.fromPairs([['a', 1], ['b', 2]]);
     * // => { 'a': 1, 'b': 2 }
     */
    function fromPairs(pairs) {
      var index = -1,
          length = pairs == null ? 0 : pairs.length,
          result = {};

      while (++index < length) {
        var pair = pairs[index];
        result[pair[0]] = pair[1];
      }
      return result;
    }

    /**
     * Gets the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias first
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the first element of `array`.
     * @example
     *
     * _.head([1, 2, 3]);
     * // => 1
     *
     * _.head([]);
     * // => undefined
     */
    function head(array) {
      return (array && array.length) ? array[0] : undefined;
    }

    /**
     * Gets the index at which the first occurrence of `value` is found in `array`
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. If `fromIndex` is negative, it's used as the
     * offset from the end of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.indexOf([1, 2, 1, 2], 2);
     * // => 1
     *
     * // Search from the `fromIndex`.
     * _.indexOf([1, 2, 1, 2], 2, 2);
     * // => 3
     */
    function indexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = fromIndex == null ? 0 : toInteger(fromIndex);
      if (index < 0) {
        index = nativeMax(length + index, 0);
      }
      return baseIndexOf(array, value, index);
    }

    /**
     * Gets all but the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.initial([1, 2, 3]);
     * // => [1, 2]
     */
    function initial(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 0, -1) : [];
    }

    /**
     * Creates an array of unique values that are included in all given arrays
     * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons. The order and references of result values are
     * determined by the first array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersection([2, 1], [2, 3]);
     * // => [2]
     */
    var intersection = baseRest(function(arrays) {
      var mapped = arrayMap(arrays, castArrayLikeObject);
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped)
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `iteratee`
     * which is invoked for each element of each `arrays` to generate the criterion
     * by which they're compared. The order and references of result values are
     * determined by the first array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * _.intersectionBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [2.1]
     *
     * // The `_.property` iteratee shorthand.
     * _.intersectionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }]
     */
    var intersectionBy = baseRest(function(arrays) {
      var iteratee = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      if (iteratee === last(mapped)) {
        iteratee = undefined;
      } else {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, getIteratee(iteratee, 2))
        : [];
    });

    /**
     * This method is like `_.intersection` except that it accepts `comparator`
     * which is invoked to compare elements of `arrays`. The order and references
     * of result values are determined by the first array. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of intersecting values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.intersectionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }]
     */
    var intersectionWith = baseRest(function(arrays) {
      var comparator = last(arrays),
          mapped = arrayMap(arrays, castArrayLikeObject);

      comparator = typeof comparator == 'function' ? comparator : undefined;
      if (comparator) {
        mapped.pop();
      }
      return (mapped.length && mapped[0] === arrays[0])
        ? baseIntersection(mapped, undefined, comparator)
        : [];
    });

    /**
     * Converts all elements in `array` into a string separated by `separator`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to convert.
     * @param {string} [separator=','] The element separator.
     * @returns {string} Returns the joined string.
     * @example
     *
     * _.join(['a', 'b', 'c'], '~');
     * // => 'a~b~c'
     */
    function join(array, separator) {
      return array == null ? '' : nativeJoin.call(array, separator);
    }

    /**
     * Gets the last element of `array`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {*} Returns the last element of `array`.
     * @example
     *
     * _.last([1, 2, 3]);
     * // => 3
     */
    function last(array) {
      var length = array == null ? 0 : array.length;
      return length ? array[length - 1] : undefined;
    }

    /**
     * This method is like `_.indexOf` except that it iterates over elements of
     * `array` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=array.length-1] The index to search from.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.lastIndexOf([1, 2, 1, 2], 2);
     * // => 3
     *
     * // Search from the `fromIndex`.
     * _.lastIndexOf([1, 2, 1, 2], 2, 2);
     * // => 1
     */
    function lastIndexOf(array, value, fromIndex) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return -1;
      }
      var index = length;
      if (fromIndex !== undefined) {
        index = toInteger(fromIndex);
        index = index < 0 ? nativeMax(length + index, 0) : nativeMin(index, length - 1);
      }
      return value === value
        ? strictLastIndexOf(array, value, index)
        : baseFindIndex(array, baseIsNaN, index, true);
    }

    /**
     * Gets the element at index `n` of `array`. If `n` is negative, the nth
     * element from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.11.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=0] The index of the element to return.
     * @returns {*} Returns the nth element of `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     *
     * _.nth(array, 1);
     * // => 'b'
     *
     * _.nth(array, -2);
     * // => 'c';
     */
    function nth(array, n) {
      return (array && array.length) ? baseNth(array, toInteger(n)) : undefined;
    }

    /**
     * Removes all given values from `array` using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.without`, this method mutates `array`. Use `_.remove`
     * to remove elements from an array by predicate.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...*} [values] The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pull(array, 'a', 'c');
     * console.log(array);
     * // => ['b', 'b']
     */
    var pull = baseRest(pullAll);

    /**
     * This method is like `_.pull` except that it accepts an array of values to remove.
     *
     * **Note:** Unlike `_.difference`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = ['a', 'b', 'c', 'a', 'b', 'c'];
     *
     * _.pullAll(array, ['a', 'c']);
     * console.log(array);
     * // => ['b', 'b']
     */
    function pullAll(array, values) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values)
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `iteratee` which is
     * invoked for each element of `array` and `values` to generate the criterion
     * by which they're compared. The iteratee is invoked with one argument: (value).
     *
     * **Note:** Unlike `_.differenceBy`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1 }, { 'x': 2 }, { 'x': 3 }, { 'x': 1 }];
     *
     * _.pullAllBy(array, [{ 'x': 1 }, { 'x': 3 }], 'x');
     * console.log(array);
     * // => [{ 'x': 2 }]
     */
    function pullAllBy(array, values, iteratee) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, getIteratee(iteratee, 2))
        : array;
    }

    /**
     * This method is like `_.pullAll` except that it accepts `comparator` which
     * is invoked to compare elements of `array` to `values`. The comparator is
     * invoked with two arguments: (arrVal, othVal).
     *
     * **Note:** Unlike `_.differenceWith`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Array} values The values to remove.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [{ 'x': 1, 'y': 2 }, { 'x': 3, 'y': 4 }, { 'x': 5, 'y': 6 }];
     *
     * _.pullAllWith(array, [{ 'x': 3, 'y': 4 }], _.isEqual);
     * console.log(array);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 5, 'y': 6 }]
     */
    function pullAllWith(array, values, comparator) {
      return (array && array.length && values && values.length)
        ? basePullAll(array, values, undefined, comparator)
        : array;
    }

    /**
     * Removes elements from `array` corresponding to `indexes` and returns an
     * array of removed elements.
     *
     * **Note:** Unlike `_.at`, this method mutates `array`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {...(number|number[])} [indexes] The indexes of elements to remove.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = ['a', 'b', 'c', 'd'];
     * var pulled = _.pullAt(array, [1, 3]);
     *
     * console.log(array);
     * // => ['a', 'c']
     *
     * console.log(pulled);
     * // => ['b', 'd']
     */
    var pullAt = flatRest(function(array, indexes) {
      var length = array == null ? 0 : array.length,
          result = baseAt(array, indexes);

      basePullAt(array, arrayMap(indexes, function(index) {
        return isIndex(index, length) ? +index : index;
      }).sort(compareAscending));

      return result;
    });

    /**
     * Removes all elements from `array` that `predicate` returns truthy for
     * and returns an array of the removed elements. The predicate is invoked
     * with three arguments: (value, index, array).
     *
     * **Note:** Unlike `_.filter`, this method mutates `array`. Use `_.pull`
     * to pull elements from an array by value.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new array of removed elements.
     * @example
     *
     * var array = [1, 2, 3, 4];
     * var evens = _.remove(array, function(n) {
     *   return n % 2 == 0;
     * });
     *
     * console.log(array);
     * // => [1, 3]
     *
     * console.log(evens);
     * // => [2, 4]
     */
    function remove(array, predicate) {
      var result = [];
      if (!(array && array.length)) {
        return result;
      }
      var index = -1,
          indexes = [],
          length = array.length;

      predicate = getIteratee(predicate, 3);
      while (++index < length) {
        var value = array[index];
        if (predicate(value, index, array)) {
          result.push(value);
          indexes.push(index);
        }
      }
      basePullAt(array, indexes);
      return result;
    }

    /**
     * Reverses `array` so that the first element becomes the last, the second
     * element becomes the second to last, and so on.
     *
     * **Note:** This method mutates `array` and is based on
     * [`Array#reverse`](https://mdn.io/Array/reverse).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to modify.
     * @returns {Array} Returns `array`.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _.reverse(array);
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function reverse(array) {
      return array == null ? array : nativeReverse.call(array);
    }

    /**
     * Creates a slice of `array` from `start` up to, but not including, `end`.
     *
     * **Note:** This method is used instead of
     * [`Array#slice`](https://mdn.io/Array/slice) to ensure dense arrays are
     * returned.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to slice.
     * @param {number} [start=0] The start position.
     * @param {number} [end=array.length] The end position.
     * @returns {Array} Returns the slice of `array`.
     */
    function slice(array, start, end) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      if (end && typeof end != 'number' && isIterateeCall(array, start, end)) {
        start = 0;
        end = length;
      }
      else {
        start = start == null ? 0 : toInteger(start);
        end = end === undefined ? length : toInteger(end);
      }
      return baseSlice(array, start, end);
    }

    /**
     * Uses a binary search to determine the lowest index at which `value`
     * should be inserted into `array` in order to maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedIndex([30, 50], 40);
     * // => 1
     */
    function sortedIndex(array, value) {
      return baseSortedIndex(array, value);
    }

    /**
     * This method is like `_.sortedIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 0
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedIndexBy(objects, { 'x': 4 }, 'x');
     * // => 0
     */
    function sortedIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2));
    }

    /**
     * This method is like `_.indexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedIndexOf([4, 5, 5, 5, 6], 5);
     * // => 1
     */
    function sortedIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value);
        if (index < length && eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.sortedIndex` except that it returns the highest
     * index at which `value` should be inserted into `array` in order to
     * maintain its sort order.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * _.sortedLastIndex([4, 5, 5, 5, 6], 5);
     * // => 4
     */
    function sortedLastIndex(array, value) {
      return baseSortedIndex(array, value, true);
    }

    /**
     * This method is like `_.sortedLastIndex` except that it accepts `iteratee`
     * which is invoked for `value` and each element of `array` to compute their
     * sort ranking. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The sorted array to inspect.
     * @param {*} value The value to evaluate.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the index at which `value` should be inserted
     *  into `array`.
     * @example
     *
     * var objects = [{ 'x': 4 }, { 'x': 5 }];
     *
     * _.sortedLastIndexBy(objects, { 'x': 4 }, function(o) { return o.x; });
     * // => 1
     *
     * // The `_.property` iteratee shorthand.
     * _.sortedLastIndexBy(objects, { 'x': 4 }, 'x');
     * // => 1
     */
    function sortedLastIndexBy(array, value, iteratee) {
      return baseSortedIndexBy(array, value, getIteratee(iteratee, 2), true);
    }

    /**
     * This method is like `_.lastIndexOf` except that it performs a binary
     * search on a sorted `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {*} value The value to search for.
     * @returns {number} Returns the index of the matched value, else `-1`.
     * @example
     *
     * _.sortedLastIndexOf([4, 5, 5, 5, 6], 5);
     * // => 3
     */
    function sortedLastIndexOf(array, value) {
      var length = array == null ? 0 : array.length;
      if (length) {
        var index = baseSortedIndex(array, value, true) - 1;
        if (eq(array[index], value)) {
          return index;
        }
      }
      return -1;
    }

    /**
     * This method is like `_.uniq` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniq([1, 1, 2]);
     * // => [1, 2]
     */
    function sortedUniq(array) {
      return (array && array.length)
        ? baseSortedUniq(array)
        : [];
    }

    /**
     * This method is like `_.uniqBy` except that it's designed and optimized
     * for sorted arrays.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.sortedUniqBy([1.1, 1.2, 2.3, 2.4], Math.floor);
     * // => [1.1, 2.3]
     */
    function sortedUniqBy(array, iteratee) {
      return (array && array.length)
        ? baseSortedUniq(array, getIteratee(iteratee, 2))
        : [];
    }

    /**
     * Gets all but the first element of `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.tail([1, 2, 3]);
     * // => [2, 3]
     */
    function tail(array) {
      var length = array == null ? 0 : array.length;
      return length ? baseSlice(array, 1, length) : [];
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the beginning.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.take([1, 2, 3]);
     * // => [1]
     *
     * _.take([1, 2, 3], 2);
     * // => [1, 2]
     *
     * _.take([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.take([1, 2, 3], 0);
     * // => []
     */
    function take(array, n, guard) {
      if (!(array && array.length)) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      return baseSlice(array, 0, n < 0 ? 0 : n);
    }

    /**
     * Creates a slice of `array` with `n` elements taken from the end.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {number} [n=1] The number of elements to take.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * _.takeRight([1, 2, 3]);
     * // => [3]
     *
     * _.takeRight([1, 2, 3], 2);
     * // => [2, 3]
     *
     * _.takeRight([1, 2, 3], 5);
     * // => [1, 2, 3]
     *
     * _.takeRight([1, 2, 3], 0);
     * // => []
     */
    function takeRight(array, n, guard) {
      var length = array == null ? 0 : array.length;
      if (!length) {
        return [];
      }
      n = (guard || n === undefined) ? 1 : toInteger(n);
      n = length - n;
      return baseSlice(array, n < 0 ? 0 : n, length);
    }

    /**
     * Creates a slice of `array` with elements taken from the end. Elements are
     * taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': true },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': false }
     * ];
     *
     * _.takeRightWhile(users, function(o) { return !o.active; });
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeRightWhile(users, { 'user': 'pebbles', 'active': false });
     * // => objects for ['pebbles']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeRightWhile(users, ['active', false]);
     * // => objects for ['fred', 'pebbles']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeRightWhile(users, 'active');
     * // => []
     */
    function takeRightWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3), false, true)
        : [];
    }

    /**
     * Creates a slice of `array` with elements taken from the beginning. Elements
     * are taken until `predicate` returns falsey. The predicate is invoked with
     * three arguments: (value, index, array).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Array
     * @param {Array} array The array to query.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the slice of `array`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'active': false },
     *   { 'user': 'fred',    'active': false },
     *   { 'user': 'pebbles', 'active': true }
     * ];
     *
     * _.takeWhile(users, function(o) { return !o.active; });
     * // => objects for ['barney', 'fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.takeWhile(users, { 'user': 'barney', 'active': false });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.takeWhile(users, ['active', false]);
     * // => objects for ['barney', 'fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.takeWhile(users, 'active');
     * // => []
     */
    function takeWhile(array, predicate) {
      return (array && array.length)
        ? baseWhile(array, getIteratee(predicate, 3))
        : [];
    }

    /**
     * Creates an array of unique values, in order, from all given arrays using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.union([2], [1, 2]);
     * // => [2, 1]
     */
    var union = baseRest(function(arrays) {
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true));
    });

    /**
     * This method is like `_.union` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which uniqueness is computed. Result values are chosen from the first
     * array in which the value occurs. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * _.unionBy([2.1], [1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.unionBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    var unionBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.union` except that it accepts `comparator` which
     * is invoked to compare elements of `arrays`. Result values are chosen from
     * the first array in which the value occurs. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of combined values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.unionWith(objects, others, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var unionWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseUniq(baseFlatten(arrays, 1, isArrayLikeObject, true), undefined, comparator);
    });

    /**
     * Creates a duplicate-free version of an array, using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons, in which only the first occurrence of each element
     * is kept. The order of result values is determined by the order they occur
     * in the array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniq([2, 1, 2]);
     * // => [2, 1]
     */
    function uniq(array) {
      return (array && array.length) ? baseUniq(array) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * uniqueness is computed. The order of result values is determined by the
     * order they occur in the array. The iteratee is invoked with one argument:
     * (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * _.uniqBy([2.1, 1.2, 2.3], Math.floor);
     * // => [2.1, 1.2]
     *
     * // The `_.property` iteratee shorthand.
     * _.uniqBy([{ 'x': 1 }, { 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 1 }, { 'x': 2 }]
     */
    function uniqBy(array, iteratee) {
      return (array && array.length) ? baseUniq(array, getIteratee(iteratee, 2)) : [];
    }

    /**
     * This method is like `_.uniq` except that it accepts `comparator` which
     * is invoked to compare elements of `array`. The order of result values is
     * determined by the order they occur in the array.The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new duplicate free array.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.uniqWith(objects, _.isEqual);
     * // => [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]
     */
    function uniqWith(array, comparator) {
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return (array && array.length) ? baseUniq(array, undefined, comparator) : [];
    }

    /**
     * This method is like `_.zip` except that it accepts an array of grouped
     * elements and creates an array regrouping the elements to their pre-zip
     * configuration.
     *
     * @static
     * @memberOf _
     * @since 1.2.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     *
     * _.unzip(zipped);
     * // => [['a', 'b'], [1, 2], [true, false]]
     */
    function unzip(array) {
      if (!(array && array.length)) {
        return [];
      }
      var length = 0;
      array = arrayFilter(array, function(group) {
        if (isArrayLikeObject(group)) {
          length = nativeMax(group.length, length);
          return true;
        }
      });
      return baseTimes(length, function(index) {
        return arrayMap(array, baseProperty(index));
      });
    }

    /**
     * This method is like `_.unzip` except that it accepts `iteratee` to specify
     * how regrouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {Array} array The array of grouped elements to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  regrouped values.
     * @returns {Array} Returns the new array of regrouped elements.
     * @example
     *
     * var zipped = _.zip([1, 2], [10, 20], [100, 200]);
     * // => [[1, 10, 100], [2, 20, 200]]
     *
     * _.unzipWith(zipped, _.add);
     * // => [3, 30, 300]
     */
    function unzipWith(array, iteratee) {
      if (!(array && array.length)) {
        return [];
      }
      var result = unzip(array);
      if (iteratee == null) {
        return result;
      }
      return arrayMap(result, function(group) {
        return apply(iteratee, undefined, group);
      });
    }

    /**
     * Creates an array excluding all given values using
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * for equality comparisons.
     *
     * **Note:** Unlike `_.pull`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {Array} array The array to inspect.
     * @param {...*} [values] The values to exclude.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.xor
     * @example
     *
     * _.without([2, 1, 2, 3], 1, 2);
     * // => [3]
     */
    var without = baseRest(function(array, values) {
      return isArrayLikeObject(array)
        ? baseDifference(array, values)
        : [];
    });

    /**
     * Creates an array of unique values that is the
     * [symmetric difference](https://en.wikipedia.org/wiki/Symmetric_difference)
     * of the given arrays. The order of result values is determined by the order
     * they occur in the arrays.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @returns {Array} Returns the new array of filtered values.
     * @see _.difference, _.without
     * @example
     *
     * _.xor([2, 1], [2, 3]);
     * // => [1, 3]
     */
    var xor = baseRest(function(arrays) {
      return baseXor(arrayFilter(arrays, isArrayLikeObject));
    });

    /**
     * This method is like `_.xor` except that it accepts `iteratee` which is
     * invoked for each element of each `arrays` to generate the criterion by
     * which by which they're compared. The order of result values is determined
     * by the order they occur in the arrays. The iteratee is invoked with one
     * argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * _.xorBy([2.1, 1.2], [2.3, 3.4], Math.floor);
     * // => [1.2, 3.4]
     *
     * // The `_.property` iteratee shorthand.
     * _.xorBy([{ 'x': 1 }], [{ 'x': 2 }, { 'x': 1 }], 'x');
     * // => [{ 'x': 2 }]
     */
    var xorBy = baseRest(function(arrays) {
      var iteratee = last(arrays);
      if (isArrayLikeObject(iteratee)) {
        iteratee = undefined;
      }
      return baseXor(arrayFilter(arrays, isArrayLikeObject), getIteratee(iteratee, 2));
    });

    /**
     * This method is like `_.xor` except that it accepts `comparator` which is
     * invoked to compare elements of `arrays`. The order of result values is
     * determined by the order they occur in the arrays. The comparator is invoked
     * with two arguments: (arrVal, othVal).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Array
     * @param {...Array} [arrays] The arrays to inspect.
     * @param {Function} [comparator] The comparator invoked per element.
     * @returns {Array} Returns the new array of filtered values.
     * @example
     *
     * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];
     * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];
     *
     * _.xorWith(objects, others, _.isEqual);
     * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]
     */
    var xorWith = baseRest(function(arrays) {
      var comparator = last(arrays);
      comparator = typeof comparator == 'function' ? comparator : undefined;
      return baseXor(arrayFilter(arrays, isArrayLikeObject), undefined, comparator);
    });

    /**
     * Creates an array of grouped elements, the first of which contains the
     * first elements of the given arrays, the second of which contains the
     * second elements of the given arrays, and so on.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zip(['a', 'b'], [1, 2], [true, false]);
     * // => [['a', 1, true], ['b', 2, false]]
     */
    var zip = baseRest(unzip);

    /**
     * This method is like `_.fromPairs` except that it accepts two arrays,
     * one of property identifiers and one of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 0.4.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObject(['a', 'b'], [1, 2]);
     * // => { 'a': 1, 'b': 2 }
     */
    function zipObject(props, values) {
      return baseZipObject(props || [], values || [], assignValue);
    }

    /**
     * This method is like `_.zipObject` except that it supports property paths.
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Array
     * @param {Array} [props=[]] The property identifiers.
     * @param {Array} [values=[]] The property values.
     * @returns {Object} Returns the new object.
     * @example
     *
     * _.zipObjectDeep(['a.b[0].c', 'a.b[1].d'], [1, 2]);
     * // => { 'a': { 'b': [{ 'c': 1 }, { 'd': 2 }] } }
     */
    function zipObjectDeep(props, values) {
      return baseZipObject(props || [], values || [], baseSet);
    }

    /**
     * This method is like `_.zip` except that it accepts `iteratee` to specify
     * how grouped values should be combined. The iteratee is invoked with the
     * elements of each group: (...group).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Array
     * @param {...Array} [arrays] The arrays to process.
     * @param {Function} [iteratee=_.identity] The function to combine
     *  grouped values.
     * @returns {Array} Returns the new array of grouped elements.
     * @example
     *
     * _.zipWith([1, 2], [10, 20], [100, 200], function(a, b, c) {
     *   return a + b + c;
     * });
     * // => [111, 222]
     */
    var zipWith = baseRest(function(arrays) {
      var length = arrays.length,
          iteratee = length > 1 ? arrays[length - 1] : undefined;

      iteratee = typeof iteratee == 'function' ? (arrays.pop(), iteratee) : undefined;
      return unzipWith(arrays, iteratee);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Creates a `lodash` wrapper instance that wraps `value` with explicit method
     * chain sequences enabled. The result of such sequences must be unwrapped
     * with `_#value`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Seq
     * @param {*} value The value to wrap.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36 },
     *   { 'user': 'fred',    'age': 40 },
     *   { 'user': 'pebbles', 'age': 1 }
     * ];
     *
     * var youngest = _
     *   .chain(users)
     *   .sortBy('age')
     *   .map(function(o) {
     *     return o.user + ' is ' + o.age;
     *   })
     *   .head()
     *   .value();
     * // => 'pebbles is 1'
     */
    function chain(value) {
      var result = lodash(value);
      result.__chain__ = true;
      return result;
    }

    /**
     * This method invokes `interceptor` and returns `value`. The interceptor
     * is invoked with one argument; (value). The purpose of this method is to
     * "tap into" a method chain sequence in order to modify intermediate results.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns `value`.
     * @example
     *
     * _([1, 2, 3])
     *  .tap(function(array) {
     *    // Mutate input array.
     *    array.pop();
     *  })
     *  .reverse()
     *  .value();
     * // => [2, 1]
     */
    function tap(value, interceptor) {
      interceptor(value);
      return value;
    }

    /**
     * This method is like `_.tap` except that it returns the result of `interceptor`.
     * The purpose of this method is to "pass thru" values replacing intermediate
     * results in a method chain sequence.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Seq
     * @param {*} value The value to provide to `interceptor`.
     * @param {Function} interceptor The function to invoke.
     * @returns {*} Returns the result of `interceptor`.
     * @example
     *
     * _('  abc  ')
     *  .chain()
     *  .trim()
     *  .thru(function(value) {
     *    return [value];
     *  })
     *  .value();
     * // => ['abc']
     */
    function thru(value, interceptor) {
      return interceptor(value);
    }

    /**
     * This method is the wrapper version of `_.at`.
     *
     * @name at
     * @memberOf _
     * @since 1.0.0
     * @category Seq
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _(object).at(['a[0].b.c', 'a[1]']).value();
     * // => [3, 4]
     */
    var wrapperAt = flatRest(function(paths) {
      var length = paths.length,
          start = length ? paths[0] : 0,
          value = this.__wrapped__,
          interceptor = function(object) { return baseAt(object, paths); };

      if (length > 1 || this.__actions__.length ||
          !(value instanceof LazyWrapper) || !isIndex(start)) {
        return this.thru(interceptor);
      }
      value = value.slice(start, +start + (length ? 1 : 0));
      value.__actions__.push({
        'func': thru,
        'args': [interceptor],
        'thisArg': undefined
      });
      return new LodashWrapper(value, this.__chain__).thru(function(array) {
        if (length && !array.length) {
          array.push(undefined);
        }
        return array;
      });
    });

    /**
     * Creates a `lodash` wrapper instance with explicit method chain sequences enabled.
     *
     * @name chain
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 }
     * ];
     *
     * // A sequence without explicit chaining.
     * _(users).head();
     * // => { 'user': 'barney', 'age': 36 }
     *
     * // A sequence with explicit chaining.
     * _(users)
     *   .chain()
     *   .head()
     *   .pick('user')
     *   .value();
     * // => { 'user': 'barney' }
     */
    function wrapperChain() {
      return chain(this);
    }

    /**
     * Executes the chain sequence and returns the wrapped result.
     *
     * @name commit
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2];
     * var wrapped = _(array).push(3);
     *
     * console.log(array);
     * // => [1, 2]
     *
     * wrapped = wrapped.commit();
     * console.log(array);
     * // => [1, 2, 3]
     *
     * wrapped.last();
     * // => 3
     *
     * console.log(array);
     * // => [1, 2, 3]
     */
    function wrapperCommit() {
      return new LodashWrapper(this.value(), this.__chain__);
    }

    /**
     * Gets the next value on a wrapped object following the
     * [iterator protocol](https://mdn.io/iteration_protocols#iterator).
     *
     * @name next
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the next iterator value.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 1 }
     *
     * wrapped.next();
     * // => { 'done': false, 'value': 2 }
     *
     * wrapped.next();
     * // => { 'done': true, 'value': undefined }
     */
    function wrapperNext() {
      if (this.__values__ === undefined) {
        this.__values__ = toArray(this.value());
      }
      var done = this.__index__ >= this.__values__.length,
          value = done ? undefined : this.__values__[this.__index__++];

      return { 'done': done, 'value': value };
    }

    /**
     * Enables the wrapper to be iterable.
     *
     * @name Symbol.iterator
     * @memberOf _
     * @since 4.0.0
     * @category Seq
     * @returns {Object} Returns the wrapper object.
     * @example
     *
     * var wrapped = _([1, 2]);
     *
     * wrapped[Symbol.iterator]() === wrapped;
     * // => true
     *
     * Array.from(wrapped);
     * // => [1, 2]
     */
    function wrapperToIterator() {
      return this;
    }

    /**
     * Creates a clone of the chain sequence planting `value` as the wrapped value.
     *
     * @name plant
     * @memberOf _
     * @since 3.2.0
     * @category Seq
     * @param {*} value The value to plant.
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var wrapped = _([1, 2]).map(square);
     * var other = wrapped.plant([3, 4]);
     *
     * other.value();
     * // => [9, 16]
     *
     * wrapped.value();
     * // => [1, 4]
     */
    function wrapperPlant(value) {
      var result,
          parent = this;

      while (parent instanceof baseLodash) {
        var clone = wrapperClone(parent);
        clone.__index__ = 0;
        clone.__values__ = undefined;
        if (result) {
          previous.__wrapped__ = clone;
        } else {
          result = clone;
        }
        var previous = clone;
        parent = parent.__wrapped__;
      }
      previous.__wrapped__ = value;
      return result;
    }

    /**
     * This method is the wrapper version of `_.reverse`.
     *
     * **Note:** This method mutates the wrapped array.
     *
     * @name reverse
     * @memberOf _
     * @since 0.1.0
     * @category Seq
     * @returns {Object} Returns the new `lodash` wrapper instance.
     * @example
     *
     * var array = [1, 2, 3];
     *
     * _(array).reverse().value()
     * // => [3, 2, 1]
     *
     * console.log(array);
     * // => [3, 2, 1]
     */
    function wrapperReverse() {
      var value = this.__wrapped__;
      if (value instanceof LazyWrapper) {
        var wrapped = value;
        if (this.__actions__.length) {
          wrapped = new LazyWrapper(this);
        }
        wrapped = wrapped.reverse();
        wrapped.__actions__.push({
          'func': thru,
          'args': [reverse],
          'thisArg': undefined
        });
        return new LodashWrapper(wrapped, this.__chain__);
      }
      return this.thru(reverse);
    }

    /**
     * Executes the chain sequence to resolve the unwrapped value.
     *
     * @name value
     * @memberOf _
     * @since 0.1.0
     * @alias toJSON, valueOf
     * @category Seq
     * @returns {*} Returns the resolved unwrapped value.
     * @example
     *
     * _([1, 2, 3]).value();
     * // => [1, 2, 3]
     */
    function wrapperValue() {
      return baseWrapperValue(this.__wrapped__, this.__actions__);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the number of times the key was returned by `iteratee`. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.countBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': 1, '6': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.countBy(['one', 'two', 'three'], 'length');
     * // => { '3': 2, '5': 1 }
     */
    var countBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        ++result[key];
      } else {
        baseAssignValue(result, key, 1);
      }
    });

    /**
     * Checks if `predicate` returns truthy for **all** elements of `collection`.
     * Iteration is stopped once `predicate` returns falsey. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * **Note:** This method returns `true` for
     * [empty collections](https://en.wikipedia.org/wiki/Empty_set) because
     * [everything is true](https://en.wikipedia.org/wiki/Vacuous_truth) of
     * elements of empty collections.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if all elements pass the predicate check,
     *  else `false`.
     * @example
     *
     * _.every([true, 1, null, 'yes'], Boolean);
     * // => false
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.every(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.every(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.every(users, 'active');
     * // => false
     */
    function every(collection, predicate, guard) {
      var func = isArray(collection) ? arrayEvery : baseEvery;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning an array of all elements
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * **Note:** Unlike `_.remove`, this method returns a new array.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.reject
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * _.filter(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, { 'age': 36, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.filter(users, 'active');
     * // => objects for ['barney']
     */
    function filter(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Iterates over elements of `collection`, returning the first element
     * `predicate` returns truthy for. The predicate is invoked with three
     * arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=0] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': true },
     *   { 'user': 'fred',    'age': 40, 'active': false },
     *   { 'user': 'pebbles', 'age': 1,  'active': true }
     * ];
     *
     * _.find(users, function(o) { return o.age < 40; });
     * // => object for 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.find(users, { 'age': 1, 'active': true });
     * // => object for 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.find(users, ['active', false]);
     * // => object for 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.find(users, 'active');
     * // => object for 'barney'
     */
    var find = createFind(findIndex);

    /**
     * This method is like `_.find` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param {number} [fromIndex=collection.length-1] The index to search from.
     * @returns {*} Returns the matched element, else `undefined`.
     * @example
     *
     * _.findLast([1, 2, 3, 4], function(n) {
     *   return n % 2 == 1;
     * });
     * // => 3
     */
    var findLast = createFind(findLastIndex);

    /**
     * Creates a flattened array of values by running each element in `collection`
     * thru `iteratee` and flattening the mapped results. The iteratee is invoked
     * with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [n, n];
     * }
     *
     * _.flatMap([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMap(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), 1);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDeep([1, 2], duplicate);
     * // => [1, 1, 2, 2]
     */
    function flatMapDeep(collection, iteratee) {
      return baseFlatten(map(collection, iteratee), INFINITY);
    }

    /**
     * This method is like `_.flatMap` except that it recursively flattens the
     * mapped results up to `depth` times.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {number} [depth=1] The maximum recursion depth.
     * @returns {Array} Returns the new flattened array.
     * @example
     *
     * function duplicate(n) {
     *   return [[[n, n]]];
     * }
     *
     * _.flatMapDepth([1, 2], duplicate, 2);
     * // => [[1, 1], [2, 2]]
     */
    function flatMapDepth(collection, iteratee, depth) {
      depth = depth === undefined ? 1 : toInteger(depth);
      return baseFlatten(map(collection, iteratee), depth);
    }

    /**
     * Iterates over elements of `collection` and invokes `iteratee` for each element.
     * The iteratee is invoked with three arguments: (value, index|key, collection).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * **Note:** As with other "Collections" methods, objects with a "length"
     * property are iterated like arrays. To avoid this behavior use `_.forIn`
     * or `_.forOwn` for object iteration.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @alias each
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEachRight
     * @example
     *
     * _.forEach([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `1` then `2`.
     *
     * _.forEach({ 'a': 1, 'b': 2 }, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forEach(collection, iteratee) {
      var func = isArray(collection) ? arrayEach : baseEach;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forEach` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @alias eachRight
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array|Object} Returns `collection`.
     * @see _.forEach
     * @example
     *
     * _.forEachRight([1, 2], function(value) {
     *   console.log(value);
     * });
     * // => Logs `2` then `1`.
     */
    function forEachRight(collection, iteratee) {
      var func = isArray(collection) ? arrayEachRight : baseEachRight;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The order of grouped values
     * is determined by the order they occur in `collection`. The corresponding
     * value of each key is an array of elements responsible for generating the
     * key. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * _.groupBy([6.1, 4.2, 6.3], Math.floor);
     * // => { '4': [4.2], '6': [6.1, 6.3] }
     *
     * // The `_.property` iteratee shorthand.
     * _.groupBy(['one', 'two', 'three'], 'length');
     * // => { '3': ['one', 'two'], '5': ['three'] }
     */
    var groupBy = createAggregator(function(result, value, key) {
      if (hasOwnProperty.call(result, key)) {
        result[key].push(value);
      } else {
        baseAssignValue(result, key, [value]);
      }
    });

    /**
     * Checks if `value` is in `collection`. If `collection` is a string, it's
     * checked for a substring of `value`, otherwise
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * is used for equality comparisons. If `fromIndex` is negative, it's used as
     * the offset from the end of `collection`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @param {*} value The value to search for.
     * @param {number} [fromIndex=0] The index to search from.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {boolean} Returns `true` if `value` is found, else `false`.
     * @example
     *
     * _.includes([1, 2, 3], 1);
     * // => true
     *
     * _.includes([1, 2, 3], 1, 2);
     * // => false
     *
     * _.includes({ 'a': 1, 'b': 2 }, 1);
     * // => true
     *
     * _.includes('abcd', 'bc');
     * // => true
     */
    function includes(collection, value, fromIndex, guard) {
      collection = isArrayLike(collection) ? collection : values(collection);
      fromIndex = (fromIndex && !guard) ? toInteger(fromIndex) : 0;

      var length = collection.length;
      if (fromIndex < 0) {
        fromIndex = nativeMax(length + fromIndex, 0);
      }
      return isString(collection)
        ? (fromIndex <= length && collection.indexOf(value, fromIndex) > -1)
        : (!!length && baseIndexOf(collection, value, fromIndex) > -1);
    }

    /**
     * Invokes the method at `path` of each element in `collection`, returning
     * an array of the results of each invoked method. Any additional arguments
     * are provided to each invoked method. If `path` is a function, it's invoked
     * for, and `this` bound to, each element in `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array|Function|string} path The path of the method to invoke or
     *  the function invoked per iteration.
     * @param {...*} [args] The arguments to invoke each method with.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.invokeMap([[5, 1, 7], [3, 2, 1]], 'sort');
     * // => [[1, 5, 7], [1, 2, 3]]
     *
     * _.invokeMap([123, 456], String.prototype.split, '');
     * // => [['1', '2', '3'], ['4', '5', '6']]
     */
    var invokeMap = baseRest(function(collection, path, args) {
      var index = -1,
          isFunc = typeof path == 'function',
          result = isArrayLike(collection) ? Array(collection.length) : [];

      baseEach(collection, function(value) {
        result[++index] = isFunc ? apply(path, value, args) : baseInvoke(value, path, args);
      });
      return result;
    });

    /**
     * Creates an object composed of keys generated from the results of running
     * each element of `collection` thru `iteratee`. The corresponding value of
     * each key is the last element responsible for generating the key. The
     * iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee to transform keys.
     * @returns {Object} Returns the composed aggregate object.
     * @example
     *
     * var array = [
     *   { 'dir': 'left', 'code': 97 },
     *   { 'dir': 'right', 'code': 100 }
     * ];
     *
     * _.keyBy(array, function(o) {
     *   return String.fromCharCode(o.code);
     * });
     * // => { 'a': { 'dir': 'left', 'code': 97 }, 'd': { 'dir': 'right', 'code': 100 } }
     *
     * _.keyBy(array, 'dir');
     * // => { 'left': { 'dir': 'left', 'code': 97 }, 'right': { 'dir': 'right', 'code': 100 } }
     */
    var keyBy = createAggregator(function(result, value, key) {
      baseAssignValue(result, key, value);
    });

    /**
     * Creates an array of values by running each element in `collection` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.every`, `_.filter`, `_.map`, `_.mapValues`, `_.reject`, and `_.some`.
     *
     * The guarded methods are:
     * `ary`, `chunk`, `curry`, `curryRight`, `drop`, `dropRight`, `every`,
     * `fill`, `invert`, `parseInt`, `random`, `range`, `rangeRight`, `repeat`,
     * `sampleSize`, `slice`, `some`, `sortBy`, `split`, `take`, `takeRight`,
     * `template`, `trim`, `trimEnd`, `trimStart`, and `words`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new mapped array.
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * _.map([4, 8], square);
     * // => [16, 64]
     *
     * _.map({ 'a': 4, 'b': 8 }, square);
     * // => [16, 64] (iteration order is not guaranteed)
     *
     * var users = [
     *   { 'user': 'barney' },
     *   { 'user': 'fred' }
     * ];
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, 'user');
     * // => ['barney', 'fred']
     */
    function map(collection, iteratee) {
      var func = isArray(collection) ? arrayMap : baseMap;
      return func(collection, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.sortBy` except that it allows specifying the sort
     * orders of the iteratees to sort by. If `orders` is unspecified, all values
     * are sorted in ascending order. Otherwise, specify an order of "desc" for
     * descending or "asc" for ascending sort order of corresponding values.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Array[]|Function[]|Object[]|string[]} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @param {string[]} [orders] The sort orders of `iteratees`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.reduce`.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 34 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 36 }
     * ];
     *
     * // Sort by `user` in ascending order and by `age` in descending order.
     * _.orderBy(users, ['user', 'age'], ['asc', 'desc']);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     */
    function orderBy(collection, iteratees, orders, guard) {
      if (collection == null) {
        return [];
      }
      if (!isArray(iteratees)) {
        iteratees = iteratees == null ? [] : [iteratees];
      }
      orders = guard ? undefined : orders;
      if (!isArray(orders)) {
        orders = orders == null ? [] : [orders];
      }
      return baseOrderBy(collection, iteratees, orders);
    }

    /**
     * Creates an array of elements split into two groups, the first of which
     * contains elements `predicate` returns truthy for, the second of which
     * contains elements `predicate` returns falsey for. The predicate is
     * invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of grouped elements.
     * @example
     *
     * var users = [
     *   { 'user': 'barney',  'age': 36, 'active': false },
     *   { 'user': 'fred',    'age': 40, 'active': true },
     *   { 'user': 'pebbles', 'age': 1,  'active': false }
     * ];
     *
     * _.partition(users, function(o) { return o.active; });
     * // => objects for [['fred'], ['barney', 'pebbles']]
     *
     * // The `_.matches` iteratee shorthand.
     * _.partition(users, { 'age': 1, 'active': false });
     * // => objects for [['pebbles'], ['barney', 'fred']]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.partition(users, ['active', false]);
     * // => objects for [['barney', 'pebbles'], ['fred']]
     *
     * // The `_.property` iteratee shorthand.
     * _.partition(users, 'active');
     * // => objects for [['fred'], ['barney', 'pebbles']]
     */
    var partition = createAggregator(function(result, value, key) {
      result[key ? 0 : 1].push(value);
    }, function() { return [[], []]; });

    /**
     * Reduces `collection` to a value which is the accumulated result of running
     * each element in `collection` thru `iteratee`, where each successive
     * invocation is supplied the return value of the previous. If `accumulator`
     * is not given, the first element of `collection` is used as the initial
     * value. The iteratee is invoked with four arguments:
     * (accumulator, value, index|key, collection).
     *
     * Many lodash methods are guarded to work as iteratees for methods like
     * `_.reduce`, `_.reduceRight`, and `_.transform`.
     *
     * The guarded methods are:
     * `assign`, `defaults`, `defaultsDeep`, `includes`, `merge`, `orderBy`,
     * and `sortBy`
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduceRight
     * @example
     *
     * _.reduce([1, 2], function(sum, n) {
     *   return sum + n;
     * }, 0);
     * // => 3
     *
     * _.reduce({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     *   return result;
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] } (iteration order is not guaranteed)
     */
    function reduce(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduce : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEach);
    }

    /**
     * This method is like `_.reduce` except that it iterates over elements of
     * `collection` from right to left.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The initial value.
     * @returns {*} Returns the accumulated value.
     * @see _.reduce
     * @example
     *
     * var array = [[0, 1], [2, 3], [4, 5]];
     *
     * _.reduceRight(array, function(flattened, other) {
     *   return flattened.concat(other);
     * }, []);
     * // => [4, 5, 2, 3, 0, 1]
     */
    function reduceRight(collection, iteratee, accumulator) {
      var func = isArray(collection) ? arrayReduceRight : baseReduce,
          initAccum = arguments.length < 3;

      return func(collection, getIteratee(iteratee, 4), accumulator, initAccum, baseEachRight);
    }

    /**
     * The opposite of `_.filter`; this method returns the elements of `collection`
     * that `predicate` does **not** return truthy for.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the new filtered array.
     * @see _.filter
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': false },
     *   { 'user': 'fred',   'age': 40, 'active': true }
     * ];
     *
     * _.reject(users, function(o) { return !o.active; });
     * // => objects for ['fred']
     *
     * // The `_.matches` iteratee shorthand.
     * _.reject(users, { 'age': 40, 'active': true });
     * // => objects for ['barney']
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.reject(users, ['active', false]);
     * // => objects for ['fred']
     *
     * // The `_.property` iteratee shorthand.
     * _.reject(users, 'active');
     * // => objects for ['barney']
     */
    function reject(collection, predicate) {
      var func = isArray(collection) ? arrayFilter : baseFilter;
      return func(collection, negate(getIteratee(predicate, 3)));
    }

    /**
     * Gets a random element from `collection`.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @returns {*} Returns the random element.
     * @example
     *
     * _.sample([1, 2, 3, 4]);
     * // => 2
     */
    function sample(collection) {
      var func = isArray(collection) ? arraySample : baseSample;
      return func(collection);
    }

    /**
     * Gets `n` random elements at unique keys from `collection` up to the
     * size of `collection`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Collection
     * @param {Array|Object} collection The collection to sample.
     * @param {number} [n=1] The number of elements to sample.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the random elements.
     * @example
     *
     * _.sampleSize([1, 2, 3], 2);
     * // => [3, 1]
     *
     * _.sampleSize([1, 2, 3], 4);
     * // => [2, 3, 1]
     */
    function sampleSize(collection, n, guard) {
      if ((guard ? isIterateeCall(collection, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      var func = isArray(collection) ? arraySampleSize : baseSampleSize;
      return func(collection, n);
    }

    /**
     * Creates an array of shuffled values, using a version of the
     * [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher-Yates_shuffle).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to shuffle.
     * @returns {Array} Returns the new shuffled array.
     * @example
     *
     * _.shuffle([1, 2, 3, 4]);
     * // => [4, 1, 3, 2]
     */
    function shuffle(collection) {
      var func = isArray(collection) ? arrayShuffle : baseShuffle;
      return func(collection);
    }

    /**
     * Gets the size of `collection` by returning its length for array-like
     * values or the number of own enumerable string keyed properties for objects.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object|string} collection The collection to inspect.
     * @returns {number} Returns the collection size.
     * @example
     *
     * _.size([1, 2, 3]);
     * // => 3
     *
     * _.size({ 'a': 1, 'b': 2 });
     * // => 2
     *
     * _.size('pebbles');
     * // => 7
     */
    function size(collection) {
      if (collection == null) {
        return 0;
      }
      if (isArrayLike(collection)) {
        return isString(collection) ? stringSize(collection) : collection.length;
      }
      var tag = getTag(collection);
      if (tag == mapTag || tag == setTag) {
        return collection.size;
      }
      return baseKeys(collection).length;
    }

    /**
     * Checks if `predicate` returns truthy for **any** element of `collection`.
     * Iteration is stopped once `predicate` returns truthy. The predicate is
     * invoked with three arguments: (value, index|key, collection).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {boolean} Returns `true` if any element passes the predicate check,
     *  else `false`.
     * @example
     *
     * _.some([null, 0, 'yes', false], Boolean);
     * // => true
     *
     * var users = [
     *   { 'user': 'barney', 'active': true },
     *   { 'user': 'fred',   'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.some(users, { 'user': 'barney', 'active': false });
     * // => false
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.some(users, ['active', false]);
     * // => true
     *
     * // The `_.property` iteratee shorthand.
     * _.some(users, 'active');
     * // => true
     */
    function some(collection, predicate, guard) {
      var func = isArray(collection) ? arraySome : baseSome;
      if (guard && isIterateeCall(collection, predicate, guard)) {
        predicate = undefined;
      }
      return func(collection, getIteratee(predicate, 3));
    }

    /**
     * Creates an array of elements, sorted in ascending order by the results of
     * running each element in a collection thru each iteratee. This method
     * performs a stable sort, that is, it preserves the original sort order of
     * equal elements. The iteratees are invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Collection
     * @param {Array|Object} collection The collection to iterate over.
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to sort by.
     * @returns {Array} Returns the new sorted array.
     * @example
     *
     * var users = [
     *   { 'user': 'fred',   'age': 48 },
     *   { 'user': 'barney', 'age': 36 },
     *   { 'user': 'fred',   'age': 40 },
     *   { 'user': 'barney', 'age': 34 }
     * ];
     *
     * _.sortBy(users, [function(o) { return o.user; }]);
     * // => objects for [['barney', 36], ['barney', 34], ['fred', 48], ['fred', 40]]
     *
     * _.sortBy(users, ['user', 'age']);
     * // => objects for [['barney', 34], ['barney', 36], ['fred', 40], ['fred', 48]]
     */
    var sortBy = baseRest(function(collection, iteratees) {
      if (collection == null) {
        return [];
      }
      var length = iteratees.length;
      if (length > 1 && isIterateeCall(collection, iteratees[0], iteratees[1])) {
        iteratees = [];
      } else if (length > 2 && isIterateeCall(iteratees[0], iteratees[1], iteratees[2])) {
        iteratees = [iteratees[0]];
      }
      return baseOrderBy(collection, baseFlatten(iteratees, 1), []);
    });

    /*------------------------------------------------------------------------*/

    /**
     * Gets the timestamp of the number of milliseconds that have elapsed since
     * the Unix epoch (1 January 1970 00:00:00 UTC).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Date
     * @returns {number} Returns the timestamp.
     * @example
     *
     * _.defer(function(stamp) {
     *   console.log(_.now() - stamp);
     * }, _.now());
     * // => Logs the number of milliseconds it took for the deferred invocation.
     */
    var now = ctxNow || function() {
      return root.Date.now();
    };

    /*------------------------------------------------------------------------*/

    /**
     * The opposite of `_.before`; this method creates a function that invokes
     * `func` once it's called `n` or more times.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {number} n The number of calls before `func` is invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var saves = ['profile', 'settings'];
     *
     * var done = _.after(saves.length, function() {
     *   console.log('done saving!');
     * });
     *
     * _.forEach(saves, function(type) {
     *   asyncSave({ 'type': type, 'complete': done });
     * });
     * // => Logs 'done saving!' after the two async saves have completed.
     */
    function after(n, func) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n < 1) {
          return func.apply(this, arguments);
        }
      };
    }

    /**
     * Creates a function that invokes `func`, with up to `n` arguments,
     * ignoring any additional arguments.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @param {number} [n=func.length] The arity cap.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.ary(parseInt, 1));
     * // => [6, 8, 10]
     */
    function ary(func, n, guard) {
      n = guard ? undefined : n;
      n = (func && n == null) ? func.length : n;
      return createWrap(func, WRAP_ARY_FLAG, undefined, undefined, undefined, undefined, n);
    }

    /**
     * Creates a function that invokes `func`, with the `this` binding and arguments
     * of the created function, while it's called less than `n` times. Subsequent
     * calls to the created function return the result of the last `func` invocation.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {number} n The number of calls at which `func` is no longer invoked.
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * jQuery(element).on('click', _.before(5, addContactToList));
     * // => Allows adding up to 4 contacts to the list.
     */
    function before(n, func) {
      var result;
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      n = toInteger(n);
      return function() {
        if (--n > 0) {
          result = func.apply(this, arguments);
        }
        if (n <= 1) {
          func = undefined;
        }
        return result;
      };
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of `thisArg`
     * and `partials` prepended to the arguments it receives.
     *
     * The `_.bind.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for partially applied arguments.
     *
     * **Note:** Unlike native `Function#bind`, this method doesn't set the "length"
     * property of bound functions.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to bind.
     * @param {*} thisArg The `this` binding of `func`.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * function greet(greeting, punctuation) {
     *   return greeting + ' ' + this.user + punctuation;
     * }
     *
     * var object = { 'user': 'fred' };
     *
     * var bound = _.bind(greet, object, 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bind(greet, object, _, '!');
     * bound('hi');
     * // => 'hi fred!'
     */
    var bind = baseRest(function(func, thisArg, partials) {
      var bitmask = WRAP_BIND_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bind));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(func, bitmask, thisArg, partials, holders);
    });

    /**
     * Creates a function that invokes the method at `object[key]` with `partials`
     * prepended to the arguments it receives.
     *
     * This method differs from `_.bind` by allowing bound functions to reference
     * methods that may be redefined or don't yet exist. See
     * [Peter Michaux's article](http://peter.michaux.ca/articles/lazy-function-definition-pattern)
     * for more details.
     *
     * The `_.bindKey.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Function
     * @param {Object} object The object to invoke the method on.
     * @param {string} key The key of the method.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new bound function.
     * @example
     *
     * var object = {
     *   'user': 'fred',
     *   'greet': function(greeting, punctuation) {
     *     return greeting + ' ' + this.user + punctuation;
     *   }
     * };
     *
     * var bound = _.bindKey(object, 'greet', 'hi');
     * bound('!');
     * // => 'hi fred!'
     *
     * object.greet = function(greeting, punctuation) {
     *   return greeting + 'ya ' + this.user + punctuation;
     * };
     *
     * bound('!');
     * // => 'hiya fred!'
     *
     * // Bound with placeholders.
     * var bound = _.bindKey(object, 'greet', _, '!');
     * bound('hi');
     * // => 'hiya fred!'
     */
    var bindKey = baseRest(function(object, key, partials) {
      var bitmask = WRAP_BIND_FLAG | WRAP_BIND_KEY_FLAG;
      if (partials.length) {
        var holders = replaceHolders(partials, getHolder(bindKey));
        bitmask |= WRAP_PARTIAL_FLAG;
      }
      return createWrap(key, bitmask, object, partials, holders);
    });

    /**
     * Creates a function that accepts arguments of `func` and either invokes
     * `func` returning its result, if at least `arity` number of arguments have
     * been provided, or returns a function that accepts the remaining `func`
     * arguments, and so on. The arity of `func` may be specified if `func.length`
     * is not sufficient.
     *
     * The `_.curry.placeholder` value, which defaults to `_` in monolithic builds,
     * may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curry(abc);
     *
     * curried(1)(2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2)(3);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(1)(_, 3)(2);
     * // => [1, 2, 3]
     */
    function curry(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curry.placeholder;
      return result;
    }

    /**
     * This method is like `_.curry` except that arguments are applied to `func`
     * in the manner of `_.partialRight` instead of `_.partial`.
     *
     * The `_.curryRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for provided arguments.
     *
     * **Note:** This method doesn't set the "length" property of curried functions.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to curry.
     * @param {number} [arity=func.length] The arity of `func`.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the new curried function.
     * @example
     *
     * var abc = function(a, b, c) {
     *   return [a, b, c];
     * };
     *
     * var curried = _.curryRight(abc);
     *
     * curried(3)(2)(1);
     * // => [1, 2, 3]
     *
     * curried(2, 3)(1);
     * // => [1, 2, 3]
     *
     * curried(1, 2, 3);
     * // => [1, 2, 3]
     *
     * // Curried with placeholders.
     * curried(3)(1, _)(2);
     * // => [1, 2, 3]
     */
    function curryRight(func, arity, guard) {
      arity = guard ? undefined : arity;
      var result = createWrap(func, WRAP_CURRY_RIGHT_FLAG, undefined, undefined, undefined, undefined, undefined, arity);
      result.placeholder = curryRight.placeholder;
      return result;
    }

    /**
     * Creates a debounced function that delays invoking `func` until after `wait`
     * milliseconds have elapsed since the last time the debounced function was
     * invoked. The debounced function comes with a `cancel` method to cancel
     * delayed `func` invocations and a `flush` method to immediately invoke them.
     * Provide `options` to indicate whether `func` should be invoked on the
     * leading and/or trailing edge of the `wait` timeout. The `func` is invoked
     * with the last arguments provided to the debounced function. Subsequent
     * calls to the debounced function return the result of the last `func`
     * invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the debounced function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.debounce` and `_.throttle`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to debounce.
     * @param {number} [wait=0] The number of milliseconds to delay.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=false]
     *  Specify invoking on the leading edge of the timeout.
     * @param {number} [options.maxWait]
     *  The maximum time `func` is allowed to be delayed before it's invoked.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new debounced function.
     * @example
     *
     * // Avoid costly calculations while the window size is in flux.
     * jQuery(window).on('resize', _.debounce(calculateLayout, 150));
     *
     * // Invoke `sendMail` when clicked, debouncing subsequent calls.
     * jQuery(element).on('click', _.debounce(sendMail, 300, {
     *   'leading': true,
     *   'trailing': false
     * }));
     *
     * // Ensure `batchLog` is invoked once after 1 second of debounced calls.
     * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });
     * var source = new EventSource('/stream');
     * jQuery(source).on('message', debounced);
     *
     * // Cancel the trailing debounced invocation.
     * jQuery(window).on('popstate', debounced.cancel);
     */
    function debounce(func, wait, options) {
      var lastArgs,
          lastThis,
          maxWait,
          result,
          timerId,
          lastCallTime,
          lastInvokeTime = 0,
          leading = false,
          maxing = false,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      wait = toNumber(wait) || 0;
      if (isObject(options)) {
        leading = !!options.leading;
        maxing = 'maxWait' in options;
        maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }

      function invokeFunc(time) {
        var args = lastArgs,
            thisArg = lastThis;

        lastArgs = lastThis = undefined;
        lastInvokeTime = time;
        result = func.apply(thisArg, args);
        return result;
      }

      function leadingEdge(time) {
        // Reset any `maxWait` timer.
        lastInvokeTime = time;
        // Start the timer for the trailing edge.
        timerId = setTimeout(timerExpired, wait);
        // Invoke the leading edge.
        return leading ? invokeFunc(time) : result;
      }

      function remainingWait(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime,
            timeWaiting = wait - timeSinceLastCall;

        return maxing
          ? nativeMin(timeWaiting, maxWait - timeSinceLastInvoke)
          : timeWaiting;
      }

      function shouldInvoke(time) {
        var timeSinceLastCall = time - lastCallTime,
            timeSinceLastInvoke = time - lastInvokeTime;

        // Either this is the first call, activity has stopped and we're at the
        // trailing edge, the system time has gone backwards and we're treating
        // it as the trailing edge, or we've hit the `maxWait` limit.
        return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||
          (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));
      }

      function timerExpired() {
        var time = now();
        if (shouldInvoke(time)) {
          return trailingEdge(time);
        }
        // Restart the timer.
        timerId = setTimeout(timerExpired, remainingWait(time));
      }

      function trailingEdge(time) {
        timerId = undefined;

        // Only invoke if we have `lastArgs` which means `func` has been
        // debounced at least once.
        if (trailing && lastArgs) {
          return invokeFunc(time);
        }
        lastArgs = lastThis = undefined;
        return result;
      }

      function cancel() {
        if (timerId !== undefined) {
          clearTimeout(timerId);
        }
        lastInvokeTime = 0;
        lastArgs = lastCallTime = lastThis = timerId = undefined;
      }

      function flush() {
        return timerId === undefined ? result : trailingEdge(now());
      }

      function debounced() {
        var time = now(),
            isInvoking = shouldInvoke(time);

        lastArgs = arguments;
        lastThis = this;
        lastCallTime = time;

        if (isInvoking) {
          if (timerId === undefined) {
            return leadingEdge(lastCallTime);
          }
          if (maxing) {
            // Handle invocations in a tight loop.
            clearTimeout(timerId);
            timerId = setTimeout(timerExpired, wait);
            return invokeFunc(lastCallTime);
          }
        }
        if (timerId === undefined) {
          timerId = setTimeout(timerExpired, wait);
        }
        return result;
      }
      debounced.cancel = cancel;
      debounced.flush = flush;
      return debounced;
    }

    /**
     * Defers invoking the `func` until the current call stack has cleared. Any
     * additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to defer.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.defer(function(text) {
     *   console.log(text);
     * }, 'deferred');
     * // => Logs 'deferred' after one millisecond.
     */
    var defer = baseRest(function(func, args) {
      return baseDelay(func, 1, args);
    });

    /**
     * Invokes `func` after `wait` milliseconds. Any additional arguments are
     * provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to delay.
     * @param {number} wait The number of milliseconds to delay invocation.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {number} Returns the timer id.
     * @example
     *
     * _.delay(function(text) {
     *   console.log(text);
     * }, 1000, 'later');
     * // => Logs 'later' after one second.
     */
    var delay = baseRest(function(func, wait, args) {
      return baseDelay(func, toNumber(wait) || 0, args);
    });

    /**
     * Creates a function that invokes `func` with arguments reversed.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to flip arguments for.
     * @returns {Function} Returns the new flipped function.
     * @example
     *
     * var flipped = _.flip(function() {
     *   return _.toArray(arguments);
     * });
     *
     * flipped('a', 'b', 'c', 'd');
     * // => ['d', 'c', 'b', 'a']
     */
    function flip(func) {
      return createWrap(func, WRAP_FLIP_FLAG);
    }

    /**
     * Creates a function that memoizes the result of `func`. If `resolver` is
     * provided, it determines the cache key for storing the result based on the
     * arguments provided to the memoized function. By default, the first argument
     * provided to the memoized function is used as the map cache key. The `func`
     * is invoked with the `this` binding of the memoized function.
     *
     * **Note:** The cache is exposed as the `cache` property on the memoized
     * function. Its creation may be customized by replacing the `_.memoize.Cache`
     * constructor with one whose instances implement the
     * [`Map`](http://ecma-international.org/ecma-262/7.0/#sec-properties-of-the-map-prototype-object)
     * method interface of `clear`, `delete`, `get`, `has`, and `set`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to have its output memoized.
     * @param {Function} [resolver] The function to resolve the cache key.
     * @returns {Function} Returns the new memoized function.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     * var other = { 'c': 3, 'd': 4 };
     *
     * var values = _.memoize(_.values);
     * values(object);
     * // => [1, 2]
     *
     * values(other);
     * // => [3, 4]
     *
     * object.a = 2;
     * values(object);
     * // => [1, 2]
     *
     * // Modify the result cache.
     * values.cache.set(object, ['a', 'b']);
     * values(object);
     * // => ['a', 'b']
     *
     * // Replace `_.memoize.Cache`.
     * _.memoize.Cache = WeakMap;
     */
    function memoize(func, resolver) {
      if (typeof func != 'function' || (resolver != null && typeof resolver != 'function')) {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      var memoized = function() {
        var args = arguments,
            key = resolver ? resolver.apply(this, args) : args[0],
            cache = memoized.cache;

        if (cache.has(key)) {
          return cache.get(key);
        }
        var result = func.apply(this, args);
        memoized.cache = cache.set(key, result) || cache;
        return result;
      };
      memoized.cache = new (memoize.Cache || MapCache);
      return memoized;
    }

    // Expose `MapCache`.
    memoize.Cache = MapCache;

    /**
     * Creates a function that negates the result of the predicate `func`. The
     * `func` predicate is invoked with the `this` binding and arguments of the
     * created function.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} predicate The predicate to negate.
     * @returns {Function} Returns the new negated function.
     * @example
     *
     * function isEven(n) {
     *   return n % 2 == 0;
     * }
     *
     * _.filter([1, 2, 3, 4, 5, 6], _.negate(isEven));
     * // => [1, 3, 5]
     */
    function negate(predicate) {
      if (typeof predicate != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      return function() {
        var args = arguments;
        switch (args.length) {
          case 0: return !predicate.call(this);
          case 1: return !predicate.call(this, args[0]);
          case 2: return !predicate.call(this, args[0], args[1]);
          case 3: return !predicate.call(this, args[0], args[1], args[2]);
        }
        return !predicate.apply(this, args);
      };
    }

    /**
     * Creates a function that is restricted to invoking `func` once. Repeat calls
     * to the function return the value of the first invocation. The `func` is
     * invoked with the `this` binding and arguments of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to restrict.
     * @returns {Function} Returns the new restricted function.
     * @example
     *
     * var initialize = _.once(createApplication);
     * initialize();
     * initialize();
     * // => `createApplication` is invoked once
     */
    function once(func) {
      return before(2, func);
    }

    /**
     * Creates a function that invokes `func` with its arguments transformed.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Function
     * @param {Function} func The function to wrap.
     * @param {...(Function|Function[])} [transforms=[_.identity]]
     *  The argument transforms.
     * @returns {Function} Returns the new function.
     * @example
     *
     * function doubled(n) {
     *   return n * 2;
     * }
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var func = _.overArgs(function(x, y) {
     *   return [x, y];
     * }, [square, doubled]);
     *
     * func(9, 3);
     * // => [81, 6]
     *
     * func(10, 5);
     * // => [100, 10]
     */
    var overArgs = castRest(function(func, transforms) {
      transforms = (transforms.length == 1 && isArray(transforms[0]))
        ? arrayMap(transforms[0], baseUnary(getIteratee()))
        : arrayMap(baseFlatten(transforms, 1), baseUnary(getIteratee()));

      var funcsLength = transforms.length;
      return baseRest(function(args) {
        var index = -1,
            length = nativeMin(args.length, funcsLength);

        while (++index < length) {
          args[index] = transforms[index].call(this, args[index]);
        }
        return apply(func, this, args);
      });
    });

    /**
     * Creates a function that invokes `func` with `partials` prepended to the
     * arguments it receives. This method is like `_.bind` except it does **not**
     * alter the `this` binding.
     *
     * The `_.partial.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 0.2.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var sayHelloTo = _.partial(greet, 'hello');
     * sayHelloTo('fred');
     * // => 'hello fred'
     *
     * // Partially applied with placeholders.
     * var greetFred = _.partial(greet, _, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     */
    var partial = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partial));
      return createWrap(func, WRAP_PARTIAL_FLAG, undefined, partials, holders);
    });

    /**
     * This method is like `_.partial` except that partially applied arguments
     * are appended to the arguments it receives.
     *
     * The `_.partialRight.placeholder` value, which defaults to `_` in monolithic
     * builds, may be used as a placeholder for partially applied arguments.
     *
     * **Note:** This method doesn't set the "length" property of partially
     * applied functions.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Function
     * @param {Function} func The function to partially apply arguments to.
     * @param {...*} [partials] The arguments to be partially applied.
     * @returns {Function} Returns the new partially applied function.
     * @example
     *
     * function greet(greeting, name) {
     *   return greeting + ' ' + name;
     * }
     *
     * var greetFred = _.partialRight(greet, 'fred');
     * greetFred('hi');
     * // => 'hi fred'
     *
     * // Partially applied with placeholders.
     * var sayHelloTo = _.partialRight(greet, 'hello', _);
     * sayHelloTo('fred');
     * // => 'hello fred'
     */
    var partialRight = baseRest(function(func, partials) {
      var holders = replaceHolders(partials, getHolder(partialRight));
      return createWrap(func, WRAP_PARTIAL_RIGHT_FLAG, undefined, partials, holders);
    });

    /**
     * Creates a function that invokes `func` with arguments arranged according
     * to the specified `indexes` where the argument value at the first index is
     * provided as the first argument, the argument value at the second index is
     * provided as the second argument, and so on.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Function
     * @param {Function} func The function to rearrange arguments for.
     * @param {...(number|number[])} indexes The arranged argument indexes.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var rearged = _.rearg(function(a, b, c) {
     *   return [a, b, c];
     * }, [2, 0, 1]);
     *
     * rearged('b', 'c', 'a')
     * // => ['a', 'b', 'c']
     */
    var rearg = flatRest(function(func, indexes) {
      return createWrap(func, WRAP_REARG_FLAG, undefined, undefined, undefined, indexes);
    });

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * created function and arguments from `start` and beyond provided as
     * an array.
     *
     * **Note:** This method is based on the
     * [rest parameter](https://mdn.io/rest_parameters).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to apply a rest parameter to.
     * @param {number} [start=func.length-1] The start position of the rest parameter.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.rest(function(what, names) {
     *   return what + ' ' + _.initial(names).join(', ') +
     *     (_.size(names) > 1 ? ', & ' : '') + _.last(names);
     * });
     *
     * say('hello', 'fred', 'barney', 'pebbles');
     * // => 'hello fred, barney, & pebbles'
     */
    function rest(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start === undefined ? start : toInteger(start);
      return baseRest(func, start);
    }

    /**
     * Creates a function that invokes `func` with the `this` binding of the
     * create function and an array of arguments much like
     * [`Function#apply`](http://www.ecma-international.org/ecma-262/7.0/#sec-function.prototype.apply).
     *
     * **Note:** This method is based on the
     * [spread operator](https://mdn.io/spread_operator).
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Function
     * @param {Function} func The function to spread arguments over.
     * @param {number} [start=0] The start position of the spread.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var say = _.spread(function(who, what) {
     *   return who + ' says ' + what;
     * });
     *
     * say(['fred', 'hello']);
     * // => 'fred says hello'
     *
     * var numbers = Promise.all([
     *   Promise.resolve(40),
     *   Promise.resolve(36)
     * ]);
     *
     * numbers.then(_.spread(function(x, y) {
     *   return x + y;
     * }));
     * // => a Promise of 76
     */
    function spread(func, start) {
      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      start = start == null ? 0 : nativeMax(toInteger(start), 0);
      return baseRest(function(args) {
        var array = args[start],
            otherArgs = castSlice(args, 0, start);

        if (array) {
          arrayPush(otherArgs, array);
        }
        return apply(func, this, otherArgs);
      });
    }

    /**
     * Creates a throttled function that only invokes `func` at most once per
     * every `wait` milliseconds. The throttled function comes with a `cancel`
     * method to cancel delayed `func` invocations and a `flush` method to
     * immediately invoke them. Provide `options` to indicate whether `func`
     * should be invoked on the leading and/or trailing edge of the `wait`
     * timeout. The `func` is invoked with the last arguments provided to the
     * throttled function. Subsequent calls to the throttled function return the
     * result of the last `func` invocation.
     *
     * **Note:** If `leading` and `trailing` options are `true`, `func` is
     * invoked on the trailing edge of the timeout only if the throttled function
     * is invoked more than once during the `wait` timeout.
     *
     * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred
     * until to the next tick, similar to `setTimeout` with a timeout of `0`.
     *
     * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)
     * for details over the differences between `_.throttle` and `_.debounce`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {Function} func The function to throttle.
     * @param {number} [wait=0] The number of milliseconds to throttle invocations to.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.leading=true]
     *  Specify invoking on the leading edge of the timeout.
     * @param {boolean} [options.trailing=true]
     *  Specify invoking on the trailing edge of the timeout.
     * @returns {Function} Returns the new throttled function.
     * @example
     *
     * // Avoid excessively updating the position while scrolling.
     * jQuery(window).on('scroll', _.throttle(updatePosition, 100));
     *
     * // Invoke `renewToken` when the click event is fired, but not more than once every 5 minutes.
     * var throttled = _.throttle(renewToken, 300000, { 'trailing': false });
     * jQuery(element).on('click', throttled);
     *
     * // Cancel the trailing throttled invocation.
     * jQuery(window).on('popstate', throttled.cancel);
     */
    function throttle(func, wait, options) {
      var leading = true,
          trailing = true;

      if (typeof func != 'function') {
        throw new TypeError(FUNC_ERROR_TEXT);
      }
      if (isObject(options)) {
        leading = 'leading' in options ? !!options.leading : leading;
        trailing = 'trailing' in options ? !!options.trailing : trailing;
      }
      return debounce(func, wait, {
        'leading': leading,
        'maxWait': wait,
        'trailing': trailing
      });
    }

    /**
     * Creates a function that accepts up to one argument, ignoring any
     * additional arguments.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Function
     * @param {Function} func The function to cap arguments for.
     * @returns {Function} Returns the new capped function.
     * @example
     *
     * _.map(['6', '8', '10'], _.unary(parseInt));
     * // => [6, 8, 10]
     */
    function unary(func) {
      return ary(func, 1);
    }

    /**
     * Creates a function that provides `value` to `wrapper` as its first
     * argument. Any additional arguments provided to the function are appended
     * to those provided to the `wrapper`. The wrapper is invoked with the `this`
     * binding of the created function.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Function
     * @param {*} value The value to wrap.
     * @param {Function} [wrapper=identity] The wrapper function.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var p = _.wrap(_.escape, function(func, text) {
     *   return '<p>' + func(text) + '</p>';
     * });
     *
     * p('fred, barney, & pebbles');
     * // => '<p>fred, barney, &amp; pebbles</p>'
     */
    function wrap(value, wrapper) {
      return partial(castFunction(wrapper), value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Casts `value` as an array if it's not one.
     *
     * @static
     * @memberOf _
     * @since 4.4.0
     * @category Lang
     * @param {*} value The value to inspect.
     * @returns {Array} Returns the cast array.
     * @example
     *
     * _.castArray(1);
     * // => [1]
     *
     * _.castArray({ 'a': 1 });
     * // => [{ 'a': 1 }]
     *
     * _.castArray('abc');
     * // => ['abc']
     *
     * _.castArray(null);
     * // => [null]
     *
     * _.castArray(undefined);
     * // => [undefined]
     *
     * _.castArray();
     * // => []
     *
     * var array = [1, 2, 3];
     * console.log(_.castArray(array) === array);
     * // => true
     */
    function castArray() {
      if (!arguments.length) {
        return [];
      }
      var value = arguments[0];
      return isArray(value) ? value : [value];
    }

    /**
     * Creates a shallow clone of `value`.
     *
     * **Note:** This method is loosely based on the
     * [structured clone algorithm](https://mdn.io/Structured_clone_algorithm)
     * and supports cloning arrays, array buffers, booleans, date objects, maps,
     * numbers, `Object` objects, regexes, sets, strings, symbols, and typed
     * arrays. The own enumerable properties of `arguments` objects are cloned
     * as plain objects. An empty object is returned for uncloneable values such
     * as error objects, functions, DOM nodes, and WeakMaps.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to clone.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeep
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var shallow = _.clone(objects);
     * console.log(shallow[0] === objects[0]);
     * // => true
     */
    function clone(value) {
      return baseClone(value, CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.clone` except that it accepts `customizer` which
     * is invoked to produce the cloned value. If `customizer` returns `undefined`,
     * cloning is handled by the method instead. The `customizer` is invoked with
     * up to four arguments; (value [, index|key, object, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the cloned value.
     * @see _.cloneDeepWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(false);
     *   }
     * }
     *
     * var el = _.cloneWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 0
     */
    function cloneWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * This method is like `_.clone` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @returns {*} Returns the deep cloned value.
     * @see _.clone
     * @example
     *
     * var objects = [{ 'a': 1 }, { 'b': 2 }];
     *
     * var deep = _.cloneDeep(objects);
     * console.log(deep[0] === objects[0]);
     * // => false
     */
    function cloneDeep(value) {
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG);
    }

    /**
     * This method is like `_.cloneWith` except that it recursively clones `value`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to recursively clone.
     * @param {Function} [customizer] The function to customize cloning.
     * @returns {*} Returns the deep cloned value.
     * @see _.cloneWith
     * @example
     *
     * function customizer(value) {
     *   if (_.isElement(value)) {
     *     return value.cloneNode(true);
     *   }
     * }
     *
     * var el = _.cloneDeepWith(document.body, customizer);
     *
     * console.log(el === document.body);
     * // => false
     * console.log(el.nodeName);
     * // => 'BODY'
     * console.log(el.childNodes.length);
     * // => 20
     */
    function cloneDeepWith(value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseClone(value, CLONE_DEEP_FLAG | CLONE_SYMBOLS_FLAG, customizer);
    }

    /**
     * Checks if `object` conforms to `source` by invoking the predicate
     * properties of `source` with the corresponding property values of `object`.
     *
     * **Note:** This method is equivalent to `_.conforms` when `source` is
     * partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property predicates to conform to.
     * @returns {boolean} Returns `true` if `object` conforms, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 1; } });
     * // => true
     *
     * _.conformsTo(object, { 'b': function(n) { return n > 2; } });
     * // => false
     */
    function conformsTo(object, source) {
      return source == null || baseConformsTo(object, source, keys(source));
    }

    /**
     * Performs a
     * [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)
     * comparison between two values to determine if they are equivalent.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.eq(object, object);
     * // => true
     *
     * _.eq(object, other);
     * // => false
     *
     * _.eq('a', 'a');
     * // => true
     *
     * _.eq('a', Object('a'));
     * // => false
     *
     * _.eq(NaN, NaN);
     * // => true
     */
    function eq(value, other) {
      return value === other || (value !== value && other !== other);
    }

    /**
     * Checks if `value` is greater than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than `other`,
     *  else `false`.
     * @see _.lt
     * @example
     *
     * _.gt(3, 1);
     * // => true
     *
     * _.gt(3, 3);
     * // => false
     *
     * _.gt(1, 3);
     * // => false
     */
    var gt = createRelationalOperation(baseGt);

    /**
     * Checks if `value` is greater than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is greater than or equal to
     *  `other`, else `false`.
     * @see _.lte
     * @example
     *
     * _.gte(3, 1);
     * // => true
     *
     * _.gte(3, 3);
     * // => true
     *
     * _.gte(1, 3);
     * // => false
     */
    var gte = createRelationalOperation(function(value, other) {
      return value >= other;
    });

    /**
     * Checks if `value` is likely an `arguments` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an `arguments` object,
     *  else `false`.
     * @example
     *
     * _.isArguments(function() { return arguments; }());
     * // => true
     *
     * _.isArguments([1, 2, 3]);
     * // => false
     */
    var isArguments = baseIsArguments(function() { return arguments; }()) ? baseIsArguments : function(value) {
      return isObjectLike(value) && hasOwnProperty.call(value, 'callee') &&
        !propertyIsEnumerable.call(value, 'callee');
    };

    /**
     * Checks if `value` is classified as an `Array` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array, else `false`.
     * @example
     *
     * _.isArray([1, 2, 3]);
     * // => true
     *
     * _.isArray(document.body.children);
     * // => false
     *
     * _.isArray('abc');
     * // => false
     *
     * _.isArray(_.noop);
     * // => false
     */
    var isArray = Array.isArray;

    /**
     * Checks if `value` is classified as an `ArrayBuffer` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array buffer, else `false`.
     * @example
     *
     * _.isArrayBuffer(new ArrayBuffer(2));
     * // => true
     *
     * _.isArrayBuffer(new Array(2));
     * // => false
     */
    var isArrayBuffer = nodeIsArrayBuffer ? baseUnary(nodeIsArrayBuffer) : baseIsArrayBuffer;

    /**
     * Checks if `value` is array-like. A value is considered array-like if it's
     * not a function and has a `value.length` that's an integer greater than or
     * equal to `0` and less than or equal to `Number.MAX_SAFE_INTEGER`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is array-like, else `false`.
     * @example
     *
     * _.isArrayLike([1, 2, 3]);
     * // => true
     *
     * _.isArrayLike(document.body.children);
     * // => true
     *
     * _.isArrayLike('abc');
     * // => true
     *
     * _.isArrayLike(_.noop);
     * // => false
     */
    function isArrayLike(value) {
      return value != null && isLength(value.length) && !isFunction(value);
    }

    /**
     * This method is like `_.isArrayLike` except that it also checks if `value`
     * is an object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an array-like object,
     *  else `false`.
     * @example
     *
     * _.isArrayLikeObject([1, 2, 3]);
     * // => true
     *
     * _.isArrayLikeObject(document.body.children);
     * // => true
     *
     * _.isArrayLikeObject('abc');
     * // => false
     *
     * _.isArrayLikeObject(_.noop);
     * // => false
     */
    function isArrayLikeObject(value) {
      return isObjectLike(value) && isArrayLike(value);
    }

    /**
     * Checks if `value` is classified as a boolean primitive or object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a boolean, else `false`.
     * @example
     *
     * _.isBoolean(false);
     * // => true
     *
     * _.isBoolean(null);
     * // => false
     */
    function isBoolean(value) {
      return value === true || value === false ||
        (isObjectLike(value) && baseGetTag(value) == boolTag);
    }

    /**
     * Checks if `value` is a buffer.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a buffer, else `false`.
     * @example
     *
     * _.isBuffer(new Buffer(2));
     * // => true
     *
     * _.isBuffer(new Uint8Array(2));
     * // => false
     */
    var isBuffer = nativeIsBuffer || stubFalse;

    /**
     * Checks if `value` is classified as a `Date` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a date object, else `false`.
     * @example
     *
     * _.isDate(new Date);
     * // => true
     *
     * _.isDate('Mon April 23 2012');
     * // => false
     */
    var isDate = nodeIsDate ? baseUnary(nodeIsDate) : baseIsDate;

    /**
     * Checks if `value` is likely a DOM element.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a DOM element, else `false`.
     * @example
     *
     * _.isElement(document.body);
     * // => true
     *
     * _.isElement('<body>');
     * // => false
     */
    function isElement(value) {
      return isObjectLike(value) && value.nodeType === 1 && !isPlainObject(value);
    }

    /**
     * Checks if `value` is an empty object, collection, map, or set.
     *
     * Objects are considered empty if they have no own enumerable string keyed
     * properties.
     *
     * Array-like values such as `arguments` objects, arrays, buffers, strings, or
     * jQuery-like collections are considered empty if they have a `length` of `0`.
     * Similarly, maps and sets are considered empty if they have a `size` of `0`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is empty, else `false`.
     * @example
     *
     * _.isEmpty(null);
     * // => true
     *
     * _.isEmpty(true);
     * // => true
     *
     * _.isEmpty(1);
     * // => true
     *
     * _.isEmpty([1, 2, 3]);
     * // => false
     *
     * _.isEmpty({ 'a': 1 });
     * // => false
     */
    function isEmpty(value) {
      if (value == null) {
        return true;
      }
      if (isArrayLike(value) &&
          (isArray(value) || typeof value == 'string' || typeof value.splice == 'function' ||
            isBuffer(value) || isTypedArray(value) || isArguments(value))) {
        return !value.length;
      }
      var tag = getTag(value);
      if (tag == mapTag || tag == setTag) {
        return !value.size;
      }
      if (isPrototype(value)) {
        return !baseKeys(value).length;
      }
      for (var key in value) {
        if (hasOwnProperty.call(value, key)) {
          return false;
        }
      }
      return true;
    }

    /**
     * Performs a deep comparison between two values to determine if they are
     * equivalent.
     *
     * **Note:** This method supports comparing arrays, array buffers, booleans,
     * date objects, error objects, maps, numbers, `Object` objects, regexes,
     * sets, strings, symbols, and typed arrays. `Object` objects are compared
     * by their own, not inherited, enumerable properties. Functions and DOM
     * nodes are compared by strict equality, i.e. `===`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * var object = { 'a': 1 };
     * var other = { 'a': 1 };
     *
     * _.isEqual(object, other);
     * // => true
     *
     * object === other;
     * // => false
     */
    function isEqual(value, other) {
      return baseIsEqual(value, other);
    }

    /**
     * This method is like `_.isEqual` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with up to
     * six arguments: (objValue, othValue [, index|key, object, other, stack]).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if the values are equivalent, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, othValue) {
     *   if (isGreeting(objValue) && isGreeting(othValue)) {
     *     return true;
     *   }
     * }
     *
     * var array = ['hello', 'goodbye'];
     * var other = ['hi', 'goodbye'];
     *
     * _.isEqualWith(array, other, customizer);
     * // => true
     */
    function isEqualWith(value, other, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      var result = customizer ? customizer(value, other) : undefined;
      return result === undefined ? baseIsEqual(value, other, undefined, customizer) : !!result;
    }

    /**
     * Checks if `value` is an `Error`, `EvalError`, `RangeError`, `ReferenceError`,
     * `SyntaxError`, `TypeError`, or `URIError` object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an error object, else `false`.
     * @example
     *
     * _.isError(new Error);
     * // => true
     *
     * _.isError(Error);
     * // => false
     */
    function isError(value) {
      if (!isObjectLike(value)) {
        return false;
      }
      var tag = baseGetTag(value);
      return tag == errorTag || tag == domExcTag ||
        (typeof value.message == 'string' && typeof value.name == 'string' && !isPlainObject(value));
    }

    /**
     * Checks if `value` is a finite primitive number.
     *
     * **Note:** This method is based on
     * [`Number.isFinite`](https://mdn.io/Number/isFinite).
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a finite number, else `false`.
     * @example
     *
     * _.isFinite(3);
     * // => true
     *
     * _.isFinite(Number.MIN_VALUE);
     * // => true
     *
     * _.isFinite(Infinity);
     * // => false
     *
     * _.isFinite('3');
     * // => false
     */
    function isFinite(value) {
      return typeof value == 'number' && nativeIsFinite(value);
    }

    /**
     * Checks if `value` is classified as a `Function` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a function, else `false`.
     * @example
     *
     * _.isFunction(_);
     * // => true
     *
     * _.isFunction(/abc/);
     * // => false
     */
    function isFunction(value) {
      if (!isObject(value)) {
        return false;
      }
      // The use of `Object#toString` avoids issues with the `typeof` operator
      // in Safari 9 which returns 'object' for typed arrays and other constructors.
      var tag = baseGetTag(value);
      return tag == funcTag || tag == genTag || tag == asyncTag || tag == proxyTag;
    }

    /**
     * Checks if `value` is an integer.
     *
     * **Note:** This method is based on
     * [`Number.isInteger`](https://mdn.io/Number/isInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an integer, else `false`.
     * @example
     *
     * _.isInteger(3);
     * // => true
     *
     * _.isInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isInteger(Infinity);
     * // => false
     *
     * _.isInteger('3');
     * // => false
     */
    function isInteger(value) {
      return typeof value == 'number' && value == toInteger(value);
    }

    /**
     * Checks if `value` is a valid array-like length.
     *
     * **Note:** This method is loosely based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a valid length, else `false`.
     * @example
     *
     * _.isLength(3);
     * // => true
     *
     * _.isLength(Number.MIN_VALUE);
     * // => false
     *
     * _.isLength(Infinity);
     * // => false
     *
     * _.isLength('3');
     * // => false
     */
    function isLength(value) {
      return typeof value == 'number' &&
        value > -1 && value % 1 == 0 && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is the
     * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)
     * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is an object, else `false`.
     * @example
     *
     * _.isObject({});
     * // => true
     *
     * _.isObject([1, 2, 3]);
     * // => true
     *
     * _.isObject(_.noop);
     * // => true
     *
     * _.isObject(null);
     * // => false
     */
    function isObject(value) {
      var type = typeof value;
      return value != null && (type == 'object' || type == 'function');
    }

    /**
     * Checks if `value` is object-like. A value is object-like if it's not `null`
     * and has a `typeof` result of "object".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is object-like, else `false`.
     * @example
     *
     * _.isObjectLike({});
     * // => true
     *
     * _.isObjectLike([1, 2, 3]);
     * // => true
     *
     * _.isObjectLike(_.noop);
     * // => false
     *
     * _.isObjectLike(null);
     * // => false
     */
    function isObjectLike(value) {
      return value != null && typeof value == 'object';
    }

    /**
     * Checks if `value` is classified as a `Map` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a map, else `false`.
     * @example
     *
     * _.isMap(new Map);
     * // => true
     *
     * _.isMap(new WeakMap);
     * // => false
     */
    var isMap = nodeIsMap ? baseUnary(nodeIsMap) : baseIsMap;

    /**
     * Performs a partial deep comparison between `object` and `source` to
     * determine if `object` contains equivalent property values.
     *
     * **Note:** This method is equivalent to `_.matches` when `source` is
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * var object = { 'a': 1, 'b': 2 };
     *
     * _.isMatch(object, { 'b': 2 });
     * // => true
     *
     * _.isMatch(object, { 'b': 1 });
     * // => false
     */
    function isMatch(object, source) {
      return object === source || baseIsMatch(object, source, getMatchData(source));
    }

    /**
     * This method is like `_.isMatch` except that it accepts `customizer` which
     * is invoked to compare values. If `customizer` returns `undefined`, comparisons
     * are handled by the method instead. The `customizer` is invoked with five
     * arguments: (objValue, srcValue, index|key, object, source).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {Object} object The object to inspect.
     * @param {Object} source The object of property values to match.
     * @param {Function} [customizer] The function to customize comparisons.
     * @returns {boolean} Returns `true` if `object` is a match, else `false`.
     * @example
     *
     * function isGreeting(value) {
     *   return /^h(?:i|ello)$/.test(value);
     * }
     *
     * function customizer(objValue, srcValue) {
     *   if (isGreeting(objValue) && isGreeting(srcValue)) {
     *     return true;
     *   }
     * }
     *
     * var object = { 'greeting': 'hello' };
     * var source = { 'greeting': 'hi' };
     *
     * _.isMatchWith(object, source, customizer);
     * // => true
     */
    function isMatchWith(object, source, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return baseIsMatch(object, source, getMatchData(source), customizer);
    }

    /**
     * Checks if `value` is `NaN`.
     *
     * **Note:** This method is based on
     * [`Number.isNaN`](https://mdn.io/Number/isNaN) and is not the same as
     * global [`isNaN`](https://mdn.io/isNaN) which returns `true` for
     * `undefined` and other non-number values.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `NaN`, else `false`.
     * @example
     *
     * _.isNaN(NaN);
     * // => true
     *
     * _.isNaN(new Number(NaN));
     * // => true
     *
     * isNaN(undefined);
     * // => true
     *
     * _.isNaN(undefined);
     * // => false
     */
    function isNaN(value) {
      // An `NaN` primitive is the only value that is not equal to itself.
      // Perform the `toStringTag` check first to avoid errors with some
      // ActiveX objects in IE.
      return isNumber(value) && value != +value;
    }

    /**
     * Checks if `value` is a pristine native function.
     *
     * **Note:** This method can't reliably detect native functions in the presence
     * of the core-js package because core-js circumvents this kind of detection.
     * Despite multiple requests, the core-js maintainer has made it clear: any
     * attempt to fix the detection will be obstructed. As a result, we're left
     * with little choice but to throw an error. Unfortunately, this also affects
     * packages, like [babel-polyfill](https://www.npmjs.com/package/babel-polyfill),
     * which rely on core-js.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a native function,
     *  else `false`.
     * @example
     *
     * _.isNative(Array.prototype.push);
     * // => true
     *
     * _.isNative(_);
     * // => false
     */
    function isNative(value) {
      if (isMaskable(value)) {
        throw new Error(CORE_ERROR_TEXT);
      }
      return baseIsNative(value);
    }

    /**
     * Checks if `value` is `null`.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `null`, else `false`.
     * @example
     *
     * _.isNull(null);
     * // => true
     *
     * _.isNull(void 0);
     * // => false
     */
    function isNull(value) {
      return value === null;
    }

    /**
     * Checks if `value` is `null` or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is nullish, else `false`.
     * @example
     *
     * _.isNil(null);
     * // => true
     *
     * _.isNil(void 0);
     * // => true
     *
     * _.isNil(NaN);
     * // => false
     */
    function isNil(value) {
      return value == null;
    }

    /**
     * Checks if `value` is classified as a `Number` primitive or object.
     *
     * **Note:** To exclude `Infinity`, `-Infinity`, and `NaN`, which are
     * classified as numbers, use the `_.isFinite` method.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a number, else `false`.
     * @example
     *
     * _.isNumber(3);
     * // => true
     *
     * _.isNumber(Number.MIN_VALUE);
     * // => true
     *
     * _.isNumber(Infinity);
     * // => true
     *
     * _.isNumber('3');
     * // => false
     */
    function isNumber(value) {
      return typeof value == 'number' ||
        (isObjectLike(value) && baseGetTag(value) == numberTag);
    }

    /**
     * Checks if `value` is a plain object, that is, an object created by the
     * `Object` constructor or one with a `[[Prototype]]` of `null`.
     *
     * @static
     * @memberOf _
     * @since 0.8.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * _.isPlainObject(new Foo);
     * // => false
     *
     * _.isPlainObject([1, 2, 3]);
     * // => false
     *
     * _.isPlainObject({ 'x': 0, 'y': 0 });
     * // => true
     *
     * _.isPlainObject(Object.create(null));
     * // => true
     */
    function isPlainObject(value) {
      if (!isObjectLike(value) || baseGetTag(value) != objectTag) {
        return false;
      }
      var proto = getPrototype(value);
      if (proto === null) {
        return true;
      }
      var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;
      return typeof Ctor == 'function' && Ctor instanceof Ctor &&
        funcToString.call(Ctor) == objectCtorString;
    }

    /**
     * Checks if `value` is classified as a `RegExp` object.
     *
     * @static
     * @memberOf _
     * @since 0.1.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a regexp, else `false`.
     * @example
     *
     * _.isRegExp(/abc/);
     * // => true
     *
     * _.isRegExp('/abc/');
     * // => false
     */
    var isRegExp = nodeIsRegExp ? baseUnary(nodeIsRegExp) : baseIsRegExp;

    /**
     * Checks if `value` is a safe integer. An integer is safe if it's an IEEE-754
     * double precision number which isn't the result of a rounded unsafe integer.
     *
     * **Note:** This method is based on
     * [`Number.isSafeInteger`](https://mdn.io/Number/isSafeInteger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a safe integer, else `false`.
     * @example
     *
     * _.isSafeInteger(3);
     * // => true
     *
     * _.isSafeInteger(Number.MIN_VALUE);
     * // => false
     *
     * _.isSafeInteger(Infinity);
     * // => false
     *
     * _.isSafeInteger('3');
     * // => false
     */
    function isSafeInteger(value) {
      return isInteger(value) && value >= -MAX_SAFE_INTEGER && value <= MAX_SAFE_INTEGER;
    }

    /**
     * Checks if `value` is classified as a `Set` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a set, else `false`.
     * @example
     *
     * _.isSet(new Set);
     * // => true
     *
     * _.isSet(new WeakSet);
     * // => false
     */
    var isSet = nodeIsSet ? baseUnary(nodeIsSet) : baseIsSet;

    /**
     * Checks if `value` is classified as a `String` primitive or object.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a string, else `false`.
     * @example
     *
     * _.isString('abc');
     * // => true
     *
     * _.isString(1);
     * // => false
     */
    function isString(value) {
      return typeof value == 'string' ||
        (!isArray(value) && isObjectLike(value) && baseGetTag(value) == stringTag);
    }

    /**
     * Checks if `value` is classified as a `Symbol` primitive or object.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.
     * @example
     *
     * _.isSymbol(Symbol.iterator);
     * // => true
     *
     * _.isSymbol('abc');
     * // => false
     */
    function isSymbol(value) {
      return typeof value == 'symbol' ||
        (isObjectLike(value) && baseGetTag(value) == symbolTag);
    }

    /**
     * Checks if `value` is classified as a typed array.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a typed array, else `false`.
     * @example
     *
     * _.isTypedArray(new Uint8Array);
     * // => true
     *
     * _.isTypedArray([]);
     * // => false
     */
    var isTypedArray = nodeIsTypedArray ? baseUnary(nodeIsTypedArray) : baseIsTypedArray;

    /**
     * Checks if `value` is `undefined`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is `undefined`, else `false`.
     * @example
     *
     * _.isUndefined(void 0);
     * // => true
     *
     * _.isUndefined(null);
     * // => false
     */
    function isUndefined(value) {
      return value === undefined;
    }

    /**
     * Checks if `value` is classified as a `WeakMap` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak map, else `false`.
     * @example
     *
     * _.isWeakMap(new WeakMap);
     * // => true
     *
     * _.isWeakMap(new Map);
     * // => false
     */
    function isWeakMap(value) {
      return isObjectLike(value) && getTag(value) == weakMapTag;
    }

    /**
     * Checks if `value` is classified as a `WeakSet` object.
     *
     * @static
     * @memberOf _
     * @since 4.3.0
     * @category Lang
     * @param {*} value The value to check.
     * @returns {boolean} Returns `true` if `value` is a weak set, else `false`.
     * @example
     *
     * _.isWeakSet(new WeakSet);
     * // => true
     *
     * _.isWeakSet(new Set);
     * // => false
     */
    function isWeakSet(value) {
      return isObjectLike(value) && baseGetTag(value) == weakSetTag;
    }

    /**
     * Checks if `value` is less than `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than `other`,
     *  else `false`.
     * @see _.gt
     * @example
     *
     * _.lt(1, 3);
     * // => true
     *
     * _.lt(3, 3);
     * // => false
     *
     * _.lt(3, 1);
     * // => false
     */
    var lt = createRelationalOperation(baseLt);

    /**
     * Checks if `value` is less than or equal to `other`.
     *
     * @static
     * @memberOf _
     * @since 3.9.0
     * @category Lang
     * @param {*} value The value to compare.
     * @param {*} other The other value to compare.
     * @returns {boolean} Returns `true` if `value` is less than or equal to
     *  `other`, else `false`.
     * @see _.gte
     * @example
     *
     * _.lte(1, 3);
     * // => true
     *
     * _.lte(3, 3);
     * // => true
     *
     * _.lte(3, 1);
     * // => false
     */
    var lte = createRelationalOperation(function(value, other) {
      return value <= other;
    });

    /**
     * Converts `value` to an array.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Array} Returns the converted array.
     * @example
     *
     * _.toArray({ 'a': 1, 'b': 2 });
     * // => [1, 2]
     *
     * _.toArray('abc');
     * // => ['a', 'b', 'c']
     *
     * _.toArray(1);
     * // => []
     *
     * _.toArray(null);
     * // => []
     */
    function toArray(value) {
      if (!value) {
        return [];
      }
      if (isArrayLike(value)) {
        return isString(value) ? stringToArray(value) : copyArray(value);
      }
      if (symIterator && value[symIterator]) {
        return iteratorToArray(value[symIterator]());
      }
      var tag = getTag(value),
          func = tag == mapTag ? mapToArray : (tag == setTag ? setToArray : values);

      return func(value);
    }

    /**
     * Converts `value` to a finite number.
     *
     * @static
     * @memberOf _
     * @since 4.12.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted number.
     * @example
     *
     * _.toFinite(3.2);
     * // => 3.2
     *
     * _.toFinite(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toFinite(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toFinite('3.2');
     * // => 3.2
     */
    function toFinite(value) {
      if (!value) {
        return value === 0 ? value : 0;
      }
      value = toNumber(value);
      if (value === INFINITY || value === -INFINITY) {
        var sign = (value < 0 ? -1 : 1);
        return sign * MAX_INTEGER;
      }
      return value === value ? value : 0;
    }

    /**
     * Converts `value` to an integer.
     *
     * **Note:** This method is loosely based on
     * [`ToInteger`](http://www.ecma-international.org/ecma-262/7.0/#sec-tointeger).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toInteger(3.2);
     * // => 3
     *
     * _.toInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toInteger(Infinity);
     * // => 1.7976931348623157e+308
     *
     * _.toInteger('3.2');
     * // => 3
     */
    function toInteger(value) {
      var result = toFinite(value),
          remainder = result % 1;

      return result === result ? (remainder ? result - remainder : result) : 0;
    }

    /**
     * Converts `value` to an integer suitable for use as the length of an
     * array-like object.
     *
     * **Note:** This method is based on
     * [`ToLength`](http://ecma-international.org/ecma-262/7.0/#sec-tolength).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toLength(3.2);
     * // => 3
     *
     * _.toLength(Number.MIN_VALUE);
     * // => 0
     *
     * _.toLength(Infinity);
     * // => 4294967295
     *
     * _.toLength('3.2');
     * // => 3
     */
    function toLength(value) {
      return value ? baseClamp(toInteger(value), 0, MAX_ARRAY_LENGTH) : 0;
    }

    /**
     * Converts `value` to a number.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to process.
     * @returns {number} Returns the number.
     * @example
     *
     * _.toNumber(3.2);
     * // => 3.2
     *
     * _.toNumber(Number.MIN_VALUE);
     * // => 5e-324
     *
     * _.toNumber(Infinity);
     * // => Infinity
     *
     * _.toNumber('3.2');
     * // => 3.2
     */
    function toNumber(value) {
      if (typeof value == 'number') {
        return value;
      }
      if (isSymbol(value)) {
        return NAN;
      }
      if (isObject(value)) {
        var other = typeof value.valueOf == 'function' ? value.valueOf() : value;
        value = isObject(other) ? (other + '') : other;
      }
      if (typeof value != 'string') {
        return value === 0 ? value : +value;
      }
      value = value.replace(reTrim, '');
      var isBinary = reIsBinary.test(value);
      return (isBinary || reIsOctal.test(value))
        ? freeParseInt(value.slice(2), isBinary ? 2 : 8)
        : (reIsBadHex.test(value) ? NAN : +value);
    }

    /**
     * Converts `value` to a plain object flattening inherited enumerable string
     * keyed properties of `value` to own properties of the plain object.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {Object} Returns the converted plain object.
     * @example
     *
     * function Foo() {
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.assign({ 'a': 1 }, new Foo);
     * // => { 'a': 1, 'b': 2 }
     *
     * _.assign({ 'a': 1 }, _.toPlainObject(new Foo));
     * // => { 'a': 1, 'b': 2, 'c': 3 }
     */
    function toPlainObject(value) {
      return copyObject(value, keysIn(value));
    }

    /**
     * Converts `value` to a safe integer. A safe integer can be compared and
     * represented correctly.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.toSafeInteger(3.2);
     * // => 3
     *
     * _.toSafeInteger(Number.MIN_VALUE);
     * // => 0
     *
     * _.toSafeInteger(Infinity);
     * // => 9007199254740991
     *
     * _.toSafeInteger('3.2');
     * // => 3
     */
    function toSafeInteger(value) {
      return value
        ? baseClamp(toInteger(value), -MAX_SAFE_INTEGER, MAX_SAFE_INTEGER)
        : (value === 0 ? value : 0);
    }

    /**
     * Converts `value` to a string. An empty string is returned for `null`
     * and `undefined` values. The sign of `-0` is preserved.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Lang
     * @param {*} value The value to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.toString(null);
     * // => ''
     *
     * _.toString(-0);
     * // => '-0'
     *
     * _.toString([1, 2, 3]);
     * // => '1,2,3'
     */
    function toString(value) {
      return value == null ? '' : baseToString(value);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Assigns own enumerable string keyed properties of source objects to the
     * destination object. Source objects are applied from left to right.
     * Subsequent sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object` and is loosely based on
     * [`Object.assign`](https://mdn.io/Object/assign).
     *
     * @static
     * @memberOf _
     * @since 0.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assignIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assign({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'c': 3 }
     */
    var assign = createAssigner(function(object, source) {
      if (isPrototype(source) || isArrayLike(source)) {
        copyObject(source, keys(source), object);
        return;
      }
      for (var key in source) {
        if (hasOwnProperty.call(source, key)) {
          assignValue(object, key, source[key]);
        }
      }
    });

    /**
     * This method is like `_.assign` except that it iterates over own and
     * inherited source properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extend
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.assign
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     * }
     *
     * function Bar() {
     *   this.c = 3;
     * }
     *
     * Foo.prototype.b = 2;
     * Bar.prototype.d = 4;
     *
     * _.assignIn({ 'a': 0 }, new Foo, new Bar);
     * // => { 'a': 1, 'b': 2, 'c': 3, 'd': 4 }
     */
    var assignIn = createAssigner(function(object, source) {
      copyObject(source, keysIn(source), object);
    });

    /**
     * This method is like `_.assignIn` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias extendWith
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignInWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignInWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keysIn(source), object, customizer);
    });

    /**
     * This method is like `_.assign` except that it accepts `customizer`
     * which is invoked to produce the assigned values. If `customizer` returns
     * `undefined`, assignment is handled by the method instead. The `customizer`
     * is invoked with five arguments: (objValue, srcValue, key, object, source).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @see _.assignInWith
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   return _.isUndefined(objValue) ? srcValue : objValue;
     * }
     *
     * var defaults = _.partialRight(_.assignWith, customizer);
     *
     * defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var assignWith = createAssigner(function(object, source, srcIndex, customizer) {
      copyObject(source, keys(source), object, customizer);
    });

    /**
     * Creates an array of values corresponding to `paths` of `object`.
     *
     * @static
     * @memberOf _
     * @since 1.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Array} Returns the picked values.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }, 4] };
     *
     * _.at(object, ['a[0].b.c', 'a[1]']);
     * // => [3, 4]
     */
    var at = flatRest(baseAt);

    /**
     * Creates an object that inherits from the `prototype` object. If a
     * `properties` object is given, its own enumerable string keyed properties
     * are assigned to the created object.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Object
     * @param {Object} prototype The object to inherit from.
     * @param {Object} [properties] The properties to assign to the object.
     * @returns {Object} Returns the new object.
     * @example
     *
     * function Shape() {
     *   this.x = 0;
     *   this.y = 0;
     * }
     *
     * function Circle() {
     *   Shape.call(this);
     * }
     *
     * Circle.prototype = _.create(Shape.prototype, {
     *   'constructor': Circle
     * });
     *
     * var circle = new Circle;
     * circle instanceof Circle;
     * // => true
     *
     * circle instanceof Shape;
     * // => true
     */
    function create(prototype, properties) {
      var result = baseCreate(prototype);
      return properties == null ? result : baseAssign(result, properties);
    }

    /**
     * Assigns own and inherited enumerable string keyed properties of source
     * objects to the destination object for all destination properties that
     * resolve to `undefined`. Source objects are applied from left to right.
     * Once a property is set, additional values of the same property are ignored.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaultsDeep
     * @example
     *
     * _.defaults({ 'a': 1 }, { 'b': 2 }, { 'a': 3 });
     * // => { 'a': 1, 'b': 2 }
     */
    var defaults = baseRest(function(object, sources) {
      object = Object(object);

      var index = -1;
      var length = sources.length;
      var guard = length > 2 ? sources[2] : undefined;

      if (guard && isIterateeCall(sources[0], sources[1], guard)) {
        length = 1;
      }

      while (++index < length) {
        var source = sources[index];
        var props = keysIn(source);
        var propsIndex = -1;
        var propsLength = props.length;

        while (++propsIndex < propsLength) {
          var key = props[propsIndex];
          var value = object[key];

          if (value === undefined ||
              (eq(value, objectProto[key]) && !hasOwnProperty.call(object, key))) {
            object[key] = source[key];
          }
        }
      }

      return object;
    });

    /**
     * This method is like `_.defaults` except that it recursively assigns
     * default properties.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @see _.defaults
     * @example
     *
     * _.defaultsDeep({ 'a': { 'b': 2 } }, { 'a': { 'b': 1, 'c': 3 } });
     * // => { 'a': { 'b': 2, 'c': 3 } }
     */
    var defaultsDeep = baseRest(function(args) {
      args.push(undefined, customDefaultsMerge);
      return apply(mergeWith, undefined, args);
    });

    /**
     * This method is like `_.find` except that it returns the key of the first
     * element `predicate` returns truthy for instead of the element itself.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findKey(users, function(o) { return o.age < 40; });
     * // => 'barney' (iteration order is not guaranteed)
     *
     * // The `_.matches` iteratee shorthand.
     * _.findKey(users, { 'age': 1, 'active': true });
     * // => 'pebbles'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findKey(users, 'active');
     * // => 'barney'
     */
    function findKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwn);
    }

    /**
     * This method is like `_.findKey` except that it iterates over elements of
     * a collection in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @param {Function} [predicate=_.identity] The function invoked per iteration.
     * @returns {string|undefined} Returns the key of the matched element,
     *  else `undefined`.
     * @example
     *
     * var users = {
     *   'barney':  { 'age': 36, 'active': true },
     *   'fred':    { 'age': 40, 'active': false },
     *   'pebbles': { 'age': 1,  'active': true }
     * };
     *
     * _.findLastKey(users, function(o) { return o.age < 40; });
     * // => returns 'pebbles' assuming `_.findKey` returns 'barney'
     *
     * // The `_.matches` iteratee shorthand.
     * _.findLastKey(users, { 'age': 36, 'active': true });
     * // => 'barney'
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.findLastKey(users, ['active', false]);
     * // => 'fred'
     *
     * // The `_.property` iteratee shorthand.
     * _.findLastKey(users, 'active');
     * // => 'pebbles'
     */
    function findLastKey(object, predicate) {
      return baseFindKey(object, getIteratee(predicate, 3), baseForOwnRight);
    }

    /**
     * Iterates over own and inherited enumerable string keyed properties of an
     * object and invokes `iteratee` for each property. The iteratee is invoked
     * with three arguments: (value, key, object). Iteratee functions may exit
     * iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forInRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forIn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a', 'b', then 'c' (iteration order is not guaranteed).
     */
    function forIn(object, iteratee) {
      return object == null
        ? object
        : baseFor(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * This method is like `_.forIn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forIn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forInRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'c', 'b', then 'a' assuming `_.forIn` logs 'a', 'b', then 'c'.
     */
    function forInRight(object, iteratee) {
      return object == null
        ? object
        : baseForRight(object, getIteratee(iteratee, 3), keysIn);
    }

    /**
     * Iterates over own enumerable string keyed properties of an object and
     * invokes `iteratee` for each property. The iteratee is invoked with three
     * arguments: (value, key, object). Iteratee functions may exit iteration
     * early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 0.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwnRight
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwn(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'a' then 'b' (iteration order is not guaranteed).
     */
    function forOwn(object, iteratee) {
      return object && baseForOwn(object, getIteratee(iteratee, 3));
    }

    /**
     * This method is like `_.forOwn` except that it iterates over properties of
     * `object` in the opposite order.
     *
     * @static
     * @memberOf _
     * @since 2.0.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns `object`.
     * @see _.forOwn
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.forOwnRight(new Foo, function(value, key) {
     *   console.log(key);
     * });
     * // => Logs 'b' then 'a' assuming `_.forOwn` logs 'a' then 'b'.
     */
    function forOwnRight(object, iteratee) {
      return object && baseForOwnRight(object, getIteratee(iteratee, 3));
    }

    /**
     * Creates an array of function property names from own enumerable properties
     * of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functionsIn
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functions(new Foo);
     * // => ['a', 'b']
     */
    function functions(object) {
      return object == null ? [] : baseFunctions(object, keys(object));
    }

    /**
     * Creates an array of function property names from own and inherited
     * enumerable properties of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to inspect.
     * @returns {Array} Returns the function names.
     * @see _.functions
     * @example
     *
     * function Foo() {
     *   this.a = _.constant('a');
     *   this.b = _.constant('b');
     * }
     *
     * Foo.prototype.c = _.constant('c');
     *
     * _.functionsIn(new Foo);
     * // => ['a', 'b', 'c']
     */
    function functionsIn(object) {
      return object == null ? [] : baseFunctions(object, keysIn(object));
    }

    /**
     * Gets the value at `path` of `object`. If the resolved value is
     * `undefined`, the `defaultValue` is returned in its place.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to get.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.get(object, 'a[0].b.c');
     * // => 3
     *
     * _.get(object, ['a', '0', 'b', 'c']);
     * // => 3
     *
     * _.get(object, 'a.b.c', 'default');
     * // => 'default'
     */
    function get(object, path, defaultValue) {
      var result = object == null ? undefined : baseGet(object, path);
      return result === undefined ? defaultValue : result;
    }

    /**
     * Checks if `path` is a direct property of `object`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = { 'a': { 'b': 2 } };
     * var other = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.has(object, 'a');
     * // => true
     *
     * _.has(object, 'a.b');
     * // => true
     *
     * _.has(object, ['a', 'b']);
     * // => true
     *
     * _.has(other, 'a');
     * // => false
     */
    function has(object, path) {
      return object != null && hasPath(object, path, baseHas);
    }

    /**
     * Checks if `path` is a direct or inherited property of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path to check.
     * @returns {boolean} Returns `true` if `path` exists, else `false`.
     * @example
     *
     * var object = _.create({ 'a': _.create({ 'b': 2 }) });
     *
     * _.hasIn(object, 'a');
     * // => true
     *
     * _.hasIn(object, 'a.b');
     * // => true
     *
     * _.hasIn(object, ['a', 'b']);
     * // => true
     *
     * _.hasIn(object, 'b');
     * // => false
     */
    function hasIn(object, path) {
      return object != null && hasPath(object, path, baseHasIn);
    }

    /**
     * Creates an object composed of the inverted keys and values of `object`.
     * If `object` contains duplicate values, subsequent values overwrite
     * property assignments of previous values.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Object
     * @param {Object} object The object to invert.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invert(object);
     * // => { '1': 'c', '2': 'b' }
     */
    var invert = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      result[value] = key;
    }, constant(identity));

    /**
     * This method is like `_.invert` except that the inverted object is generated
     * from the results of running each element of `object` thru `iteratee`. The
     * corresponding inverted value of each inverted key is an array of keys
     * responsible for generating the inverted value. The iteratee is invoked
     * with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.1.0
     * @category Object
     * @param {Object} object The object to invert.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {Object} Returns the new inverted object.
     * @example
     *
     * var object = { 'a': 1, 'b': 2, 'c': 1 };
     *
     * _.invertBy(object);
     * // => { '1': ['a', 'c'], '2': ['b'] }
     *
     * _.invertBy(object, function(value) {
     *   return 'group' + value;
     * });
     * // => { 'group1': ['a', 'c'], 'group2': ['b'] }
     */
    var invertBy = createInverter(function(result, value, key) {
      if (value != null &&
          typeof value.toString != 'function') {
        value = nativeObjectToString.call(value);
      }

      if (hasOwnProperty.call(result, value)) {
        result[value].push(key);
      } else {
        result[value] = [key];
      }
    }, getIteratee);

    /**
     * Invokes the method at `path` of `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {*} Returns the result of the invoked method.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': [1, 2, 3, 4] } }] };
     *
     * _.invoke(object, 'a[0].b.c.slice', 1, 3);
     * // => [2, 3]
     */
    var invoke = baseRest(baseInvoke);

    /**
     * Creates an array of the own enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects. See the
     * [ES spec](http://ecma-international.org/ecma-262/7.0/#sec-object.keys)
     * for more details.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keys(new Foo);
     * // => ['a', 'b'] (iteration order is not guaranteed)
     *
     * _.keys('hi');
     * // => ['0', '1']
     */
    function keys(object) {
      return isArrayLike(object) ? arrayLikeKeys(object) : baseKeys(object);
    }

    /**
     * Creates an array of the own and inherited enumerable property names of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property names.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.keysIn(new Foo);
     * // => ['a', 'b', 'c'] (iteration order is not guaranteed)
     */
    function keysIn(object) {
      return isArrayLike(object) ? arrayLikeKeys(object, true) : baseKeysIn(object);
    }

    /**
     * The opposite of `_.mapValues`; this method creates an object with the
     * same values as `object` and keys generated by running each own enumerable
     * string keyed property of `object` thru `iteratee`. The iteratee is invoked
     * with three arguments: (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 3.8.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapValues
     * @example
     *
     * _.mapKeys({ 'a': 1, 'b': 2 }, function(value, key) {
     *   return key + value;
     * });
     * // => { 'a1': 1, 'b2': 2 }
     */
    function mapKeys(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, iteratee(value, key, object), value);
      });
      return result;
    }

    /**
     * Creates an object with the same keys as `object` and values generated
     * by running each own enumerable string keyed property of `object` thru
     * `iteratee`. The iteratee is invoked with three arguments:
     * (value, key, object).
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Object} Returns the new mapped object.
     * @see _.mapKeys
     * @example
     *
     * var users = {
     *   'fred':    { 'user': 'fred',    'age': 40 },
     *   'pebbles': { 'user': 'pebbles', 'age': 1 }
     * };
     *
     * _.mapValues(users, function(o) { return o.age; });
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     *
     * // The `_.property` iteratee shorthand.
     * _.mapValues(users, 'age');
     * // => { 'fred': 40, 'pebbles': 1 } (iteration order is not guaranteed)
     */
    function mapValues(object, iteratee) {
      var result = {};
      iteratee = getIteratee(iteratee, 3);

      baseForOwn(object, function(value, key, object) {
        baseAssignValue(result, key, iteratee(value, key, object));
      });
      return result;
    }

    /**
     * This method is like `_.assign` except that it recursively merges own and
     * inherited enumerable string keyed properties of source objects into the
     * destination object. Source properties that resolve to `undefined` are
     * skipped if a destination value exists. Array and plain object properties
     * are merged recursively. Other objects and value types are overridden by
     * assignment. Source objects are applied from left to right. Subsequent
     * sources overwrite property assignments of previous sources.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 0.5.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} [sources] The source objects.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {
     *   'a': [{ 'b': 2 }, { 'd': 4 }]
     * };
     *
     * var other = {
     *   'a': [{ 'c': 3 }, { 'e': 5 }]
     * };
     *
     * _.merge(object, other);
     * // => { 'a': [{ 'b': 2, 'c': 3 }, { 'd': 4, 'e': 5 }] }
     */
    var merge = createAssigner(function(object, source, srcIndex) {
      baseMerge(object, source, srcIndex);
    });

    /**
     * This method is like `_.merge` except that it accepts `customizer` which
     * is invoked to produce the merged values of the destination and source
     * properties. If `customizer` returns `undefined`, merging is handled by the
     * method instead. The `customizer` is invoked with six arguments:
     * (objValue, srcValue, key, object, source, stack).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The destination object.
     * @param {...Object} sources The source objects.
     * @param {Function} customizer The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * function customizer(objValue, srcValue) {
     *   if (_.isArray(objValue)) {
     *     return objValue.concat(srcValue);
     *   }
     * }
     *
     * var object = { 'a': [1], 'b': [2] };
     * var other = { 'a': [3], 'b': [4] };
     *
     * _.mergeWith(object, other, customizer);
     * // => { 'a': [1, 3], 'b': [2, 4] }
     */
    var mergeWith = createAssigner(function(object, source, srcIndex, customizer) {
      baseMerge(object, source, srcIndex, customizer);
    });

    /**
     * The opposite of `_.pick`; this method creates an object composed of the
     * own and inherited enumerable property paths of `object` that are not omitted.
     *
     * **Note:** This method is considerably slower than `_.pick`.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to omit.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omit(object, ['a', 'c']);
     * // => { 'b': '2' }
     */
    var omit = flatRest(function(object, paths) {
      var result = {};
      if (object == null) {
        return result;
      }
      var isDeep = false;
      paths = arrayMap(paths, function(path) {
        path = castPath(path, object);
        isDeep || (isDeep = path.length > 1);
        return path;
      });
      copyObject(object, getAllKeysIn(object), result);
      if (isDeep) {
        result = baseClone(result, CLONE_DEEP_FLAG | CLONE_FLAT_FLAG | CLONE_SYMBOLS_FLAG, customOmitClone);
      }
      var length = paths.length;
      while (length--) {
        baseUnset(result, paths[length]);
      }
      return result;
    });

    /**
     * The opposite of `_.pickBy`; this method creates an object composed of
     * the own and inherited enumerable string keyed properties of `object` that
     * `predicate` doesn't return truthy for. The predicate is invoked with two
     * arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.omitBy(object, _.isNumber);
     * // => { 'b': '2' }
     */
    function omitBy(object, predicate) {
      return pickBy(object, negate(getIteratee(predicate)));
    }

    /**
     * Creates an object composed of the picked `object` properties.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The source object.
     * @param {...(string|string[])} [paths] The property paths to pick.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pick(object, ['a', 'c']);
     * // => { 'a': 1, 'c': 3 }
     */
    var pick = flatRest(function(object, paths) {
      return object == null ? {} : basePick(object, paths);
    });

    /**
     * Creates an object composed of the `object` properties `predicate` returns
     * truthy for. The predicate is invoked with two arguments: (value, key).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The source object.
     * @param {Function} [predicate=_.identity] The function invoked per property.
     * @returns {Object} Returns the new object.
     * @example
     *
     * var object = { 'a': 1, 'b': '2', 'c': 3 };
     *
     * _.pickBy(object, _.isNumber);
     * // => { 'a': 1, 'c': 3 }
     */
    function pickBy(object, predicate) {
      if (object == null) {
        return {};
      }
      var props = arrayMap(getAllKeysIn(object), function(prop) {
        return [prop];
      });
      predicate = getIteratee(predicate);
      return basePickBy(object, props, function(value, path) {
        return predicate(value, path[0]);
      });
    }

    /**
     * This method is like `_.get` except that if the resolved value is a
     * function it's invoked with the `this` binding of its parent object and
     * its result is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @param {Array|string} path The path of the property to resolve.
     * @param {*} [defaultValue] The value returned for `undefined` resolved values.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c1': 3, 'c2': _.constant(4) } }] };
     *
     * _.result(object, 'a[0].b.c1');
     * // => 3
     *
     * _.result(object, 'a[0].b.c2');
     * // => 4
     *
     * _.result(object, 'a[0].b.c3', 'default');
     * // => 'default'
     *
     * _.result(object, 'a[0].b.c3', _.constant('default'));
     * // => 'default'
     */
    function result(object, path, defaultValue) {
      path = castPath(path, object);

      var index = -1,
          length = path.length;

      // Ensure the loop is entered when path is empty.
      if (!length) {
        length = 1;
        object = undefined;
      }
      while (++index < length) {
        var value = object == null ? undefined : object[toKey(path[index])];
        if (value === undefined) {
          index = length;
          value = defaultValue;
        }
        object = isFunction(value) ? value.call(object) : value;
      }
      return object;
    }

    /**
     * Sets the value at `path` of `object`. If a portion of `path` doesn't exist,
     * it's created. Arrays are created for missing index properties while objects
     * are created for all other missing properties. Use `_.setWith` to customize
     * `path` creation.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.set(object, 'a[0].b.c', 4);
     * console.log(object.a[0].b.c);
     * // => 4
     *
     * _.set(object, ['x', '0', 'y', 'z'], 5);
     * console.log(object.x[0].y.z);
     * // => 5
     */
    function set(object, path, value) {
      return object == null ? object : baseSet(object, path, value);
    }

    /**
     * This method is like `_.set` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {*} value The value to set.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.setWith(object, '[0][1]', 'a', Object);
     * // => { '0': { '1': 'a' } }
     */
    function setWith(object, path, value, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseSet(object, path, value, customizer);
    }

    /**
     * Creates an array of own enumerable string keyed-value pairs for `object`
     * which can be consumed by `_.fromPairs`. If `object` is a map or set, its
     * entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entries
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairs(new Foo);
     * // => [['a', 1], ['b', 2]] (iteration order is not guaranteed)
     */
    var toPairs = createToPairs(keys);

    /**
     * Creates an array of own and inherited enumerable string keyed-value pairs
     * for `object` which can be consumed by `_.fromPairs`. If `object` is a map
     * or set, its entries are returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @alias entriesIn
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the key-value pairs.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.toPairsIn(new Foo);
     * // => [['a', 1], ['b', 2], ['c', 3]] (iteration order is not guaranteed)
     */
    var toPairsIn = createToPairs(keysIn);

    /**
     * An alternative to `_.reduce`; this method transforms `object` to a new
     * `accumulator` object which is the result of running each of its own
     * enumerable string keyed properties thru `iteratee`, with each invocation
     * potentially mutating the `accumulator` object. If `accumulator` is not
     * provided, a new object with the same `[[Prototype]]` will be used. The
     * iteratee is invoked with four arguments: (accumulator, value, key, object).
     * Iteratee functions may exit iteration early by explicitly returning `false`.
     *
     * @static
     * @memberOf _
     * @since 1.3.0
     * @category Object
     * @param {Object} object The object to iterate over.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @param {*} [accumulator] The custom accumulator value.
     * @returns {*} Returns the accumulated value.
     * @example
     *
     * _.transform([2, 3, 4], function(result, n) {
     *   result.push(n *= n);
     *   return n % 2 == 0;
     * }, []);
     * // => [4, 9]
     *
     * _.transform({ 'a': 1, 'b': 2, 'c': 1 }, function(result, value, key) {
     *   (result[value] || (result[value] = [])).push(key);
     * }, {});
     * // => { '1': ['a', 'c'], '2': ['b'] }
     */
    function transform(object, iteratee, accumulator) {
      var isArr = isArray(object),
          isArrLike = isArr || isBuffer(object) || isTypedArray(object);

      iteratee = getIteratee(iteratee, 4);
      if (accumulator == null) {
        var Ctor = object && object.constructor;
        if (isArrLike) {
          accumulator = isArr ? new Ctor : [];
        }
        else if (isObject(object)) {
          accumulator = isFunction(Ctor) ? baseCreate(getPrototype(object)) : {};
        }
        else {
          accumulator = {};
        }
      }
      (isArrLike ? arrayEach : baseForOwn)(object, function(value, index, object) {
        return iteratee(accumulator, value, index, object);
      });
      return accumulator;
    }

    /**
     * Removes the property at `path` of `object`.
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to unset.
     * @returns {boolean} Returns `true` if the property is deleted, else `false`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 7 } }] };
     * _.unset(object, 'a[0].b.c');
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     *
     * _.unset(object, ['a', '0', 'b', 'c']);
     * // => true
     *
     * console.log(object);
     * // => { 'a': [{ 'b': {} }] };
     */
    function unset(object, path) {
      return object == null ? true : baseUnset(object, path);
    }

    /**
     * This method is like `_.set` except that accepts `updater` to produce the
     * value to set. Use `_.updateWith` to customize `path` creation. The `updater`
     * is invoked with one argument: (value).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = { 'a': [{ 'b': { 'c': 3 } }] };
     *
     * _.update(object, 'a[0].b.c', function(n) { return n * n; });
     * console.log(object.a[0].b.c);
     * // => 9
     *
     * _.update(object, 'x[0].y.z', function(n) { return n ? n + 1 : 0; });
     * console.log(object.x[0].y.z);
     * // => 0
     */
    function update(object, path, updater) {
      return object == null ? object : baseUpdate(object, path, castFunction(updater));
    }

    /**
     * This method is like `_.update` except that it accepts `customizer` which is
     * invoked to produce the objects of `path`.  If `customizer` returns `undefined`
     * path creation is handled by the method instead. The `customizer` is invoked
     * with three arguments: (nsValue, key, nsObject).
     *
     * **Note:** This method mutates `object`.
     *
     * @static
     * @memberOf _
     * @since 4.6.0
     * @category Object
     * @param {Object} object The object to modify.
     * @param {Array|string} path The path of the property to set.
     * @param {Function} updater The function to produce the updated value.
     * @param {Function} [customizer] The function to customize assigned values.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var object = {};
     *
     * _.updateWith(object, '[0][1]', _.constant('a'), Object);
     * // => { '0': { '1': 'a' } }
     */
    function updateWith(object, path, updater, customizer) {
      customizer = typeof customizer == 'function' ? customizer : undefined;
      return object == null ? object : baseUpdate(object, path, castFunction(updater), customizer);
    }

    /**
     * Creates an array of the own enumerable string keyed property values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.values(new Foo);
     * // => [1, 2] (iteration order is not guaranteed)
     *
     * _.values('hi');
     * // => ['h', 'i']
     */
    function values(object) {
      return object == null ? [] : baseValues(object, keys(object));
    }

    /**
     * Creates an array of the own and inherited enumerable string keyed property
     * values of `object`.
     *
     * **Note:** Non-object values are coerced to objects.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Object
     * @param {Object} object The object to query.
     * @returns {Array} Returns the array of property values.
     * @example
     *
     * function Foo() {
     *   this.a = 1;
     *   this.b = 2;
     * }
     *
     * Foo.prototype.c = 3;
     *
     * _.valuesIn(new Foo);
     * // => [1, 2, 3] (iteration order is not guaranteed)
     */
    function valuesIn(object) {
      return object == null ? [] : baseValues(object, keysIn(object));
    }

    /*------------------------------------------------------------------------*/

    /**
     * Clamps `number` within the inclusive `lower` and `upper` bounds.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Number
     * @param {number} number The number to clamp.
     * @param {number} [lower] The lower bound.
     * @param {number} upper The upper bound.
     * @returns {number} Returns the clamped number.
     * @example
     *
     * _.clamp(-10, -5, 5);
     * // => -5
     *
     * _.clamp(10, -5, 5);
     * // => 5
     */
    function clamp(number, lower, upper) {
      if (upper === undefined) {
        upper = lower;
        lower = undefined;
      }
      if (upper !== undefined) {
        upper = toNumber(upper);
        upper = upper === upper ? upper : 0;
      }
      if (lower !== undefined) {
        lower = toNumber(lower);
        lower = lower === lower ? lower : 0;
      }
      return baseClamp(toNumber(number), lower, upper);
    }

    /**
     * Checks if `n` is between `start` and up to, but not including, `end`. If
     * `end` is not specified, it's set to `start` with `start` then set to `0`.
     * If `start` is greater than `end` the params are swapped to support
     * negative ranges.
     *
     * @static
     * @memberOf _
     * @since 3.3.0
     * @category Number
     * @param {number} number The number to check.
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @returns {boolean} Returns `true` if `number` is in the range, else `false`.
     * @see _.range, _.rangeRight
     * @example
     *
     * _.inRange(3, 2, 4);
     * // => true
     *
     * _.inRange(4, 8);
     * // => true
     *
     * _.inRange(4, 2);
     * // => false
     *
     * _.inRange(2, 2);
     * // => false
     *
     * _.inRange(1.2, 2);
     * // => true
     *
     * _.inRange(5.2, 4);
     * // => false
     *
     * _.inRange(-3, -2, -6);
     * // => true
     */
    function inRange(number, start, end) {
      start = toFinite(start);
      if (end === undefined) {
        end = start;
        start = 0;
      } else {
        end = toFinite(end);
      }
      number = toNumber(number);
      return baseInRange(number, start, end);
    }

    /**
     * Produces a random number between the inclusive `lower` and `upper` bounds.
     * If only one argument is provided a number between `0` and the given number
     * is returned. If `floating` is `true`, or either `lower` or `upper` are
     * floats, a floating-point number is returned instead of an integer.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @memberOf _
     * @since 0.7.0
     * @category Number
     * @param {number} [lower=0] The lower bound.
     * @param {number} [upper=1] The upper bound.
     * @param {boolean} [floating] Specify returning a floating-point number.
     * @returns {number} Returns the random number.
     * @example
     *
     * _.random(0, 5);
     * // => an integer between 0 and 5
     *
     * _.random(5);
     * // => also an integer between 0 and 5
     *
     * _.random(5, true);
     * // => a floating-point number between 0 and 5
     *
     * _.random(1.2, 5.2);
     * // => a floating-point number between 1.2 and 5.2
     */
    function random(lower, upper, floating) {
      if (floating && typeof floating != 'boolean' && isIterateeCall(lower, upper, floating)) {
        upper = floating = undefined;
      }
      if (floating === undefined) {
        if (typeof upper == 'boolean') {
          floating = upper;
          upper = undefined;
        }
        else if (typeof lower == 'boolean') {
          floating = lower;
          lower = undefined;
        }
      }
      if (lower === undefined && upper === undefined) {
        lower = 0;
        upper = 1;
      }
      else {
        lower = toFinite(lower);
        if (upper === undefined) {
          upper = lower;
          lower = 0;
        } else {
          upper = toFinite(upper);
        }
      }
      if (lower > upper) {
        var temp = lower;
        lower = upper;
        upper = temp;
      }
      if (floating || lower % 1 || upper % 1) {
        var rand = nativeRandom();
        return nativeMin(lower + (rand * (upper - lower + freeParseFloat('1e-' + ((rand + '').length - 1)))), upper);
      }
      return baseRandom(lower, upper);
    }

    /*------------------------------------------------------------------------*/

    /**
     * Converts `string` to [camel case](https://en.wikipedia.org/wiki/CamelCase).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the camel cased string.
     * @example
     *
     * _.camelCase('Foo Bar');
     * // => 'fooBar'
     *
     * _.camelCase('--foo-bar--');
     * // => 'fooBar'
     *
     * _.camelCase('__FOO_BAR__');
     * // => 'fooBar'
     */
    var camelCase = createCompounder(function(result, word, index) {
      word = word.toLowerCase();
      return result + (index ? capitalize(word) : word);
    });

    /**
     * Converts the first character of `string` to upper case and the remaining
     * to lower case.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to capitalize.
     * @returns {string} Returns the capitalized string.
     * @example
     *
     * _.capitalize('FRED');
     * // => 'Fred'
     */
    function capitalize(string) {
      return upperFirst(toString(string).toLowerCase());
    }

    /**
     * Deburrs `string` by converting
     * [Latin-1 Supplement](https://en.wikipedia.org/wiki/Latin-1_Supplement_(Unicode_block)#Character_table)
     * and [Latin Extended-A](https://en.wikipedia.org/wiki/Latin_Extended-A)
     * letters to basic Latin letters and removing
     * [combining diacritical marks](https://en.wikipedia.org/wiki/Combining_Diacritical_Marks).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to deburr.
     * @returns {string} Returns the deburred string.
     * @example
     *
     * _.deburr('déjà vu');
     * // => 'deja vu'
     */
    function deburr(string) {
      string = toString(string);
      return string && string.replace(reLatin, deburrLetter).replace(reComboMark, '');
    }

    /**
     * Checks if `string` ends with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=string.length] The position to search up to.
     * @returns {boolean} Returns `true` if `string` ends with `target`,
     *  else `false`.
     * @example
     *
     * _.endsWith('abc', 'c');
     * // => true
     *
     * _.endsWith('abc', 'b');
     * // => false
     *
     * _.endsWith('abc', 'b', 2);
     * // => true
     */
    function endsWith(string, target, position) {
      string = toString(string);
      target = baseToString(target);

      var length = string.length;
      position = position === undefined
        ? length
        : baseClamp(toInteger(position), 0, length);

      var end = position;
      position -= target.length;
      return position >= 0 && string.slice(position, end) == target;
    }

    /**
     * Converts the characters "&", "<", ">", '"', and "'" in `string` to their
     * corresponding HTML entities.
     *
     * **Note:** No other characters are escaped. To escape additional
     * characters use a third-party library like [_he_](https://mths.be/he).
     *
     * Though the ">" character is escaped for symmetry, characters like
     * ">" and "/" don't need escaping in HTML and have no special meaning
     * unless they're part of a tag or unquoted attribute value. See
     * [Mathias Bynens's article](https://mathiasbynens.be/notes/ambiguous-ampersands)
     * (under "semi-related fun fact") for more details.
     *
     * When working with HTML you should always
     * [quote attribute values](http://wonko.com/post/html-escaping) to reduce
     * XSS vectors.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escape('fred, barney, & pebbles');
     * // => 'fred, barney, &amp; pebbles'
     */
    function escape(string) {
      string = toString(string);
      return (string && reHasUnescapedHtml.test(string))
        ? string.replace(reUnescapedHtml, escapeHtmlChar)
        : string;
    }

    /**
     * Escapes the `RegExp` special characters "^", "$", "\", ".", "*", "+",
     * "?", "(", ")", "[", "]", "{", "}", and "|" in `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to escape.
     * @returns {string} Returns the escaped string.
     * @example
     *
     * _.escapeRegExp('[lodash](https://lodash.com/)');
     * // => '\[lodash\]\(https://lodash\.com/\)'
     */
    function escapeRegExp(string) {
      string = toString(string);
      return (string && reHasRegExpChar.test(string))
        ? string.replace(reRegExpChar, '\\$&')
        : string;
    }

    /**
     * Converts `string` to
     * [kebab case](https://en.wikipedia.org/wiki/Letter_case#Special_case_styles).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the kebab cased string.
     * @example
     *
     * _.kebabCase('Foo Bar');
     * // => 'foo-bar'
     *
     * _.kebabCase('fooBar');
     * // => 'foo-bar'
     *
     * _.kebabCase('__FOO_BAR__');
     * // => 'foo-bar'
     */
    var kebabCase = createCompounder(function(result, word, index) {
      return result + (index ? '-' : '') + word.toLowerCase();
    });

    /**
     * Converts `string`, as space separated words, to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.lowerCase('--Foo-Bar--');
     * // => 'foo bar'
     *
     * _.lowerCase('fooBar');
     * // => 'foo bar'
     *
     * _.lowerCase('__FOO_BAR__');
     * // => 'foo bar'
     */
    var lowerCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toLowerCase();
    });

    /**
     * Converts the first character of `string` to lower case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.lowerFirst('Fred');
     * // => 'fred'
     *
     * _.lowerFirst('FRED');
     * // => 'fRED'
     */
    var lowerFirst = createCaseFirst('toLowerCase');

    /**
     * Pads `string` on the left and right sides if it's shorter than `length`.
     * Padding characters are truncated if they can't be evenly divided by `length`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.pad('abc', 8);
     * // => '  abc   '
     *
     * _.pad('abc', 8, '_-');
     * // => '_-abc_-_'
     *
     * _.pad('abc', 3);
     * // => 'abc'
     */
    function pad(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      if (!length || strLength >= length) {
        return string;
      }
      var mid = (length - strLength) / 2;
      return (
        createPadding(nativeFloor(mid), chars) +
        string +
        createPadding(nativeCeil(mid), chars)
      );
    }

    /**
     * Pads `string` on the right side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padEnd('abc', 6);
     * // => 'abc   '
     *
     * _.padEnd('abc', 6, '_-');
     * // => 'abc_-_'
     *
     * _.padEnd('abc', 3);
     * // => 'abc'
     */
    function padEnd(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (string + createPadding(length - strLength, chars))
        : string;
    }

    /**
     * Pads `string` on the left side if it's shorter than `length`. Padding
     * characters are truncated if they exceed `length`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to pad.
     * @param {number} [length=0] The padding length.
     * @param {string} [chars=' '] The string used as padding.
     * @returns {string} Returns the padded string.
     * @example
     *
     * _.padStart('abc', 6);
     * // => '   abc'
     *
     * _.padStart('abc', 6, '_-');
     * // => '_-_abc'
     *
     * _.padStart('abc', 3);
     * // => 'abc'
     */
    function padStart(string, length, chars) {
      string = toString(string);
      length = toInteger(length);

      var strLength = length ? stringSize(string) : 0;
      return (length && strLength < length)
        ? (createPadding(length - strLength, chars) + string)
        : string;
    }

    /**
     * Converts `string` to an integer of the specified radix. If `radix` is
     * `undefined` or `0`, a `radix` of `10` is used unless `value` is a
     * hexadecimal, in which case a `radix` of `16` is used.
     *
     * **Note:** This method aligns with the
     * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.
     *
     * @static
     * @memberOf _
     * @since 1.1.0
     * @category String
     * @param {string} string The string to convert.
     * @param {number} [radix=10] The radix to interpret `value` by.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {number} Returns the converted integer.
     * @example
     *
     * _.parseInt('08');
     * // => 8
     *
     * _.map(['6', '08', '10'], _.parseInt);
     * // => [6, 8, 10]
     */
    function parseInt(string, radix, guard) {
      if (guard || radix == null) {
        radix = 0;
      } else if (radix) {
        radix = +radix;
      }
      return nativeParseInt(toString(string).replace(reTrimStart, ''), radix || 0);
    }

    /**
     * Repeats the given string `n` times.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to repeat.
     * @param {number} [n=1] The number of times to repeat the string.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the repeated string.
     * @example
     *
     * _.repeat('*', 3);
     * // => '***'
     *
     * _.repeat('abc', 2);
     * // => 'abcabc'
     *
     * _.repeat('abc', 0);
     * // => ''
     */
    function repeat(string, n, guard) {
      if ((guard ? isIterateeCall(string, n, guard) : n === undefined)) {
        n = 1;
      } else {
        n = toInteger(n);
      }
      return baseRepeat(toString(string), n);
    }

    /**
     * Replaces matches for `pattern` in `string` with `replacement`.
     *
     * **Note:** This method is based on
     * [`String#replace`](https://mdn.io/String/replace).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to modify.
     * @param {RegExp|string} pattern The pattern to replace.
     * @param {Function|string} replacement The match replacement.
     * @returns {string} Returns the modified string.
     * @example
     *
     * _.replace('Hi Fred', 'Fred', 'Barney');
     * // => 'Hi Barney'
     */
    function replace() {
      var args = arguments,
          string = toString(args[0]);

      return args.length < 3 ? string : string.replace(args[1], args[2]);
    }

    /**
     * Converts `string` to
     * [snake case](https://en.wikipedia.org/wiki/Snake_case).
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the snake cased string.
     * @example
     *
     * _.snakeCase('Foo Bar');
     * // => 'foo_bar'
     *
     * _.snakeCase('fooBar');
     * // => 'foo_bar'
     *
     * _.snakeCase('--FOO-BAR--');
     * // => 'foo_bar'
     */
    var snakeCase = createCompounder(function(result, word, index) {
      return result + (index ? '_' : '') + word.toLowerCase();
    });

    /**
     * Splits `string` by `separator`.
     *
     * **Note:** This method is based on
     * [`String#split`](https://mdn.io/String/split).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to split.
     * @param {RegExp|string} separator The separator pattern to split by.
     * @param {number} [limit] The length to truncate results to.
     * @returns {Array} Returns the string segments.
     * @example
     *
     * _.split('a-b-c', '-', 2);
     * // => ['a', 'b']
     */
    function split(string, separator, limit) {
      if (limit && typeof limit != 'number' && isIterateeCall(string, separator, limit)) {
        separator = limit = undefined;
      }
      limit = limit === undefined ? MAX_ARRAY_LENGTH : limit >>> 0;
      if (!limit) {
        return [];
      }
      string = toString(string);
      if (string && (
            typeof separator == 'string' ||
            (separator != null && !isRegExp(separator))
          )) {
        separator = baseToString(separator);
        if (!separator && hasUnicode(string)) {
          return castSlice(stringToArray(string), 0, limit);
        }
      }
      return string.split(separator, limit);
    }

    /**
     * Converts `string` to
     * [start case](https://en.wikipedia.org/wiki/Letter_case#Stylistic_or_specialised_usage).
     *
     * @static
     * @memberOf _
     * @since 3.1.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the start cased string.
     * @example
     *
     * _.startCase('--foo-bar--');
     * // => 'Foo Bar'
     *
     * _.startCase('fooBar');
     * // => 'Foo Bar'
     *
     * _.startCase('__FOO_BAR__');
     * // => 'FOO BAR'
     */
    var startCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + upperFirst(word);
    });

    /**
     * Checks if `string` starts with the given target string.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {string} [target] The string to search for.
     * @param {number} [position=0] The position to search from.
     * @returns {boolean} Returns `true` if `string` starts with `target`,
     *  else `false`.
     * @example
     *
     * _.startsWith('abc', 'a');
     * // => true
     *
     * _.startsWith('abc', 'b');
     * // => false
     *
     * _.startsWith('abc', 'b', 1);
     * // => true
     */
    function startsWith(string, target, position) {
      string = toString(string);
      position = position == null
        ? 0
        : baseClamp(toInteger(position), 0, string.length);

      target = baseToString(target);
      return string.slice(position, position + target.length) == target;
    }

    /**
     * Creates a compiled template function that can interpolate data properties
     * in "interpolate" delimiters, HTML-escape interpolated data properties in
     * "escape" delimiters, and execute JavaScript in "evaluate" delimiters. Data
     * properties may be accessed as free variables in the template. If a setting
     * object is given, it takes precedence over `_.templateSettings` values.
     *
     * **Note:** In the development build `_.template` utilizes
     * [sourceURLs](http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/#toc-sourceurl)
     * for easier debugging.
     *
     * For more information on precompiling templates see
     * [lodash's custom builds documentation](https://lodash.com/custom-builds).
     *
     * For more information on Chrome extension sandboxes see
     * [Chrome's extensions documentation](https://developer.chrome.com/extensions/sandboxingEval).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category String
     * @param {string} [string=''] The template string.
     * @param {Object} [options={}] The options object.
     * @param {RegExp} [options.escape=_.templateSettings.escape]
     *  The HTML "escape" delimiter.
     * @param {RegExp} [options.evaluate=_.templateSettings.evaluate]
     *  The "evaluate" delimiter.
     * @param {Object} [options.imports=_.templateSettings.imports]
     *  An object to import into the template as free variables.
     * @param {RegExp} [options.interpolate=_.templateSettings.interpolate]
     *  The "interpolate" delimiter.
     * @param {string} [options.sourceURL='lodash.templateSources[n]']
     *  The sourceURL of the compiled template.
     * @param {string} [options.variable='obj']
     *  The data object variable name.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Function} Returns the compiled template function.
     * @example
     *
     * // Use the "interpolate" delimiter to create a compiled template.
     * var compiled = _.template('hello <%= user %>!');
     * compiled({ 'user': 'fred' });
     * // => 'hello fred!'
     *
     * // Use the HTML "escape" delimiter to escape data property values.
     * var compiled = _.template('<b><%- value %></b>');
     * compiled({ 'value': '<script>' });
     * // => '<b>&lt;script&gt;</b>'
     *
     * // Use the "evaluate" delimiter to execute JavaScript and generate HTML.
     * var compiled = _.template('<% _.forEach(users, function(user) { %><li><%- user %></li><% }); %>');
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the internal `print` function in "evaluate" delimiters.
     * var compiled = _.template('<% print("hello " + user); %>!');
     * compiled({ 'user': 'barney' });
     * // => 'hello barney!'
     *
     * // Use the ES template literal delimiter as an "interpolate" delimiter.
     * // Disable support by replacing the "interpolate" delimiter.
     * var compiled = _.template('hello ${ user }!');
     * compiled({ 'user': 'pebbles' });
     * // => 'hello pebbles!'
     *
     * // Use backslashes to treat delimiters as plain text.
     * var compiled = _.template('<%= "\\<%- value %\\>" %>');
     * compiled({ 'value': 'ignored' });
     * // => '<%- value %>'
     *
     * // Use the `imports` option to import `jQuery` as `jq`.
     * var text = '<% jq.each(users, function(user) { %><li><%- user %></li><% }); %>';
     * var compiled = _.template(text, { 'imports': { 'jq': jQuery } });
     * compiled({ 'users': ['fred', 'barney'] });
     * // => '<li>fred</li><li>barney</li>'
     *
     * // Use the `sourceURL` option to specify a custom sourceURL for the template.
     * var compiled = _.template('hello <%= user %>!', { 'sourceURL': '/basic/greeting.jst' });
     * compiled(data);
     * // => Find the source of "greeting.jst" under the Sources tab or Resources panel of the web inspector.
     *
     * // Use the `variable` option to ensure a with-statement isn't used in the compiled template.
     * var compiled = _.template('hi <%= data.user %>!', { 'variable': 'data' });
     * compiled.source;
     * // => function(data) {
     * //   var __t, __p = '';
     * //   __p += 'hi ' + ((__t = ( data.user )) == null ? '' : __t) + '!';
     * //   return __p;
     * // }
     *
     * // Use custom template delimiters.
     * _.templateSettings.interpolate = /{{([\s\S]+?)}}/g;
     * var compiled = _.template('hello {{ user }}!');
     * compiled({ 'user': 'mustache' });
     * // => 'hello mustache!'
     *
     * // Use the `source` property to inline compiled templates for meaningful
     * // line numbers in error messages and stack traces.
     * fs.writeFileSync(path.join(process.cwd(), 'jst.js'), '\
     *   var JST = {\
     *     "main": ' + _.template(mainText).source + '\
     *   };\
     * ');
     */
    function template(string, options, guard) {
      // Based on John Resig's `tmpl` implementation
      // (http://ejohn.org/blog/javascript-micro-templating/)
      // and Laura Doktorova's doT.js (https://github.com/olado/doT).
      var settings = lodash.templateSettings;

      if (guard && isIterateeCall(string, options, guard)) {
        options = undefined;
      }
      string = toString(string);
      options = assignInWith({}, options, settings, customDefaultsAssignIn);

      var imports = assignInWith({}, options.imports, settings.imports, customDefaultsAssignIn),
          importsKeys = keys(imports),
          importsValues = baseValues(imports, importsKeys);

      var isEscaping,
          isEvaluating,
          index = 0,
          interpolate = options.interpolate || reNoMatch,
          source = "__p += '";

      // Compile the regexp to match each delimiter.
      var reDelimiters = RegExp(
        (options.escape || reNoMatch).source + '|' +
        interpolate.source + '|' +
        (interpolate === reInterpolate ? reEsTemplate : reNoMatch).source + '|' +
        (options.evaluate || reNoMatch).source + '|$'
      , 'g');

      // Use a sourceURL for easier debugging.
      // The sourceURL gets injected into the source that's eval-ed, so be careful
      // with lookup (in case of e.g. prototype pollution), and strip newlines if any.
      // A newline wouldn't be a valid sourceURL anyway, and it'd enable code injection.
      var sourceURL = '//# sourceURL=' +
        (hasOwnProperty.call(options, 'sourceURL')
          ? (options.sourceURL + '').replace(/[\r\n]/g, ' ')
          : ('lodash.templateSources[' + (++templateCounter) + ']')
        ) + '\n';

      string.replace(reDelimiters, function(match, escapeValue, interpolateValue, esTemplateValue, evaluateValue, offset) {
        interpolateValue || (interpolateValue = esTemplateValue);

        // Escape characters that can't be included in string literals.
        source += string.slice(index, offset).replace(reUnescapedString, escapeStringChar);

        // Replace delimiters with snippets.
        if (escapeValue) {
          isEscaping = true;
          source += "' +\n__e(" + escapeValue + ") +\n'";
        }
        if (evaluateValue) {
          isEvaluating = true;
          source += "';\n" + evaluateValue + ";\n__p += '";
        }
        if (interpolateValue) {
          source += "' +\n((__t = (" + interpolateValue + ")) == null ? '' : __t) +\n'";
        }
        index = offset + match.length;

        // The JS engine embedded in Adobe products needs `match` returned in
        // order to produce the correct `offset` value.
        return match;
      });

      source += "';\n";

      // If `variable` is not specified wrap a with-statement around the generated
      // code to add the data object to the top of the scope chain.
      // Like with sourceURL, we take care to not check the option's prototype,
      // as this configuration is a code injection vector.
      var variable = hasOwnProperty.call(options, 'variable') && options.variable;
      if (!variable) {
        source = 'with (obj) {\n' + source + '\n}\n';
      }
      // Cleanup code by stripping empty strings.
      source = (isEvaluating ? source.replace(reEmptyStringLeading, '') : source)
        .replace(reEmptyStringMiddle, '$1')
        .replace(reEmptyStringTrailing, '$1;');

      // Frame code as the function body.
      source = 'function(' + (variable || 'obj') + ') {\n' +
        (variable
          ? ''
          : 'obj || (obj = {});\n'
        ) +
        "var __t, __p = ''" +
        (isEscaping
           ? ', __e = _.escape'
           : ''
        ) +
        (isEvaluating
          ? ', __j = Array.prototype.join;\n' +
            "function print() { __p += __j.call(arguments, '') }\n"
          : ';\n'
        ) +
        source +
        'return __p\n}';

      var result = attempt(function() {
        return Function(importsKeys, sourceURL + 'return ' + source)
          .apply(undefined, importsValues);
      });

      // Provide the compiled function's source by its `toString` method or
      // the `source` property as a convenience for inlining compiled templates.
      result.source = source;
      if (isError(result)) {
        throw result;
      }
      return result;
    }

    /**
     * Converts `string`, as a whole, to lower case just like
     * [String#toLowerCase](https://mdn.io/toLowerCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the lower cased string.
     * @example
     *
     * _.toLower('--Foo-Bar--');
     * // => '--foo-bar--'
     *
     * _.toLower('fooBar');
     * // => 'foobar'
     *
     * _.toLower('__FOO_BAR__');
     * // => '__foo_bar__'
     */
    function toLower(value) {
      return toString(value).toLowerCase();
    }

    /**
     * Converts `string`, as a whole, to upper case just like
     * [String#toUpperCase](https://mdn.io/toUpperCase).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.toUpper('--foo-bar--');
     * // => '--FOO-BAR--'
     *
     * _.toUpper('fooBar');
     * // => 'FOOBAR'
     *
     * _.toUpper('__foo_bar__');
     * // => '__FOO_BAR__'
     */
    function toUpper(value) {
      return toString(value).toUpperCase();
    }

    /**
     * Removes leading and trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trim('  abc  ');
     * // => 'abc'
     *
     * _.trim('-_-abc-_-', '_-');
     * // => 'abc'
     *
     * _.map(['  foo  ', '  bar  '], _.trim);
     * // => ['foo', 'bar']
     */
    function trim(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrim, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          chrSymbols = stringToArray(chars),
          start = charsStartIndex(strSymbols, chrSymbols),
          end = charsEndIndex(strSymbols, chrSymbols) + 1;

      return castSlice(strSymbols, start, end).join('');
    }

    /**
     * Removes trailing whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimEnd('  abc  ');
     * // => '  abc'
     *
     * _.trimEnd('-_-abc-_-', '_-');
     * // => '-_-abc'
     */
    function trimEnd(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimEnd, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          end = charsEndIndex(strSymbols, stringToArray(chars)) + 1;

      return castSlice(strSymbols, 0, end).join('');
    }

    /**
     * Removes leading whitespace or specified characters from `string`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to trim.
     * @param {string} [chars=whitespace] The characters to trim.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {string} Returns the trimmed string.
     * @example
     *
     * _.trimStart('  abc  ');
     * // => 'abc  '
     *
     * _.trimStart('-_-abc-_-', '_-');
     * // => 'abc-_-'
     */
    function trimStart(string, chars, guard) {
      string = toString(string);
      if (string && (guard || chars === undefined)) {
        return string.replace(reTrimStart, '');
      }
      if (!string || !(chars = baseToString(chars))) {
        return string;
      }
      var strSymbols = stringToArray(string),
          start = charsStartIndex(strSymbols, stringToArray(chars));

      return castSlice(strSymbols, start).join('');
    }

    /**
     * Truncates `string` if it's longer than the given maximum string length.
     * The last characters of the truncated string are replaced with the omission
     * string which defaults to "...".
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to truncate.
     * @param {Object} [options={}] The options object.
     * @param {number} [options.length=30] The maximum string length.
     * @param {string} [options.omission='...'] The string to indicate text is omitted.
     * @param {RegExp|string} [options.separator] The separator pattern to truncate to.
     * @returns {string} Returns the truncated string.
     * @example
     *
     * _.truncate('hi-diddly-ho there, neighborino');
     * // => 'hi-diddly-ho there, neighbo...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': ' '
     * });
     * // => 'hi-diddly-ho there,...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'length': 24,
     *   'separator': /,? +/
     * });
     * // => 'hi-diddly-ho there...'
     *
     * _.truncate('hi-diddly-ho there, neighborino', {
     *   'omission': ' [...]'
     * });
     * // => 'hi-diddly-ho there, neig [...]'
     */
    function truncate(string, options) {
      var length = DEFAULT_TRUNC_LENGTH,
          omission = DEFAULT_TRUNC_OMISSION;

      if (isObject(options)) {
        var separator = 'separator' in options ? options.separator : separator;
        length = 'length' in options ? toInteger(options.length) : length;
        omission = 'omission' in options ? baseToString(options.omission) : omission;
      }
      string = toString(string);

      var strLength = string.length;
      if (hasUnicode(string)) {
        var strSymbols = stringToArray(string);
        strLength = strSymbols.length;
      }
      if (length >= strLength) {
        return string;
      }
      var end = length - stringSize(omission);
      if (end < 1) {
        return omission;
      }
      var result = strSymbols
        ? castSlice(strSymbols, 0, end).join('')
        : string.slice(0, end);

      if (separator === undefined) {
        return result + omission;
      }
      if (strSymbols) {
        end += (result.length - end);
      }
      if (isRegExp(separator)) {
        if (string.slice(end).search(separator)) {
          var match,
              substring = result;

          if (!separator.global) {
            separator = RegExp(separator.source, toString(reFlags.exec(separator)) + 'g');
          }
          separator.lastIndex = 0;
          while ((match = separator.exec(substring))) {
            var newEnd = match.index;
          }
          result = result.slice(0, newEnd === undefined ? end : newEnd);
        }
      } else if (string.indexOf(baseToString(separator), end) != end) {
        var index = result.lastIndexOf(separator);
        if (index > -1) {
          result = result.slice(0, index);
        }
      }
      return result + omission;
    }

    /**
     * The inverse of `_.escape`; this method converts the HTML entities
     * `&amp;`, `&lt;`, `&gt;`, `&quot;`, and `&#39;` in `string` to
     * their corresponding characters.
     *
     * **Note:** No other HTML entities are unescaped. To unescape additional
     * HTML entities use a third-party library like [_he_](https://mths.be/he).
     *
     * @static
     * @memberOf _
     * @since 0.6.0
     * @category String
     * @param {string} [string=''] The string to unescape.
     * @returns {string} Returns the unescaped string.
     * @example
     *
     * _.unescape('fred, barney, &amp; pebbles');
     * // => 'fred, barney, & pebbles'
     */
    function unescape(string) {
      string = toString(string);
      return (string && reHasEscapedHtml.test(string))
        ? string.replace(reEscapedHtml, unescapeHtmlChar)
        : string;
    }

    /**
     * Converts `string`, as space separated words, to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the upper cased string.
     * @example
     *
     * _.upperCase('--foo-bar');
     * // => 'FOO BAR'
     *
     * _.upperCase('fooBar');
     * // => 'FOO BAR'
     *
     * _.upperCase('__foo_bar__');
     * // => 'FOO BAR'
     */
    var upperCase = createCompounder(function(result, word, index) {
      return result + (index ? ' ' : '') + word.toUpperCase();
    });

    /**
     * Converts the first character of `string` to upper case.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category String
     * @param {string} [string=''] The string to convert.
     * @returns {string} Returns the converted string.
     * @example
     *
     * _.upperFirst('fred');
     * // => 'Fred'
     *
     * _.upperFirst('FRED');
     * // => 'FRED'
     */
    var upperFirst = createCaseFirst('toUpperCase');

    /**
     * Splits `string` into an array of its words.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category String
     * @param {string} [string=''] The string to inspect.
     * @param {RegExp|string} [pattern] The pattern to match words.
     * @param- {Object} [guard] Enables use as an iteratee for methods like `_.map`.
     * @returns {Array} Returns the words of `string`.
     * @example
     *
     * _.words('fred, barney, & pebbles');
     * // => ['fred', 'barney', 'pebbles']
     *
     * _.words('fred, barney, & pebbles', /[^, ]+/g);
     * // => ['fred', 'barney', '&', 'pebbles']
     */
    function words(string, pattern, guard) {
      string = toString(string);
      pattern = guard ? undefined : pattern;

      if (pattern === undefined) {
        return hasUnicodeWord(string) ? unicodeWords(string) : asciiWords(string);
      }
      return string.match(pattern) || [];
    }

    /*------------------------------------------------------------------------*/

    /**
     * Attempts to invoke `func`, returning either the result or the caught error
     * object. Any additional arguments are provided to `func` when it's invoked.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Function} func The function to attempt.
     * @param {...*} [args] The arguments to invoke `func` with.
     * @returns {*} Returns the `func` result or error object.
     * @example
     *
     * // Avoid throwing errors for invalid selectors.
     * var elements = _.attempt(function(selector) {
     *   return document.querySelectorAll(selector);
     * }, '>_>');
     *
     * if (_.isError(elements)) {
     *   elements = [];
     * }
     */
    var attempt = baseRest(function(func, args) {
      try {
        return apply(func, undefined, args);
      } catch (e) {
        return isError(e) ? e : new Error(e);
      }
    });

    /**
     * Binds methods of an object to the object itself, overwriting the existing
     * method.
     *
     * **Note:** This method doesn't set the "length" property of bound functions.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Object} object The object to bind and assign the bound methods to.
     * @param {...(string|string[])} methodNames The object method names to bind.
     * @returns {Object} Returns `object`.
     * @example
     *
     * var view = {
     *   'label': 'docs',
     *   'click': function() {
     *     console.log('clicked ' + this.label);
     *   }
     * };
     *
     * _.bindAll(view, ['click']);
     * jQuery(element).on('click', view.click);
     * // => Logs 'clicked docs' when clicked.
     */
    var bindAll = flatRest(function(object, methodNames) {
      arrayEach(methodNames, function(key) {
        key = toKey(key);
        baseAssignValue(object, key, bind(object[key], object));
      });
      return object;
    });

    /**
     * Creates a function that iterates over `pairs` and invokes the corresponding
     * function of the first predicate to return truthy. The predicate-function
     * pairs are invoked with the `this` binding and arguments of the created
     * function.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Array} pairs The predicate-function pairs.
     * @returns {Function} Returns the new composite function.
     * @example
     *
     * var func = _.cond([
     *   [_.matches({ 'a': 1 }),           _.constant('matches A')],
     *   [_.conforms({ 'b': _.isNumber }), _.constant('matches B')],
     *   [_.stubTrue,                      _.constant('no match')]
     * ]);
     *
     * func({ 'a': 1, 'b': 2 });
     * // => 'matches A'
     *
     * func({ 'a': 0, 'b': 1 });
     * // => 'matches B'
     *
     * func({ 'a': '1', 'b': '2' });
     * // => 'no match'
     */
    function cond(pairs) {
      var length = pairs == null ? 0 : pairs.length,
          toIteratee = getIteratee();

      pairs = !length ? [] : arrayMap(pairs, function(pair) {
        if (typeof pair[1] != 'function') {
          throw new TypeError(FUNC_ERROR_TEXT);
        }
        return [toIteratee(pair[0]), pair[1]];
      });

      return baseRest(function(args) {
        var index = -1;
        while (++index < length) {
          var pair = pairs[index];
          if (apply(pair[0], this, args)) {
            return apply(pair[1], this, args);
          }
        }
      });
    }

    /**
     * Creates a function that invokes the predicate properties of `source` with
     * the corresponding property values of a given object, returning `true` if
     * all predicates return truthy, else `false`.
     *
     * **Note:** The created function is equivalent to `_.conformsTo` with
     * `source` partially applied.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {Object} source The object of property predicates to conform to.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 2, 'b': 1 },
     *   { 'a': 1, 'b': 2 }
     * ];
     *
     * _.filter(objects, _.conforms({ 'b': function(n) { return n > 1; } }));
     * // => [{ 'a': 1, 'b': 2 }]
     */
    function conforms(source) {
      return baseConforms(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that returns `value`.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {*} value The value to return from the new function.
     * @returns {Function} Returns the new constant function.
     * @example
     *
     * var objects = _.times(2, _.constant({ 'a': 1 }));
     *
     * console.log(objects);
     * // => [{ 'a': 1 }, { 'a': 1 }]
     *
     * console.log(objects[0] === objects[1]);
     * // => true
     */
    function constant(value) {
      return function() {
        return value;
      };
    }

    /**
     * Checks `value` to determine whether a default value should be returned in
     * its place. The `defaultValue` is returned if `value` is `NaN`, `null`,
     * or `undefined`.
     *
     * @static
     * @memberOf _
     * @since 4.14.0
     * @category Util
     * @param {*} value The value to check.
     * @param {*} defaultValue The default value.
     * @returns {*} Returns the resolved value.
     * @example
     *
     * _.defaultTo(1, 10);
     * // => 1
     *
     * _.defaultTo(undefined, 10);
     * // => 10
     */
    function defaultTo(value, defaultValue) {
      return (value == null || value !== value) ? defaultValue : value;
    }

    /**
     * Creates a function that returns the result of invoking the given functions
     * with the `this` binding of the created function, where each successive
     * invocation is supplied the return value of the previous.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flowRight
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flow([_.add, square]);
     * addSquare(1, 2);
     * // => 9
     */
    var flow = createFlow();

    /**
     * This method is like `_.flow` except that it creates a function that
     * invokes the given functions from right to left.
     *
     * @static
     * @since 3.0.0
     * @memberOf _
     * @category Util
     * @param {...(Function|Function[])} [funcs] The functions to invoke.
     * @returns {Function} Returns the new composite function.
     * @see _.flow
     * @example
     *
     * function square(n) {
     *   return n * n;
     * }
     *
     * var addSquare = _.flowRight([square, _.add]);
     * addSquare(1, 2);
     * // => 9
     */
    var flowRight = createFlow(true);

    /**
     * This method returns the first argument it receives.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {*} value Any value.
     * @returns {*} Returns `value`.
     * @example
     *
     * var object = { 'a': 1 };
     *
     * console.log(_.identity(object) === object);
     * // => true
     */
    function identity(value) {
      return value;
    }

    /**
     * Creates a function that invokes `func` with the arguments of the created
     * function. If `func` is a property name, the created function returns the
     * property value for a given element. If `func` is an array or object, the
     * created function returns `true` for elements that contain the equivalent
     * source properties, otherwise it returns `false`.
     *
     * @static
     * @since 4.0.0
     * @memberOf _
     * @category Util
     * @param {*} [func=_.identity] The value to convert to a callback.
     * @returns {Function} Returns the callback.
     * @example
     *
     * var users = [
     *   { 'user': 'barney', 'age': 36, 'active': true },
     *   { 'user': 'fred',   'age': 40, 'active': false }
     * ];
     *
     * // The `_.matches` iteratee shorthand.
     * _.filter(users, _.iteratee({ 'user': 'barney', 'active': true }));
     * // => [{ 'user': 'barney', 'age': 36, 'active': true }]
     *
     * // The `_.matchesProperty` iteratee shorthand.
     * _.filter(users, _.iteratee(['user', 'fred']));
     * // => [{ 'user': 'fred', 'age': 40 }]
     *
     * // The `_.property` iteratee shorthand.
     * _.map(users, _.iteratee('user'));
     * // => ['barney', 'fred']
     *
     * // Create custom iteratee shorthands.
     * _.iteratee = _.wrap(_.iteratee, function(iteratee, func) {
     *   return !_.isRegExp(func) ? iteratee(func) : function(string) {
     *     return func.test(string);
     *   };
     * });
     *
     * _.filter(['abc', 'def'], /ef/);
     * // => ['def']
     */
    function iteratee(func) {
      return baseIteratee(typeof func == 'function' ? func : baseClone(func, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between a given
     * object and `source`, returning `true` if the given object has equivalent
     * property values, else `false`.
     *
     * **Note:** The created function is equivalent to `_.isMatch` with `source`
     * partially applied.
     *
     * Partial comparisons will match empty array and empty object `source`
     * values against any array or object value, respectively. See `_.isEqual`
     * for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} source The object of property values to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.filter(objects, _.matches({ 'a': 4, 'c': 6 }));
     * // => [{ 'a': 4, 'b': 5, 'c': 6 }]
     */
    function matches(source) {
      return baseMatches(baseClone(source, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that performs a partial deep comparison between the
     * value at `path` of a given object to `srcValue`, returning `true` if the
     * object value is equivalent, else `false`.
     *
     * **Note:** Partial comparisons will match empty array and empty object
     * `srcValue` values against any array or object value, respectively. See
     * `_.isEqual` for a list of supported value comparisons.
     *
     * @static
     * @memberOf _
     * @since 3.2.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @param {*} srcValue The value to match.
     * @returns {Function} Returns the new spec function.
     * @example
     *
     * var objects = [
     *   { 'a': 1, 'b': 2, 'c': 3 },
     *   { 'a': 4, 'b': 5, 'c': 6 }
     * ];
     *
     * _.find(objects, _.matchesProperty('a', 4));
     * // => { 'a': 4, 'b': 5, 'c': 6 }
     */
    function matchesProperty(path, srcValue) {
      return baseMatchesProperty(path, baseClone(srcValue, CLONE_DEEP_FLAG));
    }

    /**
     * Creates a function that invokes the method at `path` of a given object.
     * Any additional arguments are provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Array|string} path The path of the method to invoke.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': _.constant(2) } },
     *   { 'a': { 'b': _.constant(1) } }
     * ];
     *
     * _.map(objects, _.method('a.b'));
     * // => [2, 1]
     *
     * _.map(objects, _.method(['a', 'b']));
     * // => [2, 1]
     */
    var method = baseRest(function(path, args) {
      return function(object) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * The opposite of `_.method`; this method creates a function that invokes
     * the method at a given path of `object`. Any additional arguments are
     * provided to the invoked method.
     *
     * @static
     * @memberOf _
     * @since 3.7.0
     * @category Util
     * @param {Object} object The object to query.
     * @param {...*} [args] The arguments to invoke the method with.
     * @returns {Function} Returns the new invoker function.
     * @example
     *
     * var array = _.times(3, _.constant),
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.methodOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.methodOf(object));
     * // => [2, 0]
     */
    var methodOf = baseRest(function(object, args) {
      return function(path) {
        return baseInvoke(object, path, args);
      };
    });

    /**
     * Adds all own enumerable string keyed function properties of a source
     * object to the destination object. If `object` is a function, then methods
     * are added to its prototype as well.
     *
     * **Note:** Use `_.runInContext` to create a pristine `lodash` function to
     * avoid conflicts caused by modifying the original.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {Function|Object} [object=lodash] The destination object.
     * @param {Object} source The object of functions to add.
     * @param {Object} [options={}] The options object.
     * @param {boolean} [options.chain=true] Specify whether mixins are chainable.
     * @returns {Function|Object} Returns `object`.
     * @example
     *
     * function vowels(string) {
     *   return _.filter(string, function(v) {
     *     return /[aeiou]/i.test(v);
     *   });
     * }
     *
     * _.mixin({ 'vowels': vowels });
     * _.vowels('fred');
     * // => ['e']
     *
     * _('fred').vowels().value();
     * // => ['e']
     *
     * _.mixin({ 'vowels': vowels }, { 'chain': false });
     * _('fred').vowels();
     * // => ['e']
     */
    function mixin(object, source, options) {
      var props = keys(source),
          methodNames = baseFunctions(source, props);

      if (options == null &&
          !(isObject(source) && (methodNames.length || !props.length))) {
        options = source;
        source = object;
        object = this;
        methodNames = baseFunctions(source, keys(source));
      }
      var chain = !(isObject(options) && 'chain' in options) || !!options.chain,
          isFunc = isFunction(object);

      arrayEach(methodNames, function(methodName) {
        var func = source[methodName];
        object[methodName] = func;
        if (isFunc) {
          object.prototype[methodName] = function() {
            var chainAll = this.__chain__;
            if (chain || chainAll) {
              var result = object(this.__wrapped__),
                  actions = result.__actions__ = copyArray(this.__actions__);

              actions.push({ 'func': func, 'args': arguments, 'thisArg': object });
              result.__chain__ = chainAll;
              return result;
            }
            return func.apply(object, arrayPush([this.value()], arguments));
          };
        }
      });

      return object;
    }

    /**
     * Reverts the `_` variable to its previous value and returns a reference to
     * the `lodash` function.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @returns {Function} Returns the `lodash` function.
     * @example
     *
     * var lodash = _.noConflict();
     */
    function noConflict() {
      if (root._ === this) {
        root._ = oldDash;
      }
      return this;
    }

    /**
     * This method returns `undefined`.
     *
     * @static
     * @memberOf _
     * @since 2.3.0
     * @category Util
     * @example
     *
     * _.times(2, _.noop);
     * // => [undefined, undefined]
     */
    function noop() {
      // No operation performed.
    }

    /**
     * Creates a function that gets the argument at index `n`. If `n` is negative,
     * the nth argument from the end is returned.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [n=0] The index of the argument to return.
     * @returns {Function} Returns the new pass-thru function.
     * @example
     *
     * var func = _.nthArg(1);
     * func('a', 'b', 'c', 'd');
     * // => 'b'
     *
     * var func = _.nthArg(-2);
     * func('a', 'b', 'c', 'd');
     * // => 'c'
     */
    function nthArg(n) {
      n = toInteger(n);
      return baseRest(function(args) {
        return baseNth(args, n);
      });
    }

    /**
     * Creates a function that invokes `iteratees` with the arguments it receives
     * and returns their results.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [iteratees=[_.identity]]
     *  The iteratees to invoke.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.over([Math.max, Math.min]);
     *
     * func(1, 2, 3, 4);
     * // => [4, 1]
     */
    var over = createOver(arrayMap);

    /**
     * Creates a function that checks if **all** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overEvery([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => false
     *
     * func(NaN);
     * // => false
     */
    var overEvery = createOver(arrayEvery);

    /**
     * Creates a function that checks if **any** of the `predicates` return
     * truthy when invoked with the arguments it receives.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {...(Function|Function[])} [predicates=[_.identity]]
     *  The predicates to check.
     * @returns {Function} Returns the new function.
     * @example
     *
     * var func = _.overSome([Boolean, isFinite]);
     *
     * func('1');
     * // => true
     *
     * func(null);
     * // => true
     *
     * func(NaN);
     * // => false
     */
    var overSome = createOver(arraySome);

    /**
     * Creates a function that returns the value at `path` of a given object.
     *
     * @static
     * @memberOf _
     * @since 2.4.0
     * @category Util
     * @param {Array|string} path The path of the property to get.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var objects = [
     *   { 'a': { 'b': 2 } },
     *   { 'a': { 'b': 1 } }
     * ];
     *
     * _.map(objects, _.property('a.b'));
     * // => [2, 1]
     *
     * _.map(_.sortBy(objects, _.property(['a', 'b'])), 'a.b');
     * // => [1, 2]
     */
    function property(path) {
      return isKey(path) ? baseProperty(toKey(path)) : basePropertyDeep(path);
    }

    /**
     * The opposite of `_.property`; this method creates a function that returns
     * the value at a given path of `object`.
     *
     * @static
     * @memberOf _
     * @since 3.0.0
     * @category Util
     * @param {Object} object The object to query.
     * @returns {Function} Returns the new accessor function.
     * @example
     *
     * var array = [0, 1, 2],
     *     object = { 'a': array, 'b': array, 'c': array };
     *
     * _.map(['a[2]', 'c[0]'], _.propertyOf(object));
     * // => [2, 0]
     *
     * _.map([['a', '2'], ['c', '0']], _.propertyOf(object));
     * // => [2, 0]
     */
    function propertyOf(object) {
      return function(path) {
        return object == null ? undefined : baseGet(object, path);
      };
    }

    /**
     * Creates an array of numbers (positive and/or negative) progressing from
     * `start` up to, but not including, `end`. A step of `-1` is used if a negative
     * `start` is specified without an `end` or `step`. If `end` is not specified,
     * it's set to `start` with `start` then set to `0`.
     *
     * **Note:** JavaScript follows the IEEE-754 standard for resolving
     * floating-point values which can produce unexpected results.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.rangeRight
     * @example
     *
     * _.range(4);
     * // => [0, 1, 2, 3]
     *
     * _.range(-4);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 5);
     * // => [1, 2, 3, 4]
     *
     * _.range(0, 20, 5);
     * // => [0, 5, 10, 15]
     *
     * _.range(0, -4, -1);
     * // => [0, -1, -2, -3]
     *
     * _.range(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.range(0);
     * // => []
     */
    var range = createRange();

    /**
     * This method is like `_.range` except that it populates values in
     * descending order.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {number} [start=0] The start of the range.
     * @param {number} end The end of the range.
     * @param {number} [step=1] The value to increment or decrement by.
     * @returns {Array} Returns the range of numbers.
     * @see _.inRange, _.range
     * @example
     *
     * _.rangeRight(4);
     * // => [3, 2, 1, 0]
     *
     * _.rangeRight(-4);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 5);
     * // => [4, 3, 2, 1]
     *
     * _.rangeRight(0, 20, 5);
     * // => [15, 10, 5, 0]
     *
     * _.rangeRight(0, -4, -1);
     * // => [-3, -2, -1, 0]
     *
     * _.rangeRight(1, 4, 0);
     * // => [1, 1, 1]
     *
     * _.rangeRight(0);
     * // => []
     */
    var rangeRight = createRange(true);

    /**
     * This method returns a new empty array.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Array} Returns the new empty array.
     * @example
     *
     * var arrays = _.times(2, _.stubArray);
     *
     * console.log(arrays);
     * // => [[], []]
     *
     * console.log(arrays[0] === arrays[1]);
     * // => false
     */
    function stubArray() {
      return [];
    }

    /**
     * This method returns `false`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `false`.
     * @example
     *
     * _.times(2, _.stubFalse);
     * // => [false, false]
     */
    function stubFalse() {
      return false;
    }

    /**
     * This method returns a new empty object.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {Object} Returns the new empty object.
     * @example
     *
     * var objects = _.times(2, _.stubObject);
     *
     * console.log(objects);
     * // => [{}, {}]
     *
     * console.log(objects[0] === objects[1]);
     * // => false
     */
    function stubObject() {
      return {};
    }

    /**
     * This method returns an empty string.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {string} Returns the empty string.
     * @example
     *
     * _.times(2, _.stubString);
     * // => ['', '']
     */
    function stubString() {
      return '';
    }

    /**
     * This method returns `true`.
     *
     * @static
     * @memberOf _
     * @since 4.13.0
     * @category Util
     * @returns {boolean} Returns `true`.
     * @example
     *
     * _.times(2, _.stubTrue);
     * // => [true, true]
     */
    function stubTrue() {
      return true;
    }

    /**
     * Invokes the iteratee `n` times, returning an array of the results of
     * each invocation. The iteratee is invoked with one argument; (index).
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {number} n The number of times to invoke `iteratee`.
     * @param {Function} [iteratee=_.identity] The function invoked per iteration.
     * @returns {Array} Returns the array of results.
     * @example
     *
     * _.times(3, String);
     * // => ['0', '1', '2']
     *
     *  _.times(4, _.constant(0));
     * // => [0, 0, 0, 0]
     */
    function times(n, iteratee) {
      n = toInteger(n);
      if (n < 1 || n > MAX_SAFE_INTEGER) {
        return [];
      }
      var index = MAX_ARRAY_LENGTH,
          length = nativeMin(n, MAX_ARRAY_LENGTH);

      iteratee = getIteratee(iteratee);
      n -= MAX_ARRAY_LENGTH;

      var result = baseTimes(length, iteratee);
      while (++index < n) {
        iteratee(index);
      }
      return result;
    }

    /**
     * Converts `value` to a property path array.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Util
     * @param {*} value The value to convert.
     * @returns {Array} Returns the new property path array.
     * @example
     *
     * _.toPath('a.b.c');
     * // => ['a', 'b', 'c']
     *
     * _.toPath('a[0].b.c');
     * // => ['a', '0', 'b', 'c']
     */
    function toPath(value) {
      if (isArray(value)) {
        return arrayMap(value, toKey);
      }
      return isSymbol(value) ? [value] : copyArray(stringToPath(toString(value)));
    }

    /**
     * Generates a unique ID. If `prefix` is given, the ID is appended to it.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Util
     * @param {string} [prefix=''] The value to prefix the ID with.
     * @returns {string} Returns the unique ID.
     * @example
     *
     * _.uniqueId('contact_');
     * // => 'contact_104'
     *
     * _.uniqueId();
     * // => '105'
     */
    function uniqueId(prefix) {
      var id = ++idCounter;
      return toString(prefix) + id;
    }

    /*------------------------------------------------------------------------*/

    /**
     * Adds two numbers.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {number} augend The first number in an addition.
     * @param {number} addend The second number in an addition.
     * @returns {number} Returns the total.
     * @example
     *
     * _.add(6, 4);
     * // => 10
     */
    var add = createMathOperation(function(augend, addend) {
      return augend + addend;
    }, 0);

    /**
     * Computes `number` rounded up to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round up.
     * @param {number} [precision=0] The precision to round up to.
     * @returns {number} Returns the rounded up number.
     * @example
     *
     * _.ceil(4.006);
     * // => 5
     *
     * _.ceil(6.004, 2);
     * // => 6.01
     *
     * _.ceil(6040, -2);
     * // => 6100
     */
    var ceil = createRound('ceil');

    /**
     * Divide two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} dividend The first number in a division.
     * @param {number} divisor The second number in a division.
     * @returns {number} Returns the quotient.
     * @example
     *
     * _.divide(6, 4);
     * // => 1.5
     */
    var divide = createMathOperation(function(dividend, divisor) {
      return dividend / divisor;
    }, 1);

    /**
     * Computes `number` rounded down to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round down.
     * @param {number} [precision=0] The precision to round down to.
     * @returns {number} Returns the rounded down number.
     * @example
     *
     * _.floor(4.006);
     * // => 4
     *
     * _.floor(0.046, 2);
     * // => 0.04
     *
     * _.floor(4060, -2);
     * // => 4000
     */
    var floor = createRound('floor');

    /**
     * Computes the maximum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * _.max([4, 2, 8, 6]);
     * // => 8
     *
     * _.max([]);
     * // => undefined
     */
    function max(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseGt)
        : undefined;
    }

    /**
     * This method is like `_.max` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the maximum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.maxBy(objects, function(o) { return o.n; });
     * // => { 'n': 2 }
     *
     * // The `_.property` iteratee shorthand.
     * _.maxBy(objects, 'n');
     * // => { 'n': 2 }
     */
    function maxBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseGt)
        : undefined;
    }

    /**
     * Computes the mean of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the mean.
     * @example
     *
     * _.mean([4, 2, 8, 6]);
     * // => 5
     */
    function mean(array) {
      return baseMean(array, identity);
    }

    /**
     * This method is like `_.mean` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be averaged.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the mean.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.meanBy(objects, function(o) { return o.n; });
     * // => 5
     *
     * // The `_.property` iteratee shorthand.
     * _.meanBy(objects, 'n');
     * // => 5
     */
    function meanBy(array, iteratee) {
      return baseMean(array, getIteratee(iteratee, 2));
    }

    /**
     * Computes the minimum value of `array`. If `array` is empty or falsey,
     * `undefined` is returned.
     *
     * @static
     * @since 0.1.0
     * @memberOf _
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * _.min([4, 2, 8, 6]);
     * // => 2
     *
     * _.min([]);
     * // => undefined
     */
    function min(array) {
      return (array && array.length)
        ? baseExtremum(array, identity, baseLt)
        : undefined;
    }

    /**
     * This method is like `_.min` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the criterion by which
     * the value is ranked. The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {*} Returns the minimum value.
     * @example
     *
     * var objects = [{ 'n': 1 }, { 'n': 2 }];
     *
     * _.minBy(objects, function(o) { return o.n; });
     * // => { 'n': 1 }
     *
     * // The `_.property` iteratee shorthand.
     * _.minBy(objects, 'n');
     * // => { 'n': 1 }
     */
    function minBy(array, iteratee) {
      return (array && array.length)
        ? baseExtremum(array, getIteratee(iteratee, 2), baseLt)
        : undefined;
    }

    /**
     * Multiply two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.7.0
     * @category Math
     * @param {number} multiplier The first number in a multiplication.
     * @param {number} multiplicand The second number in a multiplication.
     * @returns {number} Returns the product.
     * @example
     *
     * _.multiply(6, 4);
     * // => 24
     */
    var multiply = createMathOperation(function(multiplier, multiplicand) {
      return multiplier * multiplicand;
    }, 1);

    /**
     * Computes `number` rounded to `precision`.
     *
     * @static
     * @memberOf _
     * @since 3.10.0
     * @category Math
     * @param {number} number The number to round.
     * @param {number} [precision=0] The precision to round to.
     * @returns {number} Returns the rounded number.
     * @example
     *
     * _.round(4.006);
     * // => 4
     *
     * _.round(4.006, 2);
     * // => 4.01
     *
     * _.round(4060, -2);
     * // => 4100
     */
    var round = createRound('round');

    /**
     * Subtract two numbers.
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {number} minuend The first number in a subtraction.
     * @param {number} subtrahend The second number in a subtraction.
     * @returns {number} Returns the difference.
     * @example
     *
     * _.subtract(6, 4);
     * // => 2
     */
    var subtract = createMathOperation(function(minuend, subtrahend) {
      return minuend - subtrahend;
    }, 0);

    /**
     * Computes the sum of the values in `array`.
     *
     * @static
     * @memberOf _
     * @since 3.4.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @returns {number} Returns the sum.
     * @example
     *
     * _.sum([4, 2, 8, 6]);
     * // => 20
     */
    function sum(array) {
      return (array && array.length)
        ? baseSum(array, identity)
        : 0;
    }

    /**
     * This method is like `_.sum` except that it accepts `iteratee` which is
     * invoked for each element in `array` to generate the value to be summed.
     * The iteratee is invoked with one argument: (value).
     *
     * @static
     * @memberOf _
     * @since 4.0.0
     * @category Math
     * @param {Array} array The array to iterate over.
     * @param {Function} [iteratee=_.identity] The iteratee invoked per element.
     * @returns {number} Returns the sum.
     * @example
     *
     * var objects = [{ 'n': 4 }, { 'n': 2 }, { 'n': 8 }, { 'n': 6 }];
     *
     * _.sumBy(objects, function(o) { return o.n; });
     * // => 20
     *
     * // The `_.property` iteratee shorthand.
     * _.sumBy(objects, 'n');
     * // => 20
     */
    function sumBy(array, iteratee) {
      return (array && array.length)
        ? baseSum(array, getIteratee(iteratee, 2))
        : 0;
    }

    /*------------------------------------------------------------------------*/

    // Add methods that return wrapped values in chain sequences.
    lodash.after = after;
    lodash.ary = ary;
    lodash.assign = assign;
    lodash.assignIn = assignIn;
    lodash.assignInWith = assignInWith;
    lodash.assignWith = assignWith;
    lodash.at = at;
    lodash.before = before;
    lodash.bind = bind;
    lodash.bindAll = bindAll;
    lodash.bindKey = bindKey;
    lodash.castArray = castArray;
    lodash.chain = chain;
    lodash.chunk = chunk;
    lodash.compact = compact;
    lodash.concat = concat;
    lodash.cond = cond;
    lodash.conforms = conforms;
    lodash.constant = constant;
    lodash.countBy = countBy;
    lodash.create = create;
    lodash.curry = curry;
    lodash.curryRight = curryRight;
    lodash.debounce = debounce;
    lodash.defaults = defaults;
    lodash.defaultsDeep = defaultsDeep;
    lodash.defer = defer;
    lodash.delay = delay;
    lodash.difference = difference;
    lodash.differenceBy = differenceBy;
    lodash.differenceWith = differenceWith;
    lodash.drop = drop;
    lodash.dropRight = dropRight;
    lodash.dropRightWhile = dropRightWhile;
    lodash.dropWhile = dropWhile;
    lodash.fill = fill;
    lodash.filter = filter;
    lodash.flatMap = flatMap;
    lodash.flatMapDeep = flatMapDeep;
    lodash.flatMapDepth = flatMapDepth;
    lodash.flatten = flatten;
    lodash.flattenDeep = flattenDeep;
    lodash.flattenDepth = flattenDepth;
    lodash.flip = flip;
    lodash.flow = flow;
    lodash.flowRight = flowRight;
    lodash.fromPairs = fromPairs;
    lodash.functions = functions;
    lodash.functionsIn = functionsIn;
    lodash.groupBy = groupBy;
    lodash.initial = initial;
    lodash.intersection = intersection;
    lodash.intersectionBy = intersectionBy;
    lodash.intersectionWith = intersectionWith;
    lodash.invert = invert;
    lodash.invertBy = invertBy;
    lodash.invokeMap = invokeMap;
    lodash.iteratee = iteratee;
    lodash.keyBy = keyBy;
    lodash.keys = keys;
    lodash.keysIn = keysIn;
    lodash.map = map;
    lodash.mapKeys = mapKeys;
    lodash.mapValues = mapValues;
    lodash.matches = matches;
    lodash.matchesProperty = matchesProperty;
    lodash.memoize = memoize;
    lodash.merge = merge;
    lodash.mergeWith = mergeWith;
    lodash.method = method;
    lodash.methodOf = methodOf;
    lodash.mixin = mixin;
    lodash.negate = negate;
    lodash.nthArg = nthArg;
    lodash.omit = omit;
    lodash.omitBy = omitBy;
    lodash.once = once;
    lodash.orderBy = orderBy;
    lodash.over = over;
    lodash.overArgs = overArgs;
    lodash.overEvery = overEvery;
    lodash.overSome = overSome;
    lodash.partial = partial;
    lodash.partialRight = partialRight;
    lodash.partition = partition;
    lodash.pick = pick;
    lodash.pickBy = pickBy;
    lodash.property = property;
    lodash.propertyOf = propertyOf;
    lodash.pull = pull;
    lodash.pullAll = pullAll;
    lodash.pullAllBy = pullAllBy;
    lodash.pullAllWith = pullAllWith;
    lodash.pullAt = pullAt;
    lodash.range = range;
    lodash.rangeRight = rangeRight;
    lodash.rearg = rearg;
    lodash.reject = reject;
    lodash.remove = remove;
    lodash.rest = rest;
    lodash.reverse = reverse;
    lodash.sampleSize = sampleSize;
    lodash.set = set;
    lodash.setWith = setWith;
    lodash.shuffle = shuffle;
    lodash.slice = slice;
    lodash.sortBy = sortBy;
    lodash.sortedUniq = sortedUniq;
    lodash.sortedUniqBy = sortedUniqBy;
    lodash.split = split;
    lodash.spread = spread;
    lodash.tail = tail;
    lodash.take = take;
    lodash.takeRight = takeRight;
    lodash.takeRightWhile = takeRightWhile;
    lodash.takeWhile = takeWhile;
    lodash.tap = tap;
    lodash.throttle = throttle;
    lodash.thru = thru;
    lodash.toArray = toArray;
    lodash.toPairs = toPairs;
    lodash.toPairsIn = toPairsIn;
    lodash.toPath = toPath;
    lodash.toPlainObject = toPlainObject;
    lodash.transform = transform;
    lodash.unary = unary;
    lodash.union = union;
    lodash.unionBy = unionBy;
    lodash.unionWith = unionWith;
    lodash.uniq = uniq;
    lodash.uniqBy = uniqBy;
    lodash.uniqWith = uniqWith;
    lodash.unset = unset;
    lodash.unzip = unzip;
    lodash.unzipWith = unzipWith;
    lodash.update = update;
    lodash.updateWith = updateWith;
    lodash.values = values;
    lodash.valuesIn = valuesIn;
    lodash.without = without;
    lodash.words = words;
    lodash.wrap = wrap;
    lodash.xor = xor;
    lodash.xorBy = xorBy;
    lodash.xorWith = xorWith;
    lodash.zip = zip;
    lodash.zipObject = zipObject;
    lodash.zipObjectDeep = zipObjectDeep;
    lodash.zipWith = zipWith;

    // Add aliases.
    lodash.entries = toPairs;
    lodash.entriesIn = toPairsIn;
    lodash.extend = assignIn;
    lodash.extendWith = assignInWith;

    // Add methods to `lodash.prototype`.
    mixin(lodash, lodash);

    /*------------------------------------------------------------------------*/

    // Add methods that return unwrapped values in chain sequences.
    lodash.add = add;
    lodash.attempt = attempt;
    lodash.camelCase = camelCase;
    lodash.capitalize = capitalize;
    lodash.ceil = ceil;
    lodash.clamp = clamp;
    lodash.clone = clone;
    lodash.cloneDeep = cloneDeep;
    lodash.cloneDeepWith = cloneDeepWith;
    lodash.cloneWith = cloneWith;
    lodash.conformsTo = conformsTo;
    lodash.deburr = deburr;
    lodash.defaultTo = defaultTo;
    lodash.divide = divide;
    lodash.endsWith = endsWith;
    lodash.eq = eq;
    lodash.escape = escape;
    lodash.escapeRegExp = escapeRegExp;
    lodash.every = every;
    lodash.find = find;
    lodash.findIndex = findIndex;
    lodash.findKey = findKey;
    lodash.findLast = findLast;
    lodash.findLastIndex = findLastIndex;
    lodash.findLastKey = findLastKey;
    lodash.floor = floor;
    lodash.forEach = forEach;
    lodash.forEachRight = forEachRight;
    lodash.forIn = forIn;
    lodash.forInRight = forInRight;
    lodash.forOwn = forOwn;
    lodash.forOwnRight = forOwnRight;
    lodash.get = get;
    lodash.gt = gt;
    lodash.gte = gte;
    lodash.has = has;
    lodash.hasIn = hasIn;
    lodash.head = head;
    lodash.identity = identity;
    lodash.includes = includes;
    lodash.indexOf = indexOf;
    lodash.inRange = inRange;
    lodash.invoke = invoke;
    lodash.isArguments = isArguments;
    lodash.isArray = isArray;
    lodash.isArrayBuffer = isArrayBuffer;
    lodash.isArrayLike = isArrayLike;
    lodash.isArrayLikeObject = isArrayLikeObject;
    lodash.isBoolean = isBoolean;
    lodash.isBuffer = isBuffer;
    lodash.isDate = isDate;
    lodash.isElement = isElement;
    lodash.isEmpty = isEmpty;
    lodash.isEqual = isEqual;
    lodash.isEqualWith = isEqualWith;
    lodash.isError = isError;
    lodash.isFinite = isFinite;
    lodash.isFunction = isFunction;
    lodash.isInteger = isInteger;
    lodash.isLength = isLength;
    lodash.isMap = isMap;
    lodash.isMatch = isMatch;
    lodash.isMatchWith = isMatchWith;
    lodash.isNaN = isNaN;
    lodash.isNative = isNative;
    lodash.isNil = isNil;
    lodash.isNull = isNull;
    lodash.isNumber = isNumber;
    lodash.isObject = isObject;
    lodash.isObjectLike = isObjectLike;
    lodash.isPlainObject = isPlainObject;
    lodash.isRegExp = isRegExp;
    lodash.isSafeInteger = isSafeInteger;
    lodash.isSet = isSet;
    lodash.isString = isString;
    lodash.isSymbol = isSymbol;
    lodash.isTypedArray = isTypedArray;
    lodash.isUndefined = isUndefined;
    lodash.isWeakMap = isWeakMap;
    lodash.isWeakSet = isWeakSet;
    lodash.join = join;
    lodash.kebabCase = kebabCase;
    lodash.last = last;
    lodash.lastIndexOf = lastIndexOf;
    lodash.lowerCase = lowerCase;
    lodash.lowerFirst = lowerFirst;
    lodash.lt = lt;
    lodash.lte = lte;
    lodash.max = max;
    lodash.maxBy = maxBy;
    lodash.mean = mean;
    lodash.meanBy = meanBy;
    lodash.min = min;
    lodash.minBy = minBy;
    lodash.stubArray = stubArray;
    lodash.stubFalse = stubFalse;
    lodash.stubObject = stubObject;
    lodash.stubString = stubString;
    lodash.stubTrue = stubTrue;
    lodash.multiply = multiply;
    lodash.nth = nth;
    lodash.noConflict = noConflict;
    lodash.noop = noop;
    lodash.now = now;
    lodash.pad = pad;
    lodash.padEnd = padEnd;
    lodash.padStart = padStart;
    lodash.parseInt = parseInt;
    lodash.random = random;
    lodash.reduce = reduce;
    lodash.reduceRight = reduceRight;
    lodash.repeat = repeat;
    lodash.replace = replace;
    lodash.result = result;
    lodash.round = round;
    lodash.runInContext = runInContext;
    lodash.sample = sample;
    lodash.size = size;
    lodash.snakeCase = snakeCase;
    lodash.some = some;
    lodash.sortedIndex = sortedIndex;
    lodash.sortedIndexBy = sortedIndexBy;
    lodash.sortedIndexOf = sortedIndexOf;
    lodash.sortedLastIndex = sortedLastIndex;
    lodash.sortedLastIndexBy = sortedLastIndexBy;
    lodash.sortedLastIndexOf = sortedLastIndexOf;
    lodash.startCase = startCase;
    lodash.startsWith = startsWith;
    lodash.subtract = subtract;
    lodash.sum = sum;
    lodash.sumBy = sumBy;
    lodash.template = template;
    lodash.times = times;
    lodash.toFinite = toFinite;
    lodash.toInteger = toInteger;
    lodash.toLength = toLength;
    lodash.toLower = toLower;
    lodash.toNumber = toNumber;
    lodash.toSafeInteger = toSafeInteger;
    lodash.toString = toString;
    lodash.toUpper = toUpper;
    lodash.trim = trim;
    lodash.trimEnd = trimEnd;
    lodash.trimStart = trimStart;
    lodash.truncate = truncate;
    lodash.unescape = unescape;
    lodash.uniqueId = uniqueId;
    lodash.upperCase = upperCase;
    lodash.upperFirst = upperFirst;

    // Add aliases.
    lodash.each = forEach;
    lodash.eachRight = forEachRight;
    lodash.first = head;

    mixin(lodash, (function() {
      var source = {};
      baseForOwn(lodash, function(func, methodName) {
        if (!hasOwnProperty.call(lodash.prototype, methodName)) {
          source[methodName] = func;
        }
      });
      return source;
    }()), { 'chain': false });

    /*------------------------------------------------------------------------*/

    /**
     * The semantic version number.
     *
     * @static
     * @memberOf _
     * @type {string}
     */
    lodash.VERSION = VERSION;

    // Assign default placeholders.
    arrayEach(['bind', 'bindKey', 'curry', 'curryRight', 'partial', 'partialRight'], function(methodName) {
      lodash[methodName].placeholder = lodash;
    });

    // Add `LazyWrapper` methods for `_.drop` and `_.take` variants.
    arrayEach(['drop', 'take'], function(methodName, index) {
      LazyWrapper.prototype[methodName] = function(n) {
        n = n === undefined ? 1 : nativeMax(toInteger(n), 0);

        var result = (this.__filtered__ && !index)
          ? new LazyWrapper(this)
          : this.clone();

        if (result.__filtered__) {
          result.__takeCount__ = nativeMin(n, result.__takeCount__);
        } else {
          result.__views__.push({
            'size': nativeMin(n, MAX_ARRAY_LENGTH),
            'type': methodName + (result.__dir__ < 0 ? 'Right' : '')
          });
        }
        return result;
      };

      LazyWrapper.prototype[methodName + 'Right'] = function(n) {
        return this.reverse()[methodName](n).reverse();
      };
    });

    // Add `LazyWrapper` methods that accept an `iteratee` value.
    arrayEach(['filter', 'map', 'takeWhile'], function(methodName, index) {
      var type = index + 1,
          isFilter = type == LAZY_FILTER_FLAG || type == LAZY_WHILE_FLAG;

      LazyWrapper.prototype[methodName] = function(iteratee) {
        var result = this.clone();
        result.__iteratees__.push({
          'iteratee': getIteratee(iteratee, 3),
          'type': type
        });
        result.__filtered__ = result.__filtered__ || isFilter;
        return result;
      };
    });

    // Add `LazyWrapper` methods for `_.head` and `_.last`.
    arrayEach(['head', 'last'], function(methodName, index) {
      var takeName = 'take' + (index ? 'Right' : '');

      LazyWrapper.prototype[methodName] = function() {
        return this[takeName](1).value()[0];
      };
    });

    // Add `LazyWrapper` methods for `_.initial` and `_.tail`.
    arrayEach(['initial', 'tail'], function(methodName, index) {
      var dropName = 'drop' + (index ? '' : 'Right');

      LazyWrapper.prototype[methodName] = function() {
        return this.__filtered__ ? new LazyWrapper(this) : this[dropName](1);
      };
    });

    LazyWrapper.prototype.compact = function() {
      return this.filter(identity);
    };

    LazyWrapper.prototype.find = function(predicate) {
      return this.filter(predicate).head();
    };

    LazyWrapper.prototype.findLast = function(predicate) {
      return this.reverse().find(predicate);
    };

    LazyWrapper.prototype.invokeMap = baseRest(function(path, args) {
      if (typeof path == 'function') {
        return new LazyWrapper(this);
      }
      return this.map(function(value) {
        return baseInvoke(value, path, args);
      });
    });

    LazyWrapper.prototype.reject = function(predicate) {
      return this.filter(negate(getIteratee(predicate)));
    };

    LazyWrapper.prototype.slice = function(start, end) {
      start = toInteger(start);

      var result = this;
      if (result.__filtered__ && (start > 0 || end < 0)) {
        return new LazyWrapper(result);
      }
      if (start < 0) {
        result = result.takeRight(-start);
      } else if (start) {
        result = result.drop(start);
      }
      if (end !== undefined) {
        end = toInteger(end);
        result = end < 0 ? result.dropRight(-end) : result.take(end - start);
      }
      return result;
    };

    LazyWrapper.prototype.takeRightWhile = function(predicate) {
      return this.reverse().takeWhile(predicate).reverse();
    };

    LazyWrapper.prototype.toArray = function() {
      return this.take(MAX_ARRAY_LENGTH);
    };

    // Add `LazyWrapper` methods to `lodash.prototype`.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var checkIteratee = /^(?:filter|find|map|reject)|While$/.test(methodName),
          isTaker = /^(?:head|last)$/.test(methodName),
          lodashFunc = lodash[isTaker ? ('take' + (methodName == 'last' ? 'Right' : '')) : methodName],
          retUnwrapped = isTaker || /^find/.test(methodName);

      if (!lodashFunc) {
        return;
      }
      lodash.prototype[methodName] = function() {
        var value = this.__wrapped__,
            args = isTaker ? [1] : arguments,
            isLazy = value instanceof LazyWrapper,
            iteratee = args[0],
            useLazy = isLazy || isArray(value);

        var interceptor = function(value) {
          var result = lodashFunc.apply(lodash, arrayPush([value], args));
          return (isTaker && chainAll) ? result[0] : result;
        };

        if (useLazy && checkIteratee && typeof iteratee == 'function' && iteratee.length != 1) {
          // Avoid lazy use if the iteratee has a "length" value other than `1`.
          isLazy = useLazy = false;
        }
        var chainAll = this.__chain__,
            isHybrid = !!this.__actions__.length,
            isUnwrapped = retUnwrapped && !chainAll,
            onlyLazy = isLazy && !isHybrid;

        if (!retUnwrapped && useLazy) {
          value = onlyLazy ? value : new LazyWrapper(this);
          var result = func.apply(value, args);
          result.__actions__.push({ 'func': thru, 'args': [interceptor], 'thisArg': undefined });
          return new LodashWrapper(result, chainAll);
        }
        if (isUnwrapped && onlyLazy) {
          return func.apply(this, args);
        }
        result = this.thru(interceptor);
        return isUnwrapped ? (isTaker ? result.value()[0] : result.value()) : result;
      };
    });

    // Add `Array` methods to `lodash.prototype`.
    arrayEach(['pop', 'push', 'shift', 'sort', 'splice', 'unshift'], function(methodName) {
      var func = arrayProto[methodName],
          chainName = /^(?:push|sort|unshift)$/.test(methodName) ? 'tap' : 'thru',
          retUnwrapped = /^(?:pop|shift)$/.test(methodName);

      lodash.prototype[methodName] = function() {
        var args = arguments;
        if (retUnwrapped && !this.__chain__) {
          var value = this.value();
          return func.apply(isArray(value) ? value : [], args);
        }
        return this[chainName](function(value) {
          return func.apply(isArray(value) ? value : [], args);
        });
      };
    });

    // Map minified method names to their real names.
    baseForOwn(LazyWrapper.prototype, function(func, methodName) {
      var lodashFunc = lodash[methodName];
      if (lodashFunc) {
        var key = lodashFunc.name + '';
        if (!hasOwnProperty.call(realNames, key)) {
          realNames[key] = [];
        }
        realNames[key].push({ 'name': methodName, 'func': lodashFunc });
      }
    });

    realNames[createHybrid(undefined, WRAP_BIND_KEY_FLAG).name] = [{
      'name': 'wrapper',
      'func': undefined
    }];

    // Add methods to `LazyWrapper`.
    LazyWrapper.prototype.clone = lazyClone;
    LazyWrapper.prototype.reverse = lazyReverse;
    LazyWrapper.prototype.value = lazyValue;

    // Add chain sequence methods to the `lodash` wrapper.
    lodash.prototype.at = wrapperAt;
    lodash.prototype.chain = wrapperChain;
    lodash.prototype.commit = wrapperCommit;
    lodash.prototype.next = wrapperNext;
    lodash.prototype.plant = wrapperPlant;
    lodash.prototype.reverse = wrapperReverse;
    lodash.prototype.toJSON = lodash.prototype.valueOf = lodash.prototype.value = wrapperValue;

    // Add lazy aliases.
    lodash.prototype.first = lodash.prototype.head;

    if (symIterator) {
      lodash.prototype[symIterator] = wrapperToIterator;
    }
    return lodash;
  });

  /*--------------------------------------------------------------------------*/

  // Export lodash.
  var _ = runInContext();

  // Some AMD build optimizers, like r.js, check for condition patterns like:
  if (true) {
    // Expose Lodash on the global object to prevent errors when Lodash is
    // loaded by a script tag in the presence of an AMD loader.
    // See http://requirejs.org/docs/errors.html#mismatch for more details.
    // Use `_.noConflict` to remove Lodash from the global object.
    root._ = _;

    // Define as an anonymous module so, through path mapping, it can be
    // referenced as the "underscore" module.
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function() {
      return _;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  }
  // Check for `exports` after `define` in case a build optimizer adds it.
  else {}
}.call(this));

/* WEBPACK VAR INJECTION */}.call(this, __webpack_require__(/*! ./../webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js"), __webpack_require__(/*! ./../webpack/buildin/module.js */ "./node_modules/webpack/buildin/module.js")(module)))

/***/ }),

/***/ "./node_modules/process/browser.js":
/*!*****************************************!*\
  !*** ./node_modules/process/browser.js ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),

/***/ "./node_modules/typestyle/lib.es2015/index.js":
/*!****************************************************!*\
  !*** ./node_modules/typestyle/lib.es2015/index.js ***!
  \****************************************************/
/*! exports provided: TypeStyle, types, extend, classes, media, setStylesTarget, cssRaw, cssRule, forceRenderStyles, fontFace, getStyles, keyframes, reinit, style, stylesheet, createTypeStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "setStylesTarget", function() { return setStylesTarget; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cssRaw", function() { return cssRaw; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "cssRule", function() { return cssRule; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "forceRenderStyles", function() { return forceRenderStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "fontFace", function() { return fontFace; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "getStyles", function() { return getStyles; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "keyframes", function() { return keyframes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "reinit", function() { return reinit; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "style", function() { return style; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "stylesheet", function() { return stylesheet; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createTypeStyle", function() { return createTypeStyle; });
/* harmony import */ var _internal_typestyle__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./internal/typestyle */ "./node_modules/typestyle/lib.es2015/internal/typestyle.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "TypeStyle", function() { return _internal_typestyle__WEBPACK_IMPORTED_MODULE_0__["TypeStyle"]; });

/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./types */ "./node_modules/typestyle/lib.es2015/types.js");
/* harmony import */ var _types__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_types__WEBPACK_IMPORTED_MODULE_1__);
/* harmony reexport (module object) */ __webpack_require__.d(__webpack_exports__, "types", function() { return _types__WEBPACK_IMPORTED_MODULE_1__; });
/* harmony import */ var _internal_utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./internal/utilities */ "./node_modules/typestyle/lib.es2015/internal/utilities.js");
/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return _internal_utilities__WEBPACK_IMPORTED_MODULE_2__["extend"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "classes", function() { return _internal_utilities__WEBPACK_IMPORTED_MODULE_2__["classes"]; });

/* harmony reexport (safe) */ __webpack_require__.d(__webpack_exports__, "media", function() { return _internal_utilities__WEBPACK_IMPORTED_MODULE_2__["media"]; });



/**
 * All the CSS types in the 'types' namespace
 */


/**
 * Export certain utilities
 */

/** Zero configuration, default instance of TypeStyle */
var ts = new _internal_typestyle__WEBPACK_IMPORTED_MODULE_0__["TypeStyle"]({ autoGenerateTag: true });
/** Sets the target tag where we write the css on style updates */
var setStylesTarget = ts.setStylesTarget;
/**
 * Insert `raw` CSS as a string. This is useful for e.g.
 * - third party CSS that you are customizing with template strings
 * - generating raw CSS in JavaScript
 * - reset libraries like normalize.css that you can use without loaders
 */
var cssRaw = ts.cssRaw;
/**
 * Takes CSSProperties and registers it to a global selector (body, html, etc.)
 */
var cssRule = ts.cssRule;
/**
 * Renders styles to the singleton tag imediately
 * NOTE: You should only call it on initial render to prevent any non CSS flash.
 * After that it is kept sync using `requestAnimationFrame` and we haven't noticed any bad flashes.
 **/
var forceRenderStyles = ts.forceRenderStyles;
/**
 * Utility function to register an @font-face
 */
var fontFace = ts.fontFace;
/**
 * Allows use to use the stylesheet in a node.js environment
 */
var getStyles = ts.getStyles;
/**
 * Takes keyframes and returns a generated animationName
 */
var keyframes = ts.keyframes;
/**
 * Helps with testing. Reinitializes FreeStyle + raw
 */
var reinit = ts.reinit;
/**
 * Takes CSSProperties and return a generated className you can use on your component
 */
var style = ts.style;
/**
 * Takes an object where property names are ideal class names and property values are CSSProperties, and
 * returns an object where property names are the same ideal class names and the property values are
 * the actual generated class names using the ideal class name as the $debugName
 */
var stylesheet = ts.stylesheet;
/**
 * Creates a new instance of TypeStyle separate from the default instance.
 *
 * - Use this for creating a different typestyle instance for a shadow dom component.
 * - Use this if you don't want an auto tag generated and you just want to collect the CSS.
 *
 * NOTE: styles aren't shared between different instances.
 */
function createTypeStyle(target) {
    var instance = new _internal_typestyle__WEBPACK_IMPORTED_MODULE_0__["TypeStyle"]({ autoGenerateTag: false });
    if (target) {
        instance.setStylesTarget(target);
    }
    return instance;
}


/***/ }),

/***/ "./node_modules/typestyle/lib.es2015/internal/formatting.js":
/*!******************************************************************!*\
  !*** ./node_modules/typestyle/lib.es2015/internal/formatting.js ***!
  \******************************************************************/
/*! exports provided: ensureStringObj, explodeKeyframes */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ensureStringObj", function() { return ensureStringObj; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "explodeKeyframes", function() { return explodeKeyframes; });
/* harmony import */ var free_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! free-style */ "./node_modules/free-style/dist/free-style.js");
/* harmony import */ var free_style__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(free_style__WEBPACK_IMPORTED_MODULE_0__);

/**
 * We need to do the following to *our* objects before passing to freestyle:
 * - For any `$nest` directive move up to FreeStyle style nesting
 * - For any `$unique` directive map to FreeStyle Unique
 * - For any `$debugName` directive return the debug name
 */
function ensureStringObj(object) {
    /** The final result we will return */
    var result = {};
    var debugName = '';
    for (var key in object) {
        /** Grab the value upfront */
        var val = object[key];
        /** TypeStyle configuration options */
        if (key === '$unique') {
            result[free_style__WEBPACK_IMPORTED_MODULE_0__["IS_UNIQUE"]] = val;
        }
        else if (key === '$nest') {
            var nested = val;
            for (var selector in nested) {
                var subproperties = nested[selector];
                result[selector] = ensureStringObj(subproperties).result;
            }
        }
        else if (key === '$debugName') {
            debugName = val;
        }
        else {
            result[key] = val;
        }
    }
    return { result: result, debugName: debugName };
}
// todo: better name here
function explodeKeyframes(frames) {
    var result = { $debugName: undefined, keyframes: {} };
    for (var offset in frames) {
        var val = frames[offset];
        if (offset === '$debugName') {
            result.$debugName = val;
        }
        else {
            result.keyframes[offset] = val;
        }
    }
    return result;
}


/***/ }),

/***/ "./node_modules/typestyle/lib.es2015/internal/typestyle.js":
/*!*****************************************************************!*\
  !*** ./node_modules/typestyle/lib.es2015/internal/typestyle.js ***!
  \*****************************************************************/
/*! exports provided: TypeStyle */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "TypeStyle", function() { return TypeStyle; });
/* harmony import */ var free_style__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! free-style */ "./node_modules/free-style/dist/free-style.js");
/* harmony import */ var free_style__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(free_style__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _formatting__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./formatting */ "./node_modules/typestyle/lib.es2015/internal/formatting.js");
/* harmony import */ var _utilities__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utilities */ "./node_modules/typestyle/lib.es2015/internal/utilities.js");



/**
 * Creates an instance of free style with our options
 */
var createFreeStyle = function () { return free_style__WEBPACK_IMPORTED_MODULE_0__["create"](
/** Use the default hash function */
undefined, 
/** Preserve $debugName values */
true); };
/**
 * Maintains a single stylesheet and keeps it in sync with requested styles
 */
var TypeStyle = /** @class */ (function () {
    function TypeStyle(_a) {
        var autoGenerateTag = _a.autoGenerateTag;
        var _this = this;
        /**
         * Insert `raw` CSS as a string. This is useful for e.g.
         * - third party CSS that you are customizing with template strings
         * - generating raw CSS in JavaScript
         * - reset libraries like normalize.css that you can use without loaders
         */
        this.cssRaw = function (mustBeValidCSS) {
            if (!mustBeValidCSS) {
                return;
            }
            _this._raw += mustBeValidCSS || '';
            _this._pendingRawChange = true;
            _this._styleUpdated();
        };
        /**
         * Takes CSSProperties and registers it to a global selector (body, html, etc.)
         */
        this.cssRule = function (selector) {
            var objects = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                objects[_i - 1] = arguments[_i];
            }
            var object = Object(_formatting__WEBPACK_IMPORTED_MODULE_1__["ensureStringObj"])(_utilities__WEBPACK_IMPORTED_MODULE_2__["extend"].apply(void 0, objects)).result;
            _this._freeStyle.registerRule(selector, object);
            _this._styleUpdated();
            return;
        };
        /**
         * Renders styles to the singleton tag imediately
         * NOTE: You should only call it on initial render to prevent any non CSS flash.
         * After that it is kept sync using `requestAnimationFrame` and we haven't noticed any bad flashes.
         **/
        this.forceRenderStyles = function () {
            var target = _this._getTag();
            if (!target) {
                return;
            }
            target.textContent = _this.getStyles();
        };
        /**
         * Utility function to register an @font-face
         */
        this.fontFace = function () {
            var fontFace = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                fontFace[_i] = arguments[_i];
            }
            var freeStyle = _this._freeStyle;
            for (var _a = 0, _b = fontFace; _a < _b.length; _a++) {
                var face = _b[_a];
                freeStyle.registerRule('@font-face', face);
            }
            _this._styleUpdated();
            return;
        };
        /**
         * Allows use to use the stylesheet in a node.js environment
         */
        this.getStyles = function () {
            return (_this._raw || '') + _this._freeStyle.getStyles();
        };
        /**
         * Takes keyframes and returns a generated animationName
         */
        this.keyframes = function (frames) {
            var _a = Object(_formatting__WEBPACK_IMPORTED_MODULE_1__["explodeKeyframes"])(frames), keyframes = _a.keyframes, $debugName = _a.$debugName;
            // TODO: replace $debugName with display name
            var animationName = _this._freeStyle.registerKeyframes(keyframes, $debugName);
            _this._styleUpdated();
            return animationName;
        };
        /**
         * Helps with testing. Reinitializes FreeStyle + raw
         */
        this.reinit = function () {
            /** reinit freestyle */
            var freeStyle = createFreeStyle();
            _this._freeStyle = freeStyle;
            _this._lastFreeStyleChangeId = freeStyle.changeId;
            /** reinit raw */
            _this._raw = '';
            _this._pendingRawChange = false;
            /** Clear any styles that were flushed */
            var target = _this._getTag();
            if (target) {
                target.textContent = '';
            }
        };
        /** Sets the target tag where we write the css on style updates */
        this.setStylesTarget = function (tag) {
            /** Clear any data in any previous tag */
            if (_this._tag) {
                _this._tag.textContent = '';
            }
            _this._tag = tag;
            /** This special time buffer immediately */
            _this.forceRenderStyles();
        };
        /**
         * Takes an object where property names are ideal class names and property values are CSSProperties, and
         * returns an object where property names are the same ideal class names and the property values are
         * the actual generated class names using the ideal class name as the $debugName
         */
        this.stylesheet = function (classes) {
            var classNames = Object.getOwnPropertyNames(classes);
            var result = {};
            for (var _i = 0, classNames_1 = classNames; _i < classNames_1.length; _i++) {
                var className = classNames_1[_i];
                var classDef = classes[className];
                if (classDef) {
                    classDef.$debugName = className;
                    result[className] = _this.style(classDef);
                }
            }
            return result;
        };
        var freeStyle = createFreeStyle();
        this._autoGenerateTag = autoGenerateTag;
        this._freeStyle = freeStyle;
        this._lastFreeStyleChangeId = freeStyle.changeId;
        this._pending = 0;
        this._pendingRawChange = false;
        this._raw = '';
        this._tag = undefined;
        // rebind prototype to TypeStyle.  It might be better to do a function() { return this.style.apply(this, arguments)}
        this.style = this.style.bind(this);
    }
    /**
     * Only calls cb all sync operations settle
     */
    TypeStyle.prototype._afterAllSync = function (cb) {
        var _this = this;
        this._pending++;
        var pending = this._pending;
        Object(_utilities__WEBPACK_IMPORTED_MODULE_2__["raf"])(function () {
            if (pending !== _this._pending) {
                return;
            }
            cb();
        });
    };
    TypeStyle.prototype._getTag = function () {
        if (this._tag) {
            return this._tag;
        }
        if (this._autoGenerateTag) {
            var tag = typeof window === 'undefined'
                ? { textContent: '' }
                : document.createElement('style');
            if (typeof document !== 'undefined') {
                document.head.appendChild(tag);
            }
            this._tag = tag;
            return tag;
        }
        return undefined;
    };
    /** Checks if the style tag needs updating and if so queues up the change */
    TypeStyle.prototype._styleUpdated = function () {
        var _this = this;
        var changeId = this._freeStyle.changeId;
        var lastChangeId = this._lastFreeStyleChangeId;
        if (!this._pendingRawChange && changeId === lastChangeId) {
            return;
        }
        this._lastFreeStyleChangeId = changeId;
        this._pendingRawChange = false;
        this._afterAllSync(function () { return _this.forceRenderStyles(); });
    };
    TypeStyle.prototype.style = function () {
        var freeStyle = this._freeStyle;
        var _a = Object(_formatting__WEBPACK_IMPORTED_MODULE_1__["ensureStringObj"])(_utilities__WEBPACK_IMPORTED_MODULE_2__["extend"].apply(undefined, arguments)), result = _a.result, debugName = _a.debugName;
        var className = debugName ? freeStyle.registerStyle(result, debugName) : freeStyle.registerStyle(result);
        this._styleUpdated();
        return className;
    };
    return TypeStyle;
}());



/***/ }),

/***/ "./node_modules/typestyle/lib.es2015/internal/utilities.js":
/*!*****************************************************************!*\
  !*** ./node_modules/typestyle/lib.es2015/internal/utilities.js ***!
  \*****************************************************************/
/*! exports provided: raf, classes, extend, media */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "raf", function() { return raf; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "classes", function() { return classes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "extend", function() { return extend; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "media", function() { return media; });
/** Raf for node + browser */
var raf = typeof requestAnimationFrame === 'undefined'
    /**
     * Make sure setTimeout is always invoked with
     * `this` set to `window` or `global` automatically
     **/
    ? function (cb) { return setTimeout(cb); }
    /**
     * Make sure window.requestAnimationFrame is always invoked with `this` window
     * We might have raf without window in case of `raf/polyfill` (recommended by React)
     **/
    : typeof window === 'undefined'
        ? requestAnimationFrame
        : requestAnimationFrame.bind(window);
/**
 * Utility to join classes conditionally
 */
function classes() {
    var classes = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        classes[_i] = arguments[_i];
    }
    return classes
        .map(function (c) { return c && typeof c === 'object' ? Object.keys(c).map(function (key) { return !!c[key] && key; }) : [c]; })
        .reduce(function (flattened, c) { return flattened.concat(c); }, [])
        .filter(function (c) { return !!c; })
        .join(' ');
}
/**
 * Merges various styles into a single style object.
 * Note: if two objects have the same property the last one wins
 */
function extend() {
    var objects = [];
    for (var _i = 0; _i < arguments.length; _i++) {
        objects[_i] = arguments[_i];
    }
    /** The final result we will return */
    var result = {};
    for (var _a = 0, objects_1 = objects; _a < objects_1.length; _a++) {
        var object = objects_1[_a];
        if (object == null || object === false) {
            continue;
        }
        for (var key in object) {
            /** Falsy values except a explicit 0 is ignored */
            var val = object[key];
            if (!val && val !== 0) {
                continue;
            }
            /** if nested media or pseudo selector */
            if (key === '$nest' && val) {
                result[key] = result['$nest'] ? extend(result['$nest'], val) : val;
            }
            else if ((key.indexOf('&') !== -1 || key.indexOf('@media') === 0)) {
                result[key] = result[key] ? extend(result[key], val) : val;
            }
            else {
                result[key] = val;
            }
        }
    }
    return result;
}
/**
 * Utility to help customize styles with media queries. e.g.
 * ```
 * style(
 *  media({maxWidth:500}, {color:'red'})
 * )
 * ```
 */
var media = function (mediaQuery) {
    var objects = [];
    for (var _i = 1; _i < arguments.length; _i++) {
        objects[_i - 1] = arguments[_i];
    }
    var mediaQuerySections = [];
    if (mediaQuery.type)
        mediaQuerySections.push(mediaQuery.type);
    if (mediaQuery.orientation)
        mediaQuerySections.push("(orientation: " + mediaQuery.orientation + ")");
    if (mediaQuery.minWidth)
        mediaQuerySections.push("(min-width: " + mediaLength(mediaQuery.minWidth) + ")");
    if (mediaQuery.maxWidth)
        mediaQuerySections.push("(max-width: " + mediaLength(mediaQuery.maxWidth) + ")");
    if (mediaQuery.minHeight)
        mediaQuerySections.push("(min-height: " + mediaLength(mediaQuery.minHeight) + ")");
    if (mediaQuery.maxHeight)
        mediaQuerySections.push("(max-height: " + mediaLength(mediaQuery.maxHeight) + ")");
    var stringMediaQuery = "@media " + mediaQuerySections.join(' and ');
    var object = {
        $nest: (_a = {},
            _a[stringMediaQuery] = extend.apply(void 0, objects),
            _a)
    };
    return object;
    var _a;
};
var mediaLength = function (value) {
    return typeof value === 'string' ? value : value + "px";
};


/***/ }),

/***/ "./node_modules/typestyle/lib.es2015/types.js":
/*!****************************************************!*\
  !*** ./node_modules/typestyle/lib.es2015/types.js ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports) {



/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || new Function("return this")();
} catch (e) {
	// This works if the window reference is available
	if (typeof window === "object") g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ "./node_modules/webpack/buildin/module.js":
/*!***********************************!*\
  !*** (webpack)/buildin/module.js ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports) {

module.exports = function(module) {
	if (!module.webpackPolyfill) {
		module.deprecate = function() {};
		module.paths = [];
		// module.parent = undefined by default
		if (!module.children) module.children = [];
		Object.defineProperty(module, "loaded", {
			enumerable: true,
			get: function() {
				return module.l;
			}
		});
		Object.defineProperty(module, "id", {
			enumerable: true,
			get: function() {
				return module.i;
			}
		});
		module.webpackPolyfill = 1;
	}
	return module;
};


/***/ }),

/***/ "./src/typescript/UI/animation.ts":
/*!****************************************!*\
  !*** ./src/typescript/UI/animation.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const history_1 = __webpack_require__(/*! history */ "./src/typescript/history.ts");
const stages_1 = __webpack_require__(/*! lib/stages */ "./src/typescript/lib/stages.ts");
const utils_1 = __webpack_require__(/*! lib/utils */ "./src/typescript/lib/utils.ts");
const story_1 = __webpack_require__(/*! story */ "./src/typescript/story/index.ts");
const styles_1 = __webpack_require__(/*! ./styles */ "./src/typescript/UI/styles.ts");
exports.empty_animation_state = {
    update_plan: stages_1.stages(),
    current_stage: undefined,
    current_story: undefined,
    lock_input: false
};
function new_animation_state(world, previous_world) {
    // produce a new AnimationState object according to the changes, with stage set to the lowest included stage
    const index_threshold = previous_world ? previous_world.index : -1; //world.index - 1;
    const new_frames = history_1.history_array(world).filter(w => w.index > index_threshold).reverse();
    const story_updates = stages_1.make_consecutive(new_frames.map(w => story_1.compile_story_update_group_ops(w.story_updates).effects));
    let stages = stages_1.stage_keys(story_updates);
    let current_stage = stages[0];
    return {
        update_plan: story_updates,
        current_stage,
        current_story: new_frames[0].story,
        lock_input: stages.length > 0
    };
}
exports.new_animation_state = new_animation_state;
function advance_animation(state, next_story) {
    let stages = stages_1.stage_keys(state.update_plan);
    let next_stage = stages[stages.indexOf(state.current_stage) + 1];
    return utils_1.update(state, {
        current_stage: next_stage,
        current_story: next_story,
        lock_input: next_stage !== undefined
    });
}
exports.advance_animation = advance_animation;
function final_story(world) {
    return story_1.apply_story_updates_all(world.story, world.story_updates);
}
exports.final_story = final_story;
function compute_possible_effects(world, possible_world) {
    const p_worlds = history_1.history_array(possible_world).filter(w => w.index >= world.index);
    return p_worlds.reverse().flatMap(p => story_1.compile_story_update_group_ops(p.story_updates).would_effects);
}
exports.compute_possible_effects = compute_possible_effects;
// export function compute_possible_effects(world: World, possible_world: World): ReversibleUpdateSpec[] {
//     const p_worlds = history_array(possible_world).filter(w => w.index > world.index);
//     const result: StoryUpdateSpec[] = [];
//     for (const p_world of p_worlds) {
//         for (const w_ef of p_world.story_updates.would_effects) {
//             const matches = compile_story_query(w_ef.query)(p_world.story);
//             for (const [m, p] of matches) {
//                 if (!is_story_node(m)) {
//                     continue;
//                 }
//                 if (find_node(world.story, (n => is_story_node(n) && n.key === m.key)) !== null) {
//                     result.push(story_update(
//                         story_query('key', m.key),
//                         w_ef.op
//                     ))
//                 }
//             }
//         }
//     }
//     return result;
// }
function animate(comp_elt) {
    return new Promise((resolve) => {
        // Momentarily apply the animation-pre-compute class
        // to accurately measure the target maxHeight
        // and check for the custom --is-collapsing property
        // (This is basically an abomination and I am sorry.)
        // comp_elt.classList.add('animation-pre-compute');
        comp_elt.classList.add(styles_1.animation_pre_compute);
        walkElt(comp_elt, (e) => e.dataset.maxHeight = `${e.scrollHeight}px`);
        comp_elt.dataset.isCollapsing = parseInt(getComputedStyle(comp_elt).getPropertyValue('--is-collapsing')) || 0;
        // comp_elt.classList.remove('animation-pre-compute');
        // comp_elt.classList.add('animation-start');
        comp_elt.classList.remove(styles_1.animation_pre_compute);
        comp_elt.classList.add(styles_1.animation_start);
        // If --is-collapsing was set by the animation-pre-compute class,
        // then apply the maxHeight update at the end of this animation frame
        // rather than the beginning of the next one.
        // I have no idea why this works/is necessary, but it does/is.
        if (comp_elt.dataset.isCollapsing == 1) {
            walkElt(comp_elt, (e) => e.style.maxHeight = e.dataset.maxHeight);
        }
        requestAnimationFrame(() => {
            // If --is-collapsing wasn't set in the animation-pre-compute class,
            // then apply the maxHeight update now.
            // Websites technology keyboard mouse.
            if (comp_elt.dataset.isCollapsing != 1) {
                walkElt(comp_elt, (e) => e.style.maxHeight = e.dataset.maxHeight);
            }
            // comp_elt.classList.add('animation-active');
            comp_elt.classList.add(styles_1.animation_active);
            setTimeout(() => {
                // comp_elt.classList.remove(
                //     'animation-start',
                //     'animation-active');
                comp_elt.classList.remove(styles_1.animation_start, styles_1.animation_active);
                walkElt(comp_elt, (e) => {
                    e.style.maxHeight = '';
                    delete e.dataset.maxHeight;
                    delete e.dataset.isCollapsing;
                });
                let anything_new = false;
                walkElt(comp_elt, e => {
                    // if (e.classList.contains('eph-new')) {
                    if (e.classList.contains(styles_1.eph_new)) {
                        anything_new = true;
                    }
                });
                if (anything_new) {
                    scroll_down();
                }
                resolve();
            }, 700);
        });
    });
}
exports.animate = animate;
function walkElt(elt, f) {
    let children = elt.children;
    for (let i = 0; i < children.length; i++) {
        let child = children.item(i);
        walkElt(child, f);
    }
    f(elt);
}
function scroll_down() {
    let bottom = document.querySelector('.typeahead .footer');
    bottom.scrollIntoView({ behavior: "smooth", block: "end", inline: "end" });
}
exports.scroll_down = scroll_down;


/***/ }),

/***/ "./src/typescript/UI/app_state.ts":
/*!****************************************!*\
  !*** ./src/typescript/UI/app_state.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = __webpack_require__(/*! ../lib/utils */ "./src/typescript/lib/utils.ts");
const animation_1 = __webpack_require__(/*! ./animation */ "./src/typescript/UI/animation.ts");
const parser_1 = __webpack_require__(/*! ../parser */ "./src/typescript/parser/index.ts");
function initialize_app_state(initialize_world) {
    const { initial_result, update } = initialize_world();
    return {
        typeahead_index: 0,
        undo_selected: false,
        command_result: initial_result,
        updater: update,
        animation_state: animation_1.new_animation_state(initial_result.world, undefined)
    };
}
exports.initialize_app_state = initialize_app_state;
function app_reducer(state, action) {
    const result = app_reducer_(state, action);
    return result;
}
exports.app_reducer = app_reducer;
// "reducer" function which returns updated state according to the
// "kind" of the action passed to it
function app_reducer_(state, action) {
    if (state.animation_state.lock_input && action.kind !== 'AdvanceAnimation') {
        return state;
    }
    switch (action.kind) {
        case 'AdvanceAnimation':
            return utils_1.update(state, { animation_state: _ => animation_1.advance_animation(_, action.next_story) });
        case 'ChangeText': {
            let new_result = state.updater(state.command_result.world, {
                kind: 'RawInput',
                text: action.text,
                submit: false
            });
            return utils_1.update(state, {
                command_result: () => new_result,
                typeahead_index: new_result.parsing.view.typeahead_grid.length > 0 ? 0 : -1
            });
        }
        case 'SelectTypeahead':
            return utils_1.update(state, {
                typeahead_index: () => action.index,
                undo_selected: false
            });
        case 'SelectRelativeTypeahead':
            return select_relative_typeahead(state, action.direction);
        case 'SelectUndo':
            return utils_1.update(state, { undo_selected: true });
        case 'ToggleUndoSelected': {
            // Question here of whether this elimination logic should actually be in the view
            if (state.command_result.world.previous === undefined) {
                return state;
            }
            return utils_1.update(state, { undo_selected: _ => !_ });
        }
        case 'Submit': {
            if (state.undo_selected) {
                return undo(state);
            }
            else {
                let result;
                if (state.typeahead_index !== -1) {
                    result = submit_typeahead(state);
                }
                else {
                    result = utils_1.update(state, {
                        command_result: () => state.updater(state.command_result.world, utils_1.update(state.command_result.parsing.raw, {
                            submit: state.command_result.parsing.view.submittable
                        })),
                        typeahead_index: -1,
                        undo_selected: false
                    });
                }
                return update_animation_state(result, state);
            }
        }
    }
    debugger;
    throw new Error('should no get here');
}
exports.app_reducer_ = app_reducer_;
function update_animation_state(new_state, old_state) {
    if (new_state.command_result.world.index > old_state.command_result.world.index) {
        return utils_1.update(new_state, {
            animation_state: _ => animation_1.new_animation_state(new_state.command_result.world, old_state.command_result.world)
        });
    }
    return new_state;
}
function undo(state) {
    // find the beginning of the current (possibly-compound) world
    let w = state.command_result.world;
    let prev_command_result = state.updater(w.previous, utils_1.update(w.parsing.raw, { submit: false })
    // state.command_result.world.previous!,
    // update(state.command_result.world.parsing!.raw, { submit: false })
    );
    return utils_1.update(state, {
        command_result: () => prev_command_result,
        typeahead_index: 0,
        undo_selected: false,
        animation_state: _ => animation_1.empty_animation_state
    });
}
function select_relative_typeahead(state, direction) {
    if (state.undo_selected) {
        return state;
    }
    let n_options = state.command_result.parsing.view.typeahead_grid.length;
    let new_index;
    if (direction === 'up') {
        new_index = state.typeahead_index - 1;
        if (new_index < 0) {
            new_index = n_options - 1;
        }
    }
    else if (direction === 'down') {
        new_index = state.typeahead_index + 1;
        if (new_index >= n_options) {
            new_index = n_options === 0 ? -1 : 0;
        }
    }
    return utils_1.update(state, { typeahead_index: new_index });
}
function submit_typeahead(state) {
    let parsing = state.command_result.parsing;
    let row = parsing.view.typeahead_grid[state.typeahead_index];
    let synthesized_tokens = [...parsing.tokens];
    row.option.forEach((m, i) => {
        if (m !== undefined) {
            synthesized_tokens[i] = m.expected.token;
        }
    });
    let synthesized_text = '';
    for (let i = 0; i < synthesized_tokens.length; i++) {
        let t = synthesized_tokens[i];
        if (t === parser_1.SUBMIT) {
            break;
        }
        else {
            if (i === 0) {
                synthesized_text += parsing.whitespace[i];
            }
            else {
                synthesized_text += parsing.whitespace[i] || ' ';
            }
            synthesized_text += t;
        }
    }
    let synthesized_command = {
        kind: 'RawInput',
        submit: utils_1.array_last(synthesized_tokens) === parser_1.SUBMIT,
        text: synthesized_text
    };
    let new_result = state.updater(state.command_result.world, synthesized_command);
    return utils_1.update(state, {
        command_result: () => new_result,
        typeahead_index: new_result.parsing.view.typeahead_grid.length > 0 ? 0 : -1
    });
}


/***/ }),

/***/ "./src/typescript/UI/components/app.tsx":
/*!**********************************************!*\
  !*** ./src/typescript/UI/components/app.tsx ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const keyboard_utils_1 = __webpack_require__(/*! ../../lib/keyboard_utils */ "./src/typescript/lib/keyboard_utils.ts");
const app_state_1 = __webpack_require__(/*! ../app_state */ "./src/typescript/UI/app_state.ts");
const animation_1 = __webpack_require__(/*! ../animation */ "./src/typescript/UI/animation.ts");
const framework_1 = __webpack_require__(/*! ../framework */ "./src/typescript/UI/framework/index.ts");
const prelude_1 = __webpack_require__(/*! ../prelude */ "./src/typescript/UI/prelude.ts");
const undo_button_1 = __webpack_require__(/*! ./undo_button */ "./src/typescript/UI/components/undo_button.tsx");
const input_prompt_1 = __webpack_require__(/*! ./input_prompt */ "./src/typescript/UI/components/input_prompt.tsx");
const typeahead_1 = __webpack_require__(/*! ./typeahead */ "./src/typescript/UI/components/typeahead.tsx");
const history_1 = __webpack_require__(/*! ./history */ "./src/typescript/UI/components/history.tsx");
const static_resources_1 = __webpack_require__(/*! lib/static_resources */ "./src/typescript/lib/static_resources.ts");
exports.ui = framework_1.make_ui((state, old) => exports.App(state, old), app_state_1.app_reducer, true);
exports.initialize_app = exports.ui.initialize;
prelude_1.ui_resources.initialize('initialize', exports.ui.initialize);
prelude_1.ui_resources.initialize('dispatch', exports.ui.dispatch);
prelude_1.ui_resources.initialize('effect', exports.ui.effect);
prelude_1.ui_resources.initialize('effect_promise', exports.ui.effect_promise);
prelude_1.ui_resources[static_resources_1.Seal]();
const dispatch = exports.ui.dispatch;
const app_child = framework_1.child_declarator_for();
const app_history = app_child(root => root.querySelector('.story'), (props) => ({
    world: props.command_result.world,
    possible_world: props.command_result.possible_world,
    animation_state: props.animation_state,
    undo_selected: props.undo_selected
}), history_1.History);
const app_prompt = app_child(root => root.querySelector('#story-hole .input-prompt'), (props) => ({
    parsing: props.command_result.parsing,
    locked: props.animation_state.lock_input
}), input_prompt_1.InputPrompt);
const app_typeahead = app_child(root => root.querySelector('#story-hole .typeahead'), (props) => ({
    parsing: props.command_result.parsing,
    typeahead_index: props.typeahead_index,
    undo_selected: props.undo_selected
}), typeahead_1.Typeahead);
const app_undo_button = app_child((root) => root.querySelector('#story-hole .undo-button'), (props) => ({
    world: props.command_result.world,
    undo_selected: props.undo_selected
}), undo_button_1.UndoButton);
exports.App = (state, old) => {
    if (old === undefined) {
        function handleKeyDown(event) {
            let input_elt = document.querySelector('input');
            if (!event.ctrlKey && !event.metaKey) {
                input_elt.focus();
            }
            if (event.keyCode === keyboard_utils_1.keys.left || event.keyCode === keyboard_utils_1.keys.right) {
                dispatch({ kind: 'ToggleUndoSelected' });
            }
            if (event.keyCode === keyboard_utils_1.keys.up) {
                dispatch({ kind: 'SelectRelativeTypeahead', direction: 'up' });
            }
            else if (event.keyCode === keyboard_utils_1.keys.down) {
                dispatch({ kind: 'SelectRelativeTypeahead', direction: 'down' });
            }
            if (event.keyCode === keyboard_utils_1.keys.enter) {
                // either enter a typeahead entry or the current text
                dispatch({ kind: 'Submit' });
            }
            function forceCursor() {
                input_elt.setSelectionRange(input_elt.value.length, input_elt.value.length);
            }
            forceCursor();
        }
        exports.ui.effect(() => {
            document.addEventListener('keydown', handleKeyDown);
            animation_1.scroll_down();
        });
        const root = framework_1.createElement("div", { className: "app" },
            framework_1.createElement(app_history.render, Object.assign({}, state)));
        const hole = root.querySelector('#story-hole');
        if (hole === null) {
            throw new Error('History element did not create its story hole');
        }
        hole.appendChild(framework_1.createElement(app_prompt.render, Object.assign({}, state)));
        hole.appendChild(framework_1.createElement(app_typeahead.render, Object.assign({}, state)));
        hole.appendChild(framework_1.createElement(app_undo_button.render, Object.assign({}, state)));
        return root;
    }
    app_history.render(state, old);
    app_prompt.render(state, old);
    app_typeahead.render(state, old);
    app_undo_button.render(state, old);
    return old.old_root;
};


/***/ }),

/***/ "./src/typescript/UI/components/history.tsx":
/*!**************************************************!*\
  !*** ./src/typescript/UI/components/history.tsx ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const history_1 = __webpack_require__(/*! ../../history */ "./src/typescript/history.ts");
const effect_utils_1 = __webpack_require__(/*! ../../lib/effect_utils */ "./src/typescript/lib/effect_utils.ts");
const utils_1 = __webpack_require__(/*! ../../lib/utils */ "./src/typescript/lib/utils.ts");
const story_1 = __webpack_require__(/*! ../../story */ "./src/typescript/story/index.ts");
const animation_1 = __webpack_require__(/*! ../animation */ "./src/typescript/UI/animation.ts");
const prelude_1 = __webpack_require__(/*! ../prelude */ "./src/typescript/UI/prelude.ts");
exports.History = (props, old) => {
    const dispatch = prelude_1.ui_resources.get('dispatch').get();
    let root;
    if (!old) {
        const first_world = utils_1.array_last(history_1.history_array(props.world));
        root = set_history_view_from_scratch(first_world.story);
    }
    else {
        root = old.old_root;
    }
    const anim = props.animation_state;
    if (anim.current_stage !== undefined) {
        const dom_effects = new effect_utils_1.Effects(root);
        // TODO: Bug with interpretation effect where in the
        // virtual story tree an eph class gets removed properly, but not
        // in the actual dom.
        let story = story_1.apply_story_updates_stage(anim.current_story, anim.update_plan.get(anim.current_stage), dom_effects, anim.current_stage);
        story = push_animation(story, dom_effects);
        dom_effects.push(() => dispatch({ kind: 'AdvanceAnimation', next_story: story }));
        return root;
    }
    // compute any visual effects from a currently entered-but-not-yet-submitted command.
    // const would_effects: ReversibleUpdateSpec[] = [];
    // // dim the most recent frame if undo is selected.
    // if (props.world.index === (old ? old.old_props.world.index : undefined) &&
    //     props.undo_selected !== (old ? old.old_props.undo_selected : undefined)) {
    //     would_effects.push(story_update(
    //         story_query('frame', props.world.index ),
    //         story_op('css', { 'would-undo': props.undo_selected })
    //     ) as ReversibleUpdateSpec);        
    // }
    // if (!old || show_possible_effects(old.old_props) !== show_possible_effects(props)) {
    //     if (old) {
    //         // reverse the old possible labels
    //         const old_possible_effects = possible_effects(old.old_props);
    //         if (old_possible_effects.length > 0) {
    //             debugger;
    //         }
    //         const reversed_old_possible_effects = old_possible_effects
    //             .map(u => update(u, { op: {
    //                 parameters: (_: CSSUpdates) => map_values(_, v => !v)
    //             } } ));
    //         would_effects.push(...reversed_old_possible_effects);
    //     }
    //     would_effects.push(...possible_effects(props));
    // }
    const story = animation_1.final_story(props.world);
    if (!old || props.world.index < old.old_props.world.index) {
        root = set_history_view_from_scratch(story, root);
    }
    // if (would_effects.length > 0) {
    //     const dom_effects = new Effects(root);
    //     const story_with_would_effects = apply_story_updates_stage(story, [Groups.push(...would_effects)], dom_effects);
    //     push_animation(story_with_would_effects, dom_effects);
    // }
    return root;
};
function set_history_view_from_scratch(story, root) {
    const result = story_1.story_to_dom(story);
    if (root) {
        root.replaceWith(result);
    }
    return result;
}
exports.set_history_view_from_scratch = set_history_view_from_scratch;
function push_animation(story, dom_effects) {
    const effect_promise = prelude_1.ui_resources.get('effect_promise').get();
    dom_effects.push(async (dom) => {
        await effect_promise();
        // TODO: set all the eph-adding and eph-removing classes here?
        // would have to change how remove_eph works on the dom then...
        await animation_1.animate(dom);
        return dom;
    });
    return story_1.remove_eph(story, dom_effects);
}
function show_possible_effects(props) {
    return props.undo_selected ? undefined : props.possible_world;
}
function possible_effects(props) {
    if (props.undo_selected || props.possible_world === undefined) {
        return [];
    }
    return animation_1.compute_possible_effects(props.world, props.possible_world);
}


/***/ }),

/***/ "./src/typescript/UI/components/input_prompt.tsx":
/*!*******************************************************!*\
  !*** ./src/typescript/UI/components/input_prompt.tsx ***!
  \*******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const framework_1 = __webpack_require__(/*! ../framework */ "./src/typescript/UI/framework/index.ts");
const prelude_1 = __webpack_require__(/*! ../prelude */ "./src/typescript/UI/prelude.ts");
const parsed_text_1 = __webpack_require__(/*! ./parsed_text */ "./src/typescript/UI/components/parsed_text.tsx");
const input_prompt_child = framework_1.child_declarator_for();
const input_prompt_input = input_prompt_child((root) => root.querySelector('input'));
const input_prompt_text = input_prompt_child((root) => root.querySelector('.parsed-text'), ({ parsing }) => ({ parsing }), parsed_text_1.ParsedText);
const input_prompt_cursor = input_prompt_child((root) => root.querySelector('.cursor'), ({ locked }) => ({ locked }), (props, old) => Cursor(props, old));
exports.InputPrompt = (props, old) => {
    const dispatch = prelude_1.ui_resources.get('dispatch').get();
    if (old === undefined) {
        let result = framework_1.createElement("div", { className: "input-prompt" },
            framework_1.createElement("input", { value: props.parsing.raw.text }),
            framework_1.createElement("span", null,
                framework_1.createElement(input_prompt_text.render, Object.assign({}, props)),
                framework_1.createElement(input_prompt_cursor.render, Object.assign({}, props))));
        input_prompt_input.get(result).addEventListener('input', (e) => {
            dispatch({
                kind: 'ChangeText',
                text: e.target.value
            });
        });
        return result;
    }
    if (props.parsing.raw.text !== old.old_props.parsing.raw.text) {
        const input = input_prompt_input.get(old.old_root);
        input.value = props.parsing.raw.text;
        input_prompt_text.render(props, old);
    }
    input_prompt_cursor.render(props, old);
    return old.old_root;
};
const Cursor = ({ locked }, old) => {
    if (old === undefined || old.old_props.locked !== locked) {
        return framework_1.createElement("span", { className: 'cursor ' + (locked ? '' : "blinking-cursor") }, String.fromCharCode(locked ? 8943 : 9608));
    }
    return old.old_root;
};


/***/ }),

/***/ "./src/typescript/UI/components/parsed_text.tsx":
/*!******************************************************!*\
  !*** ./src/typescript/UI/components/parsed_text.tsx ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const story_1 = __webpack_require__(/*! ../../story */ "./src/typescript/story/index.ts");
exports.Carat = () => story_1.createElement("span", null, ">\u00A0");
function cssify_status(status) {
    switch (status) {
        case 'Match':
            return 'match';
        case 'PartialMatch':
            return 'partial-match';
        case 'ErrorMatch':
            return 'error-match';
    }
}
function cssify_availability(availability) {
    switch (availability) {
        case 'Available':
            return 'available';
        case 'Used':
            return 'used';
        case 'Locked':
            return 'locked';
    }
}
function get_class_name(tm) {
    let classes = [
        'token',
        cssify_status(tm.status),
        cssify_availability(tm.expected.availability)
    ];
    if (tm.status === 'Match') {
        for (let [label, on] of Object.entries(tm.expected.labels)) {
            if (on) {
                classes.push(label);
            }
        }
    }
    return classes.join(' ');
}
exports.ParsedText = (props) => story_1.story_to_dom(exports.ParsedTextStory(props));
exports.ParsedTextStory = (props) => {
    let parsing = props.parsing;
    let command_classes = ['command'];
    let view = parsing.view;
    command_classes.push(cssify_status(view.match_status));
    if (view.submittable || view.submission) {
        command_classes.push('submittable');
    }
    function convert_token(s) {
        if (typeof s === 'string') {
            return s;
        }
        return '';
    }
    return story_1.createElement("div", { className: "parsed-text" },
        story_1.createElement(exports.Carat, null),
        story_1.createElement("div", { className: command_classes.join(' ') }, view.matches.map((elt, i) => (story_1.createElement("div", { className: get_class_name(elt) },
            story_1.createElement("span", null, parsing.whitespace[i] + convert_token(elt.actual)))))));
};


/***/ }),

/***/ "./src/typescript/UI/components/typeahead.tsx":
/*!****************************************************!*\
  !*** ./src/typescript/UI/components/typeahead.tsx ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const prelude_1 = __webpack_require__(/*! ../prelude */ "./src/typescript/UI/prelude.ts");
const framework_1 = __webpack_require__(/*! ../framework */ "./src/typescript/UI/framework/index.ts");
const lodash_1 = __webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js");
exports.Typeahead = ({ parsing, typeahead_index, undo_selected }, old) => {
    const dispatch = prelude_1.ui_resources.get('dispatch').get();
    function handleMouseOver(i) {
        dispatch({
            kind: 'SelectTypeahead',
            index: i
        });
    }
    function handleClick(i) {
        dispatch({
            kind: 'SelectTypeahead',
            index: i
        });
        dispatch({
            kind: 'Submit'
        });
        // unclear if we need to call dispatch twice or just once
    }
    function whitespace(s) {
        return s.replace(/./g, ' '); //'&nbsp;');
    }
    function convert_token(s) {
        if (typeof s === 'string') {
            return s;
        }
        // If we're here, s is SUBMIT_TOKEN.
        return String.fromCharCode(8629); // curving down arrow indicator
    }
    function cssify_availability(availability) {
        switch (availability) {
            case 'Available':
                return 'available';
            case 'Used':
                return 'used';
            case 'Locked':
                return 'locked';
        }
    }
    function get_option_class(option, index, selected_index, undo_selected) {
        let classes = ['option', cssify_availability(option.availability)];
        if (index === selected_index && !undo_selected) {
            classes.push('selected');
        }
        return classes.join(' ');
    }
    function get_option_token_class(match) {
        if (match === undefined) {
            return '';
        }
        let classes = ['token', cssify_availability(match.expected.availability)];
        for (let [label, on] of Object.entries(match.expected.labels)) {
            if (on) {
                classes.push(label);
            }
        }
        return classes.join(' ');
    }
    function grid(parsing) {
        return parsing.view.typeahead_grid;
    }
    if (!old || !lodash_1.isEqual(grid(parsing), grid(old.old_props.parsing))) {
        return framework_1.createElement("ul", { className: "typeahead" },
            grid(parsing).map((option, i) => framework_1.createElement("li", { on: {
                    mouseover: () => handleMouseOver(i),
                    click: () => handleClick(i)
                }, className: get_option_class(option, i, typeahead_index, undo_selected) },
                framework_1.createElement("span", null, '  '),
                option.option.map((m, j) => framework_1.createElement("span", { className: get_option_token_class(m) }, m === undefined ?
                    parsing.whitespace[j] + whitespace(convert_token(parsing.tokens[j])) :
                    (j >= parsing.whitespace.length || j !== 0 && parsing.whitespace[j] === '' ?
                        ' ' :
                        parsing.whitespace[j]) + convert_token(m.expected.token))),
                option.availability === 'Locked' ? framework_1.createElement(Lock, null) : '')),
            framework_1.createElement("li", { className: 'footer' }, "\u00A0"));
    }
    if (old.old_props.typeahead_index !== typeahead_index
        || old.old_props.undo_selected !== undo_selected) {
        grid(old.old_props.parsing).forEach((t, i) => {
            old.old_root.children[i].className = get_option_class(t, i, typeahead_index, undo_selected);
        });
    }
    return old.old_root;
};
const Lock = () => framework_1.createElement("span", { className: "token lock" }, ' ' + String.fromCharCode(8416));


/***/ }),

/***/ "./src/typescript/UI/components/undo_button.tsx":
/*!******************************************************!*\
  !*** ./src/typescript/UI/components/undo_button.tsx ***!
  \******************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const framework_1 = __webpack_require__(/*! ../framework */ "./src/typescript/UI/framework/index.ts");
const prelude_1 = __webpack_require__(/*! ../prelude */ "./src/typescript/UI/prelude.ts");
exports.UndoButton = ({ world, undo_selected }, old) => {
    const dispatch = prelude_1.ui_resources.get('dispatch').get();
    function get_undo_class() {
        let classes = ['undo-button'];
        if (undo_selected) {
            classes.push('selected');
        }
        if (world.previous === undefined) {
            classes.push('disabled');
        }
        return classes.join(' ');
    }
    if (old === undefined) {
        return framework_1.createElement("div", { className: get_undo_class(), on: {
                mouseover: () => dispatch({ kind: 'SelectUndo' }),
                click: () => { dispatch({ kind: 'SelectUndo' }); dispatch({ kind: 'Submit' }); }
            } },
            String.fromCharCode(10226),
            " Undo");
    }
    if (world.previous !== old.old_props.world.previous
        || undo_selected !== old.old_props.undo_selected) {
        old.old_root.className = get_undo_class();
    }
    return old.old_root;
};


/***/ }),

/***/ "./src/typescript/UI/framework/JSX.ts":
/*!********************************************!*\
  !*** ./src/typescript/UI/framework/JSX.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const jsx_utils_1 = __webpack_require__(/*! ../../lib/jsx_utils */ "./src/typescript/lib/jsx_utils.ts");
function createElement(type, props, ...children_deep) {
    const children = utils_1.flat_deep(children_deep); //.flat(Infinity);
    const all_props = Object.assign(Object.assign({}, props), { children });
    if (typeof type === 'string') {
        return exports.intrinsic_element_renderer(type, all_props);
    }
    else {
        return type(all_props);
    }
}
exports.createElement = createElement;
const utils_1 = __webpack_require__(/*! ../../lib/utils */ "./src/typescript/lib/utils.ts");
exports.intrinsic_element_renderer = (tag, props) => {
    const node = document.createElement(tag);
    const html_props = jsx_utils_1.remove_custom_props(props, { children: null });
    jsx_utils_1.set_attributes(node, html_props);
    if (props.children) {
        for (const child of props.children) {
            if (child instanceof Node) {
                node.appendChild(child);
            }
            else if (child) {
                node.appendChild(document.createTextNode(child));
            }
        }
    }
    return node;
};


/***/ }),

/***/ "./src/typescript/UI/framework/framework.ts":
/*!**************************************************!*\
  !*** ./src/typescript/UI/framework/framework.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/**
 * TODO: Add Links to components, so that
 *  - Don't need to keep getter logic in sync with structure changes
 *  - When a component gets re-rendered, any links will auto update to the new version?
 */
Object.defineProperty(exports, "__esModule", { value: true });
function update_component(renderer, props, old) {
    const result = renderer(props, old);
    if (result !== old.old_root) {
        old.old_root.replaceWith(result);
    }
    return result;
}
exports.update_component = update_component;
function make_updater(getter, prop_mapper, renderer) {
    return (props, old) => {
        if (!old) {
            return renderer(prop_mapper(props));
        }
        const old_child_root = getter(old.old_root);
        if (!old_child_root) {
            console.warn('old child root may have disappeared. Check your getter logic.');
        }
        return update_component(renderer, prop_mapper(props), {
            old_props: prop_mapper(old.old_props),
            old_root: getter(old.old_root)
        });
    };
}
exports.make_updater = make_updater;
function declare_child(getter, mapper, renderer) {
    let result = { get: getter };
    if (mapper !== undefined) {
        result.map = mapper;
    }
    if (renderer !== undefined) {
        result.render = make_updater(getter, mapper, renderer);
    }
    return result;
}
exports.declare_child = declare_child;
function child_declarator_for() {
    function child_declarator_for_inner(getter, mapper, renderer) {
        return declare_child(getter, mapper, renderer);
    }
    return child_declarator_for_inner;
}
exports.child_declarator_for = child_declarator_for;
const devtools_1 = __webpack_require__(/*! devtools */ "./src/typescript/devtools/index.ts");
function make_ui(renderer, reducer, debug = false) {
    let old_state = undefined;
    let component;
    let rendering = false;
    function initialize(initial_state) {
        if (component !== undefined) {
            throw new Error('multiple calls to initialize().');
        }
        old_state = initial_state;
        return render();
    }
    let render_task = undefined;
    const action_queue = [];
    const effect_queue = [];
    function dispatch(action) {
        if (old_state === undefined) {
            throw new Error('dispatch function was called before initializer.');
        }
        action_queue.push(action);
        if (render_task === undefined) {
            render_task = setTimeout(render);
        }
    }
    function effect(f) {
        if (old_state === undefined) {
            throw new Error('effect function was called before initializer.');
        }
        if (!rendering) {
            throw new Error('effect() was called outside of a render');
        }
        effect_queue.push(f);
    }
    function effect_promise() {
        return new Promise(resolve => effect(resolve));
    }
    function render() {
        // console.time('render');
        if (old_state === undefined) {
            throw new Error('dispatch or effect function was called before initializer.');
        }
        render_task = undefined;
        let new_state = old_state;
        while (action_queue.length > 0) {
            new_state = reducer(new_state, action_queue.shift());
        }
        rendering = true;
        if (component === undefined) {
            component = renderer(old_state);
        }
        if (new_state !== old_state) {
            component = update_component(renderer, new_state, {
                old_props: old_state,
                old_root: component
            });
            old_state = new_state;
            // for debugging
            if (debug) {
                devtools_1.GLOBAL_DEV_TOOLS.ui_state = old_state;
            }
        }
        requestAnimationFrame(() => {
            // console.time('effects');
            rendering = false;
            while (effect_queue.length > 0) {
                effect_queue.shift()();
            }
            // console.timeEnd('effects');
        });
        // console.timeEnd('render');
        return component;
    }
    return {
        initialize,
        dispatch,
        effect,
        effect_promise
    };
}
exports.make_ui = make_ui;
function update_class(elt, options) {
    if (options.add) {
        options.add.forEach(c => {
            elt.classList.add(c);
        });
    }
    if (options.remove) {
        options.remove.forEach(c => {
            elt.classList.remove(c);
        });
    }
    return elt;
}
exports.update_class = update_class;


/***/ }),

/***/ "./src/typescript/UI/framework/index.ts":
/*!**********************************************!*\
  !*** ./src/typescript/UI/framework/index.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./JSX */ "./src/typescript/UI/framework/JSX.ts"));
__export(__webpack_require__(/*! ./framework */ "./src/typescript/UI/framework/framework.ts"));


/***/ }),

/***/ "./src/typescript/UI/index.ts":
/*!************************************!*\
  !*** ./src/typescript/UI/index.ts ***!
  \************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
var app_state_1 = __webpack_require__(/*! ./app_state */ "./src/typescript/UI/app_state.ts");
exports.AppState = app_state_1.AppState;
var app_1 = __webpack_require__(/*! ./components/app */ "./src/typescript/UI/components/app.tsx");
exports.initialize_app = app_1.initialize_app;
var animation_1 = __webpack_require__(/*! ./animation */ "./src/typescript/UI/animation.ts");
exports.new_animation_state = animation_1.new_animation_state;
exports.Framework = __webpack_require__(/*! ./framework */ "./src/typescript/UI/framework/index.ts");


/***/ }),

/***/ "./src/typescript/UI/prelude.ts":
/*!**************************************!*\
  !*** ./src/typescript/UI/prelude.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const static_resources_1 = __webpack_require__(/*! ../lib/static_resources */ "./src/typescript/lib/static_resources.ts");
exports.ui_resources = new static_resources_1.StaticMap({
    initialize: null,
    'dispatch': null,
    'effect': null,
    'effect_promise': null
});


/***/ }),

/***/ "./src/typescript/UI/styles.ts":
/*!*************************************!*\
  !*** ./src/typescript/UI/styles.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const TypeStyle = __importStar(__webpack_require__(/*! typestyle */ "./node_modules/typestyle/lib.es2015/index.js"));
const csx_1 = __webpack_require__(/*! csx */ "./node_modules/csx/lib.es2015/index.js");
function rgb_rule(r, g, b) {
    return {
        '--rgb-color': `${r}, ${g}, ${b}`
    };
}
exports.rgb_rule = rgb_rule;
function alpha_rule(a) {
    return {
        '--alpha-color': `${a}`
    };
}
exports.alpha_rule = alpha_rule;
function compute_color_rule() {
    return {
        color: 'rgba(var(--rgb-color),var(--alpha-color))'
    };
}
exports.compute_color_rule = compute_color_rule;
exports.animation_pre_compute = TypeStyle.style({ $debugName: 'animation_pre_compute' });
exports.animation_start = TypeStyle.style({ $debugName: 'animation_start' });
exports.animation_active = TypeStyle.style({ $debugName: 'animation_active' });
exports.eph_new = TypeStyle.style({
    $debugName: 'eph_new',
    $nest: {
        [`.story.${exports.animation_start} &`]: {
            opacity: 0.01,
            maxHeight: csx_1.px(0)
        },
        [`.story.${exports.animation_start}.${exports.animation_active} &`]: {
            opacity: 1.0,
            transition: 'max-height 400ms linear, opacity 300ms ease-in',
            transitionDelay: '0ms, 400ms'
        }
    }
});


/***/ }),

/***/ "./src/typescript/demo_worlds/narrascope/action.tsx":
/*!**********************************************************!*\
  !*** ./src/typescript/demo_worlds/narrascope/action.tsx ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gist_1 = __webpack_require__(/*! gist */ "./src/typescript/gist/index.ts");
const puffer_1 = __webpack_require__(/*! puffer */ "./src/typescript/puffer.ts");
const knowledge_1 = __webpack_require__(/*! knowledge */ "./src/typescript/knowledge/index.ts");
const static_resources_1 = __webpack_require__(/*! lib/static_resources */ "./src/typescript/lib/static_resources.ts");
const text_utils_1 = __webpack_require__(/*! lib/text_utils */ "./src/typescript/lib/text_utils.ts");
const utils_1 = __webpack_require__(/*! lib/utils */ "./src/typescript/lib/utils.ts");
const story_1 = __webpack_require__(/*! story */ "./src/typescript/story/index.ts");
const prelude_1 = __webpack_require__(/*! ./prelude */ "./src/typescript/demo_worlds/narrascope/prelude.ts");
const styles_1 = __webpack_require__(/*! ./styles */ "./src/typescript/demo_worlds/narrascope/styles.ts");
prelude_1.resource_registry.initialize('initial_world_knowledge', new knowledge_1.Knowledge(), (k) => {
    prelude_1.resource_registry.initialize('initial_world_metaphor', {
        gist: undefined,
        owner: undefined,
        current_interpretation: undefined,
        knowledge: k.get(),
        has_acquired: utils_1.map(['consider', true], ['remember', true]),
        has_tried: new knowledge_1.GistAssoc([]) // map()
    });
});
const init_knowledge = prelude_1.resource_registry.get('initial_world_knowledge');
prelude_1.Puffers(prelude_1.lock_and_brand('Metaphor', knowledge_1.make_knowledge_puffer({
    get_knowledge: w => w.knowledge,
    set_knowledge: (w, k) => utils_1.update(w, { knowledge: () => k }),
    get_dynamic_region: w => {
        if (w.current_interpretation === undefined) {
            return undefined;
        }
        return story_1.Updates.frame(utils_1.range(w.current_interpretation, w.index + 1));
    }
})));
let action_index = prelude_1.resource_registry.initialize('action_index', new static_resources_1.StaticMap(prelude_1.STATIC_ACTION_IDS)).get_pre_runtime();
function Action(spec) {
    gist_1.GistRenderer([spec.id], spec.render_impls);
    const descr_gist = gist_1.gist('action description', undefined, { action: spec.id });
    gist_1.GistRenderer(descr_gist, {
        noun_phrase: () => spec.description_noun_phrase,
        command_noun_phrase: () => spec.description_command_noun_phrase
    });
    const katya_on_gist = gist_1.gist('Katya on', { action_description: descr_gist });
    // const descr_gist = gist('action description', {}, {action: spec.id});
    gist_1.GIST_RENDERER_DISPATCHERS[static_resources_1.OnSealed](() => {
        init_knowledge.update(k => (k
            // main story bit about the action
            .ingest(story_1.createElement("div", { gist: descr_gist },
            story_1.createElement("div", { gist: katya_on_gist, className: styles_1.insight_text_class }, spec.katya_quote),
            story_1.createElement("br", null),
            text_utils_1.capitalize(gist_1.render_gist.noun_phrase(descr_gist)),
            " confers:",
            story_1.createElement("blockquote", null, spec.description)))
            // the notes about the action, which contains the main body above
            .ingest((k) => story_1.createElement("div", { gist: ['notes', { subject: descr_gist }] },
            story_1.createElement("strong", null, text_utils_1.capitalize(gist_1.render_gist.noun_phrase(descr_gist))),
            k.get_exact(descr_gist)))
            .ingest((k) => story_1.createElement("div", { gist: ['remember', { subject: descr_gist }] },
            "You close your eyes, and hear Katya's voice:",
            k.get_exact(descr_gist)))));
    });
    if (spec.memory_prompt_impls !== undefined) {
        gist_1.GistRenderer(['memory prompt', { memory: ['remember', { subject: descr_gist }] }], spec.memory_prompt_impls);
    }
    if (spec.memory !== undefined) {
        prelude_1.resource_registry.get('exposition_func')[static_resources_1.OnSealed](e => {
            const Exposition = e.get();
            exports.ActionHandler(['scrutinize', {
                    facet: ['facet', { knowledge: ['knowledge', { content: katya_on_gist }] }]
                }], Exposition({
                // the expanded memory associated w the action, once you uncover it
                revealed_child_story: story_1.createElement("blockquote", { gist: ['remember', { subject: katya_on_gist }], className: styles_1.insight_text_class }, spec.memory)
            }));
        });
    }
    if (spec.puffer !== undefined) {
        prelude_1.Puffers(puffer_1.gate_puffer((w, is_old) => w.has_acquired.get(spec.id), spec.puffer));
    }
    action_index.initialize(spec.id, spec);
    return spec;
}
exports.Action = Action;
const ACTION_HANDLER_DISPATCHER = prelude_1.resource_registry.initialize('action_handler_dispatcher', new gist_1.GistPatternUpdateDispatcher()).get_pre_runtime();
exports.ACTION_HANDLER_FALLTHROUGH_STAGE = 5;
exports.ActionHandler = utils_1.bound_method(ACTION_HANDLER_DISPATCHER, 'add_rule');
function handle_action(action_gist, w) {
    return ACTION_HANDLER_DISPATCHER.apply_all(action_gist, w, exports.ACTION_HANDLER_FALLTHROUGH_STAGE);
}
exports.handle_action = handle_action;
function action_consume_spec(action_gist, world) {
    return {
        tokens: gist_1.render_gist.command_verb_phrase(action_gist),
        used: world.has_tried.get(action_gist)
    };
}
exports.action_consume_spec = action_consume_spec;
// trigger action handlers based on the action that just occurred.
prelude_1.Puffers({
    role_brand: true,
    pre: world => {
        let result = world;
        if (world.previous !== undefined) {
            const prev_gist = world.previous.gist;
            if (prev_gist !== undefined) {
                if (world.knowledge.get_entry([gist_1.EXACT, ['knowledge', { content: prev_gist }]]) === undefined) {
                    const prev_frame = story_1.Updates.frame(world.previous.index).query(world.story)[0][0];
                    result = utils_1.update(result, {
                        knowledge: _ => _.ingest(prev_frame)
                    });
                }
            }
        }
        return utils_1.update(result, {
            gist: undefined
        });
    },
    post: (w2, w1) => {
        if (w2.gist !== undefined) {
            w2 = utils_1.update(w2, {
                story_updates: story_1.story_updater(story_1.Updates.frame().set_gist(w2.gist))
            });
            w2 = handle_action(w2.gist, w2);
            w2 = utils_1.update(w2, {
                has_tried: _ => _.set(w2.gist, true)
            });
        }
        return w2;
    }
});
// for the special case of remembering an action description,
// now add the action id to has_acquired so the player can do that action.
exports.ActionHandler(['remember', { subject: ['action description'] }], (action_gist) => (world) => {
    const new_action_id = action_gist[1].subject[2].action;
    return utils_1.update(world, {
        has_acquired: utils_1.map([new_action_id, true])
    });
});
// export const Action = (spec: Action) => action_index.initialize(spec.id, spec);
// function get_actions(world: Venience) {
//     let actions: Action[] = [];
//     for (let [act_id, on] of world.has_acquired) {
//         if (on) {
//             actions.push(action_index.get(act_id));
//         }
//     }
//     return actions;
// }
// export function any_actions(world: Venience) {
//     return [...world.has_acquired].some(([act, on]) => on);
// }
// function apply_action(world: Venience, facet: FacetSpec, action: Action) {
//     if (world.current_interpretation === null) {
//         throw new Error(`Tried to apply an action without having a current interpretation.`);
//     }
//     let interpretted_world = find_index(world, world.current_interpretation)!;
//     if (!facet.can_recognize(world, interpretted_world)) {
//         throw new Error(`Tried to interact with facet ${facet.name} without being able to recognize it.`);
//     }
//     if (!facet.can_apply(action)) {
//         throw new Error(`Tried to apply action ${action.id} to facet ${facet.name}, but it can't be applied.`);
//     }
//     let already_solved = facet.solved(world);
//     world = facet.handle_action(action, world);
//     world = update(world, { 
//         has_tried: map([action.id, map([facet.name, true])]),
//         story_updates: story_updater(
//             Groups.name('init_frame').stage(0).move_to(-1),
//             Groups.name('interpretation_effects').stage(-1).push(
//                 S.frame(indices_where(world, (w => w.index > world.current_interpretation!)))
//                     .has_gist({ tag: 'facet', children: { child: facet.name }})
//                     .css({
//                         [`eph-descr-${action.slug}-blink`]: true,
//                         [`eph-descr-${facet.slug}-blink`]: true
//                     }),
//                 S.frame(world.current_interpretation!)
//                     .css({
//                         [`eph-interp-${facet.slug}-blink`]: true
//                     })
//             )
//         )
//     });
//     let solved = facet.solved(world)
//     if (solved) {
//         if (!already_solved) {
//             return update(world, {
//                 story_updates: story_updater(
//                     Groups.name('interpretation_effects').push(
//                         S.frame(interpretted_world.index).css({ [`interp-${facet.slug}`]: true })
//                     )
//                 )
//             });
//         } else if (solved !== already_solved) { // The player picked the right answer again. blink it.
//             return update(world, {
//                 story_updates: story_updater(
//                     Groups.name('interpretation_effects').push(
//                         S.frame(interpretted_world.index).css({ [`eph-interp-${facet.slug}-solved-blink`]: true })
//                     )
//                 )
//             });
//         }
//     }
//     return world;
// };
// export const make_action_applicator = (world: Venience, facet_id: FacetID, action_id: ActionID) => (parser: Parser) => {
//         if (!world.has_acquired.get(action_id)) {
//             return parser.eliminate();
//         }
//         const facet = facet_index.get(facet_id);
//         if (facet === undefined) {
//             throw Error('Invalid facet name: '+facet_id);
//         }
//         const action = action_index.get(action_id);
//         if (action === undefined) {
//             throw Error('Invalid action name: '+action_id);
//         }
//         if (!facet.can_apply(action)) {
//             return parser.eliminate();
//         }
//         let already_solved = facet.solved(world);
//         return (
//             parser.consume(
//                 {
//                     tokens: render_gist.command_verb_phrase(gist({
//                         tag: action_id,
//                         children: {
//                             facet: facet.name
//                         }
//                     })), // action.get_cmd(facet.noun_phrase_cmd),
//                     used: !!already_solved || (world.has_tried.has(action.id) && world.has_tried.get(action.id)!.get(facet.name)),
//                     labels: { interp: true, filler: true }
//                 }, () =>
//             parser.submit(() => {
//             return apply_action(world, facet, action);
//             })))
// }
// // FACETS
// type FacetGists = { [K in FacetID]: {} };
// declare module 'gist' {
//     export interface StaticGistTypes extends FacetGists {
//         facet: {
//             children: {
//                 parent?: ValidTags,
//                 child: ValidTags
//             }
//         };
//     }
// }
// type Facet = {
//     pattern: GistPattern<'facet'>,
//     render_impls?: GistRenderMethodsImpl<'facet'>,
//     // assuming the facet's content occurs in the message of the world under interpretation,
//     // can the player recognize it as a facet?
//     can_recognize?: (facet: Gists['facet'], current_world: Venience, interpretted_world: Venience) => boolean,
//     // can action be applied to the facet? (ie should it show up in the typeahead?)
//     can_apply?: (facet: Gists['facet'], action: Action) => boolean,
//     handle_action: (facet: Gists['facet'], action: Action, world: Venience) => Venience,
// };
// function process_facet(spec: Facet) {
//     if (spec.render_impls !== undefined) {
//         GistRenderer(spec.pattern, spec.render_impls);
//     }
//     return spec;
// }
// // base renderer will just ignore the parent gist and refer to it as the child gist's rendering
// GistRenderer('facet', {
//     noun_phrase: {
//         order: 'BottomUp',
//         impl: (tag, {child}) => child
//     },
//     command_noun_phrase: {
//         order: 'BottomUp',
//         impl: (tag, {child}) => child
//     }
// });
// type FacetSpec = {
//     name: FacetID, // e.g. "the sense of dread"
//     slug: string,
//     noun_phrase: string,
//     noun_phrase_cmd: ConsumeSpec,
//     // assuming the facet's content occurs in the message of the world under interpretation,
//     // can the player recognize it as a facet?
//     can_recognize: (current_world: Venience, interpretted_world: Venience) => boolean,
//     can_apply: (action: Action) => boolean,
//     solved: (world: Venience) => boolean | symbol,
//     handle_action: (action: Action, world: Venience) => Venience,
//     content?: Fragment
// };
// export function RenderFacet(props: { name: FacetID }) {
//     const f = facet_index.get(props.name);
//     if (f.content === undefined) {
//         throw new Error(`Tried to render facet ${props.name} with no content set.`);
//     }
//     return f.content;
// }
// const facet_index = resource_registry.initialize('facet_index',
//     new StaticMap(StaticFacetIDs, [
//         function add_facet_to_puffers(spec: FacetSpec) {
//             Puffers(make_facet(spec));
//             return spec;
//         }
//     ])
// );
// const make_facet = (spec: FacetSpec): Puffer<Venience> => lock_and_brand('Metaphor', {
//     handle_command: (world, parser) => {
//         if (world.current_interpretation === null) {
//             return parser.eliminate();
//         }
//         let interpretted_world = find_index(world, world.current_interpretation)!;
//         if ( !spec.can_recognize?.(world, interpretted_world)){
//             return parser.eliminate();
//         }
//         let threads: ParserThread<Venience>[] = [];
//         for (let action of Object.values(action_index.all())) {
//             threads.push(make_action_applicator(world, spec.name, action.id));
//         }
//         return parser.split(threads);
//     },
//     post: (world2, world1) => {
//         let updates: Updater<Venience>[] = [];
//         if (world2.current_interpretation !== null && world2.current_interpretation === world1.current_interpretation) {
//             let interpretted_world = find_historical(world2, w => w.index === world2.current_interpretation)!;
//             if (!spec.can_recognize(world1, interpretted_world) && spec.can_recognize(world2, interpretted_world)) {
//                 updates.push({ story_updates: story_updater(
//                     S.prompt(<div>
//                         You notice an aspect that you hadn't before:
//                         <blockquote className={`descr-${spec.slug}`}>
//                             {spec.noun_phrase}
//                         </blockquote>
//                     </div>)
//                 ) });
//             }
//         }
//         if (spec.can_recognize(world2, world2) && spec.solved(world2)) {
//             updates.push({ story_updates: story_updater(
//                 S.frame().css({ [`interp-${spec.slug}`]: true })
//             ) });
//         }
//         return update(world2, ...updates);
//     },
//     css_rules: [`
//         .history .would-add-interp-${spec.slug}-blink .${spec.slug} {
//             animation-name: interpreting, would-interpret !important;
//             animation-duration: 2s, 2s !important;
//             animation-iteration-count: infinite, infinite !important;
//         }`,
//         `.history .would-add-descr-${spec.slug}-blink .descr-${spec.slug} {
//             animation-name: interpreting, would-cite !important;
//             animation-duration: 2s, 2s !important;
//             animation-iteration-count: infinite, infinite !important;
//         }`,
//         `.history .adding-interp-${spec.slug}.animation-start .${spec.slug} .interp-${spec.slug} {
//             opacity: 0.01;
//             max-height: 0px;
//         }`,
//         `.history .adding-interp-${spec.slug}.animation-start.animation-active .${spec.slug} .interp-${spec.slug} {
//             opacity: 1.0;
//             transition: max-height 400ms linear, opacity 300ms ease-in;
//             transition-delay: 0ms, 400ms;
//         }`,
//         `.history .interp-${spec.slug} .output-text .interp-${spec.slug} {
//             display: block;
//             color: gold;
//             opacity: 1;
//         }`,
//         `.history .output-text .interp-${spec.slug} {
//             display: none;
//         }`,
//         `.history .adding-interp-${spec.slug}-blink.animation-start .${spec.slug} .interp-${spec.slug} {
//             background-color: orange;
//         }`,
//         `.history .adding-interp-${spec.slug}-blink.animation-start.animation-active .${spec.slug} .interp-${spec.slug} {
//             background-color: inherit;
//             transition: background-color 700ms linear;
//         }`
//     ]
// });
// export const Facets = (spec: FacetSpec) => facet_index.initialize(spec.name, spec);


/***/ }),

/***/ "./src/typescript/demo_worlds/narrascope/consider.tsx":
/*!************************************************************!*\
  !*** ./src/typescript/demo_worlds/narrascope/consider.tsx ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const story_1 = __webpack_require__(/*! story */ "./src/typescript/story/index.ts");
const prelude_1 = __webpack_require__(/*! ./prelude */ "./src/typescript/demo_worlds/narrascope/prelude.ts");
const gist_1 = __webpack_require__(/*! gist */ "./src/typescript/gist/index.ts");
const knowledge_1 = __webpack_require__(/*! knowledge */ "./src/typescript/knowledge/index.ts");
const static_resources_1 = __webpack_require__(/*! lib/static_resources */ "./src/typescript/lib/static_resources.ts");
const action_1 = __webpack_require__(/*! ./action */ "./src/typescript/demo_worlds/narrascope/action.tsx");
const utils_1 = __webpack_require__(/*! lib/utils */ "./src/typescript/lib/utils.ts");
const parser_1 = __webpack_require__(/*! parser */ "./src/typescript/parser/index.ts");
prelude_1.resource_registry.initialize('initial_world_consider', {
    can_consider: new knowledge_1.GistAssoc([
        { key: gist_1.gist('the present moment'), value: true }
    ])
});
const topic_index = prelude_1.resource_registry.initialize('topic_index', new static_resources_1.StaticMap(prelude_1.STATIC_TOPIC_IDS)).get_pre_runtime();
function assert_is_topic(x) {
    var _a;
    if (!story_1.is_story_node(x)) {
        throw new Error('Topic must actually be a StoryNode even though the type says any Fragment. (JSX limitation.)');
    }
    if (!utils_1.included((_a = x.data.gist) === null || _a === void 0 ? void 0 : _a[0], utils_1.keys(prelude_1.STATIC_TOPIC_IDS))) {
        throw new Error('StoryNode must have a gist and its tag must be a topic id.');
    }
}
exports.assert_is_topic = assert_is_topic;
const init_knowledge = prelude_1.resource_registry.get('initial_world_knowledge');
function Topic(topic) {
    assert_is_topic(topic);
    const topic_id = topic.data.gist[0];
    init_knowledge.update(k => k.ingest(topic));
    topic_index.initialize(topic_id, topic);
    return topic;
}
exports.Topic = Topic;
action_1.Action({
    id: 'consider',
    render_impls: {
        noun_phrase: g => gist_1.bottom_up(g)((tag, { subject }) => `your impression of ${subject}`, gist_1.render_gist.noun_phrase),
        command_noun_phrase: g => gist_1.bottom_up(g)((tag, { subject }) => ['my_impression_of', parser_1.GAP, subject], gist_1.render_gist.command_noun_phrase),
        command_verb_phrase: g => gist_1.bottom_up(g)((tag, { subject }) => ['consider', parser_1.GAP, subject], gist_1.render_gist.command_noun_phrase)
    },
    description_noun_phrase: 'consideration',
    description_command_noun_phrase: 'consideration',
    description: 'Your cursory experience of the world.',
    katya_quote: story_1.createElement("div", null,
        "\"We cannot help but have initial impressions. ",
        story_1.createElement("strong", null, "Considering"),
        " them is automatic. They're always there to root us to reality.\""),
    memory: story_1.createElement("div", null, "Of course, she went on to tell you that initial impressions were almost never to be trusted."),
    puffer: {
        handle_command: (world, parser) => {
            const threads = [];
            for (const topic of utils_1.keys(prelude_1.STATIC_TOPIC_IDS)) {
                const topic_gist = [topic];
                if (world.can_consider.get(topic_gist)) {
                    threads.push(() => {
                        const action_gist = gist_1.gist('consider', { subject: topic_gist });
                        return (parser.consume(action_1.action_consume_spec(action_gist, world), () => parser.submit(() => utils_1.update(world, {
                            gist: () => action_gist,
                            story_updates: story_1.story_updater(story_1.Updates.description(world.knowledge.get_exact(topic_gist)))
                        }))));
                    });
                }
            }
            return parser.split(threads);
        }
    }
});


/***/ }),

/***/ "./src/typescript/demo_worlds/narrascope/facet.tsx":
/*!*********************************************************!*\
  !*** ./src/typescript/demo_worlds/narrascope/facet.tsx ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gist_1 = __webpack_require__(/*! gist */ "./src/typescript/gist/index.ts");
const story_1 = __webpack_require__(/*! story */ "./src/typescript/story/index.ts");
// base renderer will just ignore the parent gist and refer to it as the child gist's rendering
gist_1.GistRenderer(['facet'], {
    noun_phrase: g => gist_1.render_gist.noun_phrase(g[1].knowledge[1].content),
    command_noun_phrase: g => gist_1.render_gist.command_noun_phrase(g[1].knowledge[1].content)
});
// Given a gist, return the list of its facets.
function get_facets(w, parent) {
    const entry = w.knowledge.get_entry([gist_1.EXACT, parent]);
    if (entry === undefined) {
        throw new Error('Tried to look up gist ' + gist_1.gist_to_string(parent) + ' without an entry in the knowledge base.');
    }
    return [['facet', { knowledge: entry.key }], ...entry.children.map((knowledge) => gist_1.gist('facet', { knowledge }))];
}
exports.get_facets = get_facets;
// render story for listing facets and their descriptions
function render_facet_list(facets) {
    if (facets.length === 0) {
        return story_1.createElement("div", null, "However, nothing about it seems particularly notable.");
    }
    return story_1.createElement("div", null,
        "You notice the following facets:",
        facets.map(f => story_1.createElement("blockquote", { gist: f }, gist_1.render_gist.noun_phrase(f))));
}
exports.render_facet_list = render_facet_list;


/***/ }),

/***/ "./src/typescript/demo_worlds/narrascope/index.ts":
/*!********************************************************!*\
  !*** ./src/typescript/demo_worlds/narrascope/index.ts ***!
  \********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! ./prelude */ "./src/typescript/demo_worlds/narrascope/prelude.ts");
__webpack_require__(/*! ./styles */ "./src/typescript/demo_worlds/narrascope/styles.ts");
__webpack_require__(/*! ./facet */ "./src/typescript/demo_worlds/narrascope/facet.tsx");
__webpack_require__(/*! ./action */ "./src/typescript/demo_worlds/narrascope/action.tsx");
__webpack_require__(/*! ./reflect */ "./src/typescript/demo_worlds/narrascope/reflect/index.ts");
__webpack_require__(/*! ./consider */ "./src/typescript/demo_worlds/narrascope/consider.tsx");
__webpack_require__(/*! ./notes */ "./src/typescript/demo_worlds/narrascope/notes.tsx");
__webpack_require__(/*! ./remember */ "./src/typescript/demo_worlds/narrascope/remember.tsx");
__webpack_require__(/*! ./narrascope */ "./src/typescript/demo_worlds/narrascope/narrascope.tsx");
__export(__webpack_require__(/*! ./prelude */ "./src/typescript/demo_worlds/narrascope/prelude.ts"));
__export(__webpack_require__(/*! ./styles */ "./src/typescript/demo_worlds/narrascope/styles.ts"));
__export(__webpack_require__(/*! ./facet */ "./src/typescript/demo_worlds/narrascope/facet.tsx"));
__export(__webpack_require__(/*! ./action */ "./src/typescript/demo_worlds/narrascope/action.tsx"));
__export(__webpack_require__(/*! ./reflect */ "./src/typescript/demo_worlds/narrascope/reflect/index.ts"));
__export(__webpack_require__(/*! ./consider */ "./src/typescript/demo_worlds/narrascope/consider.tsx"));
__export(__webpack_require__(/*! ./notes */ "./src/typescript/demo_worlds/narrascope/notes.tsx"));
__export(__webpack_require__(/*! ./remember */ "./src/typescript/demo_worlds/narrascope/remember.tsx"));
__export(__webpack_require__(/*! ./narrascope */ "./src/typescript/demo_worlds/narrascope/narrascope.tsx"));


/***/ }),

/***/ "./src/typescript/demo_worlds/narrascope/narrascope.tsx":
/*!**************************************************************!*\
  !*** ./src/typescript/demo_worlds/narrascope/narrascope.tsx ***!
  \**************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gist_1 = __webpack_require__(/*! gist */ "./src/typescript/gist/index.ts");
// import { Memories } from './memory';
// import { add_to_notes } from './notes';
const static_resources_1 = __webpack_require__(/*! lib/static_resources */ "./src/typescript/lib/static_resources.ts");
// import { is_simulated } from '../../supervenience';
const utils_1 = __webpack_require__(/*! lib/utils */ "./src/typescript/lib/utils.ts");
const puffer_1 = __webpack_require__(/*! puffer */ "./src/typescript/puffer.ts");
const story_1 = __webpack_require__(/*! story */ "./src/typescript/story/index.ts");
const world_1 = __webpack_require__(/*! world */ "./src/typescript/world.tsx");
const prelude_1 = __webpack_require__(/*! ./prelude */ "./src/typescript/demo_worlds/narrascope/prelude.ts");
const action_1 = __webpack_require__(/*! ./action */ "./src/typescript/demo_worlds/narrascope/action.tsx");
const consider_1 = __webpack_require__(/*! ./consider */ "./src/typescript/demo_worlds/narrascope/consider.tsx");
__webpack_require__(/*! ./reflect */ "./src/typescript/demo_worlds/narrascope/reflect/index.ts");
const remember_1 = __webpack_require__(/*! ./remember */ "./src/typescript/demo_worlds/narrascope/remember.tsx");
__webpack_require__(/*! ./notes */ "./src/typescript/demo_worlds/narrascope/notes.tsx");
const knowledge_1 = __webpack_require__(/*! knowledge */ "./src/typescript/knowledge/index.ts");
prelude_1.resource_registry.initialize('initial_world_narrascope', {
    has_chill: false,
    has_recognized_something_wrong: false,
    is_curious_about_history: false,
    has_admitted_negligence: false,
    has_unpacked_culpability: false,
    has_volunteered: false,
    end: false,
    has_scrutinized_memory: utils_1.map()
});
const init_knowledge = prelude_1.resource_registry.get('initial_world_knowledge');
gist_1.GistRenderer(['your friendship with Sam'], {
    command_noun_phrase: () => 'my_friendship_with_Sam'
});
gist_1.GistRenderer(['yourself'], {
    command_noun_phrase: () => 'myself'
});
gist_1.GistRenderer(['your notebook'], {
    command_noun_phrase: () => 'my_notebook'
});
gist_1.GistRenderer(['your history with Sam'], {
    command_noun_phrase: () => 'my_history_with_Sam'
});
consider_1.Topic(story_1.createElement("div", { gist: ["the present moment"] }, "You and Sam are sitting together on the bus."));
action_1.ActionHandler(['consider', { subject: ['the present moment'] }], g => w => {
    if (!w.has_tried.get(g)) {
        return utils_1.update(w, {
            can_consider: _ => _.set_many([
                { key: ['Sam'], value: true },
                { key: ['yourself'], value: true }
            ])
        });
    }
    return w;
});
consider_1.Topic(story_1.createElement("div", { gist: ["Sam"] },
    story_1.createElement("div", { gist: ["your friendship with Sam"] }, "An old friend on his way to work."),
    story_1.createElement("div", { gist: ["Sam's demeanor"] }, "He glances at you, smiling vaguely.")));
consider_1.Topic(story_1.createElement("div", { gist: ["yourself"] },
    "You haven't entirely woken up.",
    story_1.createElement("br", null),
    story_1.createElement("div", { gist: ['description', { subject: ['your notebook'] }] },
        "A ",
        story_1.createElement("strong", null, "thick notebook"),
        " sits in your lap.")));
consider_1.Topic(story_1.createElement("div", { gist: ["your notebook"] },
    "You keep it with you at all times.",
    story_1.createElement("br", null),
    "It is filled with the words of someone very wise, who you once knew."));
action_1.ActionHandler(['consider', { subject: ['yourself'] }], g => w => {
    if (!w.has_tried.get(g)) {
        return utils_1.update(w, {
            can_consider: _ => _.set(['your notebook'], true)
        });
    }
    return w;
});
action_1.ActionHandler(['consider', { subject: ['your notebook'] }], g => w => {
    if (!w.has_tried.get(g)) {
        const descr_gist = knowledge_1.knowledge_gist(['description', { subject: ['your notebook'] }], ['yourself']);
        return utils_1.update(w, {
            knowledge: k => k.update([gist_1.EXACT, descr_gist], (s) => [
                s.replace_children(['Your notebook sits in your lap.'])
            ]),
        }, remember_1.make_memory_available(['action description', undefined, { action: 'notes' }]));
    }
    return w;
});
consider_1.Topic(story_1.createElement("div", { gist: ["your history with Sam"] }, "Good buds!"));
action_1.ActionHandler(['consider', { subject: ['Sam'] }], g => w => {
    if (!w.has_tried.get(g)) {
        return utils_1.update(w, remember_1.make_memory_available(['action description', undefined, { action: 'reflect' }]));
    }
    return w;
});
action_1.ActionHandler(['remember', { subject: ['action description', undefined, { action: 'reflect' }] }], g => w => {
    return utils_1.update(w, {
        has_acquired: utils_1.map(['scrutinize', true])
    });
});
// const abtsm = gist('consider', { subject: ['Sam'] });
// // Big old hack but it'll do for now
// function about_sam(world: Venience) {
//     return world.gist !== undefined && gists_equal(world.gist, abtsm);
// }
// Facets({
//     name: "Sam's presence",
//     noun_phrase: "Sam's presence by your side.",
//     slug: 'sam',
//     noun_phrase_cmd: "Sam's_presence",
//     can_recognize: (w2, w1) =>
//         about_sam(w1) && !!w2.has_acquired.get('to attend'),
//     can_apply: (action) => true/*action.name === 'to attend'*/,
//     solved: w => w.has_chill,
//     handle_action: (action, world) => {
//         if (action.name === 'to attend') {
//             return update(world, {
//                 has_chill: Symbol(),
//                 story_updates: story_updater(
//                     Groups.name('interpretation_effects').stage(-1).push(
//                         Updates.has_gist('Sam').add(<div className="interp-sam affinity">
//                             ...Something is wrong.
//                         </div>)
//                     ),
//                     Updates.consequence(cond(!world.has_chill, () => <div>A chill comes over you.</div>)),
//                     Updates.description(<div>
//                         Something about Sam is <i>incorrect</i>.
//                         <br/>
//                         You can feel the discordance in your bones. It scares you.
//                     </div>)
//                 )
//             });
//         } else {
//             // TODO: replace generic wrong msg with hint asking for more specifity
//             if (action.name === 'to scrutinize') {
//                 return update(world, { story_updates: story_updater(Updates.consequence(<div>You'll need to be more specific about what to scrutinize.</div>)) })
//             }
//             return update(world, { story_updates: story_updater(Updates.consequence(action.get_wrong_msg('sam'))) });
//         }
//     }
// });
// Action({
//     id: 'to scrutinize',
//     noun: 'scrunity',
//     noun_cmd: 'scrutiny',
//     description: "The ability to unpack details and look beyond your initial assumptions.",
//     slug: 'scrutiny',
//     get_cmd: (facet) => ['scrutinize', facet],
//     get_wrong_msg: (facet) => <div>Despite your thorough scrutiny, {facet} remains unresolved.</div>
// })
// Memories({
//     action: 'to scrutinize',
//     could_remember: world => !!world.has_chill,
//     description: () => <div className="memory-2">
//         "Look beyond your initial impressions, my dear. Scrutinize. Concern yourself with nuance."
//         <blockquote className="interp-memory-2">
//             She mentioned this while making a point about the intricacies of the <a target="_blank" href="https://en.wikipedia.org/wiki/Observer_effect_(physics)">Observer Effect</a>.
//         </blockquote>
//     </div>
// });
// Facets({
//     name: "Sam's demeanor",
//     noun_phrase: "Sam's demeanor",
//     slug: 'sam-demeanor',
//     noun_phrase_cmd: "sam's_demeanor",
//     can_recognize: (w2, w1) =>
//         about_sam(w1) && !!w2.has_acquired.get('to scrutinize'),
//     can_apply: (action) => true/*action.name === 'to scrutinize'*/,
//     solved: w => w.has_recognized_something_wrong,
//     handle_action: (action, world) => {
//         if (action.name === 'to scrutinize') {
//             return update(world, {
//                 has_recognized_something_wrong: Symbol(),
//                 story_updates: story_updater(Updates.consequence(<div>
//                     You are struck by the alarming incongruence of his demeanor.
//                     <br/>
//                     The initial pleasant, mild impression, revealed upon further scrutiny to be a veneer, a mask, a lie.
//                 </div>))
//             });
//         } else if (action.name === 'to attend') {
//             return update(world, {
//                 story_updates: story_updater(Updates.consequence(`You notice nothing new about his demeanor.`))
//             });
//         } else {
//             return update(world, {
//                 story_updates: story_updater(Updates.consequence(action.get_wrong_msg("sam's demeanor")))
//             });
//         }
//     }
// });
// Action({
//     id: 'to hammer',
//     noun: 'the hammer',
//     noun_cmd: 'the_hammer',
//     description: "The act of dismantling one's own previously-held beliefs.",
//     slug: 'to-hammer',
//     get_cmd: (facet) => ['hammer_against the_foundations_of', facet],
//     get_wrong_msg: (facet) => `You find yourself unable to shake ${facet}, despite your efforts.`
// });
// Memories({
//     action: 'to hammer',
//     could_remember: world => !!world.has_recognized_something_wrong,
//     description: () => <div className="memory-3">
//         "Take a hammer to your assumptions, my dear. If they are ill-founded, let them crumble."
//         <blockquote className="interp-memory-3">
//             She always pushed you.
//             <br />
//             Katya was always one to revel in the overturning of wrong ideas.
//         </blockquote>
//     </div>
// });
// Facets({
//     name: 'your friendship with Sam',
//     slug: 'friendship-sam',
//     noun_phrase_cmd: 'my_friendship_with_sam',
//     noun_phrase: 'Your friendship with Sam.',
//     can_recognize: (w2, w1) =>
//         about_sam(w1) && !!w2.has_acquired.get('to hammer'),
//     can_apply: (action) => true/*included(action.name, ['to hammer'])*/,
//     solved: w => w.is_curious_about_history,
//     handle_action: (action, world) => {
//         if (action.id === 'to hammer') {
//             return update(world, { 
//                 story_updates: story_updater(
//                     Updates.action([`You ask yourself a hard question: `, <i>Is Sam really your friend?</i>]),
//                     Updates.consequence("You realize you don't know anymore."),
//                     Updates.prompt("You'll have to <strong>consider your history</strong>.")
//                 ),
//                 is_curious_about_history: Symbol()
//             }
//             );
//         }
//         return world;
//     }
// });
// Topics({
//     name: 'your history with Sam',
//     cmd: 'my_history_with_Sam',
//     can_consider: (w) => !!w.is_curious_about_history,
//     message: () => Updates.description(<div>
//         You've known Sam since you both arrived in Boston about 10 years ago.
//         <br/>
//         You were studying under Katya, and he was doing agricultural engineering a few buildings over.
//         <div className="falling-out">
//             At some point along the way, you drifted apart.
//             <blockquote className="interp-falling-out culpability">
//                 It wasn't mutual. It was <i>you</i>.
//                 <blockquote className="interp-culpability">
//                     After Katya left, you turned inward. Closed off.
//                     <br/>
//                     You stopped being curious about people like Sam.
//                 </blockquote>
//             </blockquote>
//         </div>
//     </div>),
//     reconsider: (w2, w1) => {
//         if (!w2.has_unpacked_culpability) {
//             return true;
//         }
//         return false;
//     }
// });
// GistRenderer('your history with Sam', {
//     noun_phrase: {
//         order: 'TopDown',
//         impl: () => 'your history with Sam'
//     },
//     command_noun_phrase: {
//         order: 'TopDown',
//         impl: () => 'my_history_with_sam'
//     }
// });
// function is_about_history(w: Venience) {
//     return w.gist !== null && gists_equal(w.gist, gist('impression', { subject: 'your history with Sam'}));
// }
// Facets({
//     name: 'your drifting apart',
//     slug: 'falling-out',
//     noun_phrase_cmd: 'our_drifting_apart',
//     noun_phrase: 'Your drifting apart.',
//     can_recognize: (w2, w1) => is_about_history(w1),
//     can_apply: (action) => true/*included(action.name, ['to hammer'])*/,
//     solved: w => w.has_admitted_negligence,
//     handle_action: (action, world) => {
//         if (action.name === 'to hammer') {
//             return update(world, {
//                 has_admitted_negligence: Symbol(),
//                 story_updates: story_updater(Updates.consequence(<div>
//                     You force yourself to look the truth in the eye: <i>You</i> bowed out of the friendship.
//                     <br/>
//                     There was nothing mutual about it. You sidelined him without explanation.
//                 </div>))
//             });
//         }
//         return world;
//     }
// });
// Facets({
//     name: 'your culpability',
//     slug: 'culpability',
//     noun_phrase_cmd: 'my_culpability',
//     noun_phrase: 'Your culpability.',
//     can_recognize: (w2, w1) => is_about_history(w1) && !!w2.has_admitted_negligence,
//     can_apply: (action) => true/*included(action.name, ['to scrutinize'])*/,
//     solved: w => w.has_unpacked_culpability,
//     handle_action: (action, world) => {
//         if (action.id === 'to scrutinize') {
//             return update(world, {
//                 has_unpacked_culpability: Symbol(),
//                 story_updates: story_updater(Updates.consequence(<div>
//                     There's no doubt you did it out of self-preservation.
//                     <br/>
//                     There's also no doubt he deserved better.
//                     <br/>
//                     You wince at the guilt.
//                 </div>))
//             });
//         }
//         return world;
//     }
// });
// Action({
//     id: 'to volunteer',
//     noun: 'the volunteer',
//     noun_cmd: 'the_volunteer',
//     description: "The offering of an active intervention in the world, to change it for the better.",
//     slug: 'volunteer',
//     get_cmd: (facet) => ['volunteer to_foster', facet],
//     get_wrong_msg: (facet) => `Despite your thorough scrutiny, ${facet} remains concerning.`
// })
// Memories({
//     action: 'to volunteer',
//     could_remember: world => !!world.has_unpacked_culpability,
//     description: () => <div className="memory-4">
//         "Do more than merely receive and respond, my dear. We must participate, as best as we can. We must volunteer ourselves to the world."
//         <blockquote className="interp-memory-4">
//             This is one of the last things she said to you, before she left.
//         </blockquote>
//     </div>
// });
// Facets({
//     name: 'the old affinity',
//     slug: 'affinity',
//     noun_phrase_cmd: 'the_old_affinity',
//     noun_phrase: 'The old affinity you once had for each other.',
//     can_recognize: (w2, w1) => about_sam(w1) && !!w2.has_acquired.get('to volunteer'),
//     can_apply: (action) => true/*included(action.name, ['to volunteer'])*/,
//     solved: w => w.has_volunteered,
//     handle_action: (action, world) => {
//         if (action.id === 'to volunteer') {
//             return update(world, {
//                 has_volunteered: Symbol(),
//                 story_updates: story_updater(Updates.consequence(`
//                     You turn in your seat, and look him in the eyes, and say,`))
//             });
//         }
//         return world;
//     }
// });
// let global_lock = resource_registry.get('global_lock', false);
// let outro_lock = global_lock('Outro');
// Puffers({
//     role_brand: true,
//     pre: world => {
//         if (world.has_volunteered) {
//             return update(world, w => outro_lock.lock(w));
//         }
//         return world;
//     },
//     handle_command: (world, parser) => {
//             if (!world.has_volunteered || world.end) {
//                 return parser.eliminate();
//             }
//             return parser.consume('How are you, Sam?',
//                 () => parser.submit(
//                     () => update(world, {
//                         end: true,
//                         story_updates: story_updater(Updates.consequence(<div>
//                             <div className="interp">
//                                 VENIENCE WORLD
//                             </div>
//                             A work of <span className="blue">interactive fiction</span>
//                             <br/>
//                             by <div className="interp-inline">Daniel Spitz</div>
//                             <br/><br/>
//                             Thank you for playing the demo!
//                         </div>))
//                     })
//                 )
//             );
//     }
// });
// Test command to beat the whole demo
// Puffers({
//     handle_command: { kind: 'Stages',
//         4: ((world, parser) => {
//             if (is_simulated('playtester', world)) {
//                 return parser.eliminate();
//             }
//             if (world.end) {
//                 return parser.eliminate();
//             }
//             return parser.consume('beat_the_game', () =>
//                 parser.submit(() => {
//                 return find_world_at(world.previous!, 7).result!;
//         }))})
//     }
// });
var prelude_2 = __webpack_require__(/*! ./prelude */ "./src/typescript/demo_worlds/narrascope/prelude.ts");
exports.Venience = prelude_2.Venience;
prelude_1.resource_registry.get('gist_renderer_dispatchers')[static_resources_1.Seal]();
prelude_1.resource_registry.get('initial_world_knowledge')[static_resources_1.Seal]();
let initial_venience_world = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, world_1.get_initial_world()), prelude_1.resource_registry.get('initial_world_prelude').get_pre_runtime()), prelude_1.resource_registry.get('initial_world_metaphor').get_pre_runtime()), prelude_1.resource_registry.get('initial_world_consider').get_pre_runtime()), prelude_1.resource_registry.get('initial_world_narrascope').get_pre_runtime()), prelude_1.resource_registry.get('initial_world_memories').get_pre_runtime());
// initial_venience_world = update(initial_venience_world, {
//     story_updates: story_updater(S.description(
//         init_knowledge.get().get_exact(['the present moment'])!)
//     )
// });
const puffer_index = prelude_1.resource_registry.get('puffer_index').get_pre_runtime();
exports.venience_world_spec = puffer_1.make_puffer_world_spec(initial_venience_world, puffer_index.all(false));
function new_venience_world() {
    return world_1.world_driver(exports.venience_world_spec);
}
exports.new_venience_world = new_venience_world;
prelude_1.resource_registry.initialize('venience_world_spec', exports.venience_world_spec);
prelude_1.resource_registry[static_resources_1.Seal]();
// StoryQueryIndex.seal();


/***/ }),

/***/ "./src/typescript/demo_worlds/narrascope/notes.tsx":
/*!*********************************************************!*\
  !*** ./src/typescript/demo_worlds/narrascope/notes.tsx ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gist_1 = __webpack_require__(/*! gist */ "./src/typescript/gist/index.ts");
const stages_1 = __webpack_require__(/*! ../../lib/stages */ "./src/typescript/lib/stages.ts");
const text_utils_1 = __webpack_require__(/*! ../../lib/text_utils */ "./src/typescript/lib/text_utils.ts");
const update_1 = __webpack_require__(/*! ../../lib/update */ "./src/typescript/lib/update.ts");
const utils_1 = __webpack_require__(/*! ../../lib/utils */ "./src/typescript/lib/utils.ts");
const parser_1 = __webpack_require__(/*! ../../parser */ "./src/typescript/parser/index.ts");
const story_1 = __webpack_require__(/*! ../../story */ "./src/typescript/story/index.ts");
const action_1 = __webpack_require__(/*! ./action */ "./src/typescript/demo_worlds/narrascope/action.tsx");
const prelude_1 = __webpack_require__(/*! ./prelude */ "./src/typescript/demo_worlds/narrascope/prelude.ts");
action_1.Action({
    id: 'notes',
    render_impls: {
        noun_phrase: g => gist_1.bottom_up(g)((tag, { subject }) => 'your notes' + subject !== undefined ? ` about ${subject}` : '', gist_1.render_gist.noun_phrase),
        command_noun_phrase: g => gist_1.bottom_up(g)((tag, { subject }) => ['my_notes', ...utils_1.if_not_null_array(subject, (t) => [parser_1.GAP, 'about', t])], gist_1.render_gist.command_noun_phrase),
        command_verb_phrase: g => gist_1.bottom_up(g)((tag, { subject }) => ['notes', ...utils_1.if_not_null_array(subject, (t) => [parser_1.GAP, 'about', t])], gist_1.render_gist.command_noun_phrase)
    },
    memory_prompt_impls: {
        noun_phrase: () => 'something scholarly',
        command_noun_phrase: () => 'something_scholarly'
    },
    description_noun_phrase: 'note taking',
    description_command_noun_phrase: 'note_taking',
    description: 'The ability to externalize knowledge for later use. Your notebook contains everything you have seen fit to write down.',
    katya_quote: '"Write that down, my dear."',
    memory: story_1.createElement("div", null, "Even before you met her, you wrote. Putting your thoughts to the page elevated them for you, made them meaningful."),
    puffer: {
        handle_command: stages_1.stages([3, (world, parser) => {
                if (!world.has_acquired.get('notes')) {
                    return parser.eliminate();
                }
                const action_gists = [];
                action_gists.push(gist_1.gist('notes'));
                for (const subject of utils_1.keys(prelude_1.STATIC_ACTION_IDS)) {
                    if (!!world.has_acquired.get(subject)) {
                        const subject_gist = gist_1.gist('action description', undefined, { action: subject });
                        const action_gist = gist_1.gist('notes', { subject: subject_gist });
                        action_gists.push(action_gist);
                    }
                }
                const threads = action_gists.map(ag => () => parser.consume(action_1.action_consume_spec(ag, world), () => parser.submit(() => update_1.update(world, {
                    gist: () => ag
                }))));
                return parser.split(threads);
            }]),
        post: stages_1.stages([1, (world2, world1) => {
                let result = world2;
                for (const action_id of utils_1.keys(prelude_1.STATIC_ACTION_IDS)) {
                    if (!world1.has_acquired.get(action_id) && world2.has_acquired.get(action_id)) {
                        result = prompt_to_notes(result, gist_1.gist('action description', undefined, { action: action_id }));
                    }
                }
                return result;
            }])
    }
});
function prompt_to_notes(world, action_descr) {
    return update_1.update(world, {
        story_updates: story_1.story_updater(story_1.Updates.prompt(story_1.createElement("div", null,
            "You write about ",
            gist_1.render_gist.noun_phrase(action_descr),
            " in your ",
            story_1.createElement("strong", null, "notes"),
            ".")))
    });
}
exports.prompt_to_notes = prompt_to_notes;
action_1.ActionHandler(['notes', { subject: [gist_1.EMPTY] }], (action) => (world) => update_1.update(world, {
    story_updates: story_1.story_updater(story_1.Updates.description(story_1.createElement("div", null,
        "You have written down notes about the following:",
        utils_1.keys(prelude_1.STATIC_ACTION_IDS)
            .filter(n => !!world.has_acquired.get(n))
            .map(n => story_1.createElement("blockquote", null, text_utils_1.capitalize(gist_1.render_gist.noun_phrase(gist_1.gist('action description', undefined, { action: n }))))))))
}));
action_1.ActionHandler(['notes', { subject: ['action description'] }], (action) => (world) => update_1.update(world, {
    story_updates: story_1.story_updater(story_1.Updates.description(world.knowledge.get_exact(action)))
}));


/***/ }),

/***/ "./src/typescript/demo_worlds/narrascope/prelude.ts":
/*!**********************************************************!*\
  !*** ./src/typescript/demo_worlds/narrascope/prelude.ts ***!
  \**********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const lock_1 = __webpack_require__(/*! ../../lock */ "./src/typescript/lock.ts");
const utils_1 = __webpack_require__(/*! ../../lib/utils */ "./src/typescript/lib/utils.ts");
const static_resources_1 = __webpack_require__(/*! ../../lib/static_resources */ "./src/typescript/lib/static_resources.ts");
const gist_1 = __webpack_require__(/*! gist */ "./src/typescript/gist/index.ts");
exports.STATIC_TOPIC_IDS = {
    'the present moment': null,
    'Sam': null,
    'yourself': null,
    'your notebook': null,
    'your history with Sam': null
};
;
exports.STATIC_ACTION_IDS = {
    consider: null,
    reflect: null,
    notes: null,
    remember: null,
    scrutinize: null,
    hammer: null,
    volunteer: null
};
exports.StaticFacetIDs = {
    "Sam's presence": null,
    "Sam's demeanor": null,
    "your friendship with Sam": null,
    "your drifting apart": null,
    "your culpability": null,
    "the old affinity": null,
    'a memory 1': null,
    'a memory 2': null,
    'a memory 3': null,
    'a memory 4': null
};
;
const static_resource_names = {
    'initial_world_knowledge': null,
    'initial_world_prelude': null,
    'puffer_index': null,
    'global_lock': null,
    'gist_renderer_dispatchers': null,
    'topic_index': null,
    'initial_world_metaphor': null,
    'action_index': null,
    'action_handler_dispatcher': null,
    'initial_world_narrascope': null,
    'venience_world_spec': null,
    'initial_world_consider': null,
    'initial_world_memories': null,
    exposition_func: null
};
exports.resource_registry = new static_resources_1.StaticMap(static_resource_names);
;
exports.resource_registry.initialize('initial_world_prelude', { owner: undefined });
const global_lock = exports.resource_registry.initialize('global_lock', lock_1.lock_builder({
    owner: (w) => w.owner,
    set_owner: (w, owner) => utils_1.update(w, { owner })
})).get_pre_runtime();
const puffer_index = exports.resource_registry.initialize('puffer_index', new static_resources_1.StaticIndex([
    function ensure_lock(puffer) {
        if (puffer.role_brand === undefined) {
            return lock_and_brand(undefined, puffer);
        }
        return puffer;
    }
])).get_pre_runtime();
exports.resource_registry.initialize('gist_renderer_dispatchers', gist_1.GIST_RENDERER_DISPATCHERS);
exports.Puffers = utils_1.bound_method(puffer_index, 'add');
function lock_and_brand(owner, puffer) {
    return utils_1.update(puffer, global_lock(owner).lock_puffer, { role_brand: true });
}
exports.lock_and_brand = lock_and_brand;


/***/ }),

/***/ "./src/typescript/demo_worlds/narrascope/reflect/base_handlers.tsx":
/*!*************************************************************************!*\
  !*** ./src/typescript/demo_worlds/narrascope/reflect/base_handlers.tsx ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gist_1 = __webpack_require__(/*! gist */ "./src/typescript/gist/index.ts");
const history_1 = __webpack_require__(/*! history */ "./src/typescript/history.ts");
const utils_1 = __webpack_require__(/*! lib/utils */ "./src/typescript/lib/utils.ts");
const parser_1 = __webpack_require__(/*! parser */ "./src/typescript/parser/index.ts");
const story_1 = __webpack_require__(/*! story */ "./src/typescript/story/index.ts");
const action_1 = __webpack_require__(/*! ../action */ "./src/typescript/demo_worlds/narrascope/action.tsx");
const facet_1 = __webpack_require__(/*! ../facet */ "./src/typescript/demo_worlds/narrascope/facet.tsx");
const prelude_1 = __webpack_require__(/*! ../prelude */ "./src/typescript/demo_worlds/narrascope/prelude.ts");
const inner_action_1 = __webpack_require__(/*! ./inner_action */ "./src/typescript/demo_worlds/narrascope/reflect/inner_action.tsx");
// scrutinize
action_1.Action({
    id: 'scrutinize',
    render_impls: {
        command_verb_phrase: (g) => gist_1.bottom_up(g)((tag, { facet }) => ['scrutinize', parser_1.GAP, facet], gist_1.render_gist.command_noun_phrase)
    },
    memory_prompt_impls: {
        noun_phrase: () => 'something focused',
        command_noun_phrase: () => 'something_focused'
    },
    description_noun_phrase: 'scrutiny',
    description_command_noun_phrase: 'scrutiny',
    description: "The ability to unpack details and look beyond your initial assumptions.",
    katya_quote: story_1.createElement("div", null,
        "\"Look beyond your initial impressions, my dear. ",
        story_1.createElement("strong", null, "Scrutinize"),
        ". Concern yourself with nuance.\""),
    memory: story_1.createElement("div", null,
        "She mentioned this while making a point about the intricacies of the ",
        story_1.createElement("a", { target: "_blank", href: "https://en.wikipedia.org/wiki/Observer_effect_(physics)" }, "Observer Effect"),
        ".")
});
action_1.ActionHandler(['scrutinize'], inner_action_1.Exposition({
    commentary: (action, frame) => [
        frame.description(story_1.createElement("div", null,
            "There is nothing particular about ",
            gist_1.render_gist.noun_phrase(action[1].facet)))
    ]
}), action_1.ACTION_HANDLER_FALLTHROUGH_STAGE);
// hammer
action_1.Action({
    id: 'hammer',
    render_impls: {
        command_verb_phrase: (g) => gist_1.bottom_up(g)((tag, { facet }) => ['hammer_against the_foundations_of', facet], gist_1.render_gist.command_noun_phrase)
    },
    memory_prompt_impls: {
        noun_phrase: () => 'something blasphemous',
        command_noun_phrase: () => 'something_blasphemous'
    },
    description_noun_phrase: 'the Hammer',
    description_command_noun_phrase: 'the_Hammer',
    description: "The act of dismantling one's own previously-held beliefs.",
    katya_quote: story_1.createElement("div", null,
        "\"Take a ",
        story_1.createElement("strong", null, "hammer"),
        " to your assumptions, my dear. If they are ill-founded, let them crumble.\""),
    memory: story_1.createElement("div", null,
        "She always pushed you.",
        story_1.createElement("br", null),
        "Katya was always one to revel in the overturning of wrong ideas.")
});
action_1.ActionHandler(['hammer'], inner_action_1.Exposition({
    commentary: (action, frame, world) => [
        frame.description(`Despite your attempts to dismantle ${gist_1.render_gist.noun_phrase(action[1].facet)}, its foundation appears strong.`)
    ]
}), action_1.ACTION_HANDLER_FALLTHROUGH_STAGE);
// volunteer
action_1.Action({
    id: 'volunteer',
    render_impls: {
        command_verb_phrase: (g) => gist_1.bottom_up(g)((tag, { facet }) => ['volunteer to_foster', facet], gist_1.render_gist.command_noun_phrase)
    },
    memory_prompt_impls: {
        noun_phrase: () => 'something generous',
        command_noun_phrase: () => 'something_generous'
    },
    description_noun_phrase: 'the Volunteer',
    description_command_noun_phrase: 'the_Volunteer',
    description: "The offering of an active intervention in the world, to change it for the better.",
    katya_quote: story_1.createElement("div", null,
        "\"Do more than merely receive and respond, my dear. We must participate, as best as we can. We must ",
        story_1.createElement("strong", null, "volunteer"),
        " ourselves to the world.\""),
    memory: story_1.createElement("div", null, "This is one of the last things she said to you, before she left.")
});
action_1.ActionHandler(['volunteer'], inner_action_1.Exposition({
    commentary: (action, frame, world) => [
        frame.description(`You don't feel as if a mere act of will could improve ${gist_1.render_gist.noun_phrase(action[1].facet)}.`)
    ]
}), action_1.ACTION_HANDLER_FALLTHROUGH_STAGE);
// The inner action command handler.
// All special behavior will come from ActionHandler rules on specific action/facet combinations.
// Hence
prelude_1.Puffers(prelude_1.lock_and_brand('Metaphor', {
    handle_command: (world, parser) => {
        if (world.current_interpretation === undefined) {
            return parser.eliminate();
        }
        const interp_world = history_1.find_historical(world, w => w.index === world.current_interpretation);
        const observable_facets = facet_1.get_facets(world, interp_world.gist);
        const threads = [];
        for (const action of utils_1.keys(inner_action_1.INNER_ACTION_IDS)) {
            if (!world.has_acquired.get(action)) {
                continue;
            }
            for (const facet of observable_facets) {
                threads.push(() => {
                    const action_gist = gist_1.gist(action, { facet });
                    return (parser.consume([action_1.action_consume_spec(action_gist, world), parser_1.SUBMIT], () => utils_1.update(world, {
                        gist: () => action_gist
                    })));
                });
            }
        }
        return parser.split(threads);
    }
}));


/***/ }),

/***/ "./src/typescript/demo_worlds/narrascope/reflect/index.ts":
/*!****************************************************************!*\
  !*** ./src/typescript/demo_worlds/narrascope/reflect/index.ts ***!
  \****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__webpack_require__(/*! ./inner_action */ "./src/typescript/demo_worlds/narrascope/reflect/inner_action.tsx");
__webpack_require__(/*! ./base_handlers */ "./src/typescript/demo_worlds/narrascope/reflect/base_handlers.tsx");
__webpack_require__(/*! ./reflect */ "./src/typescript/demo_worlds/narrascope/reflect/reflect.tsx");
__export(__webpack_require__(/*! ./inner_action */ "./src/typescript/demo_worlds/narrascope/reflect/inner_action.tsx"));
__export(__webpack_require__(/*! ./base_handlers */ "./src/typescript/demo_worlds/narrascope/reflect/base_handlers.tsx"));
__export(__webpack_require__(/*! ./reflect */ "./src/typescript/demo_worlds/narrascope/reflect/reflect.tsx"));


/***/ }),

/***/ "./src/typescript/demo_worlds/narrascope/reflect/inner_action.tsx":
/*!************************************************************************!*\
  !*** ./src/typescript/demo_worlds/narrascope/reflect/inner_action.tsx ***!
  \************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gist_1 = __webpack_require__(/*! gist */ "./src/typescript/gist/index.ts");
const story_1 = __webpack_require__(/*! ../../../story */ "./src/typescript/story/index.ts");
const prelude_1 = __webpack_require__(/*! ../prelude */ "./src/typescript/demo_worlds/narrascope/prelude.ts");
const utils_1 = __webpack_require__(/*! lib/utils */ "./src/typescript/lib/utils.ts");
const styles_1 = __webpack_require__(/*! ../styles */ "./src/typescript/demo_worlds/narrascope/styles.ts");
const static_resources_1 = __webpack_require__(/*! lib/static_resources */ "./src/typescript/lib/static_resources.ts");
exports.INNER_ACTION_IDS = {
    scrutinize: null,
    hammer: null,
    volunteer: null
};
const init_knowledge = prelude_1.resource_registry.get('initial_world_knowledge');
function Exposition(exposition) {
    const child_gist = utils_1.if_not_null(exposition.revealed_child_story, (s) => {
        if (s.data.gist === undefined) {
            throw new Error('Passed in a reavealed_child_story without a gist attribute set. Must be set.');
        }
        init_knowledge.update(k => k.ingest(s));
        return s.data.gist;
    });
    return (action_gist) => (world) => {
        const parent_gist = action_gist[1].facet[1].knowledge;
        return utils_1.update(world, w => apply_facet_interpretation(w, {
            parent_gist,
            child_gist,
            commentary: utils_1.if_not_null(exposition.commentary, (c) => (frame, world) => c(action_gist, frame, world))
        }), Object.assign({}, utils_1.if_not_null(exposition.knowledge_updater, (ku) => ({
            knowledge: k => ku(action_gist, k)
        }))));
    };
}
exports.Exposition = Exposition;
prelude_1.resource_registry.initialize('exposition_func', Exposition)[static_resources_1.Seal]();
function apply_facet_interpretation(world, { parent_gist, child_gist, commentary }) {
    // add a new animation stage where we do interpretation stuff first,
    // then add any present tense stuff second.
    const interp_class = child_gist === undefined ? styles_1.misinterpret_facet_class : styles_1.interpret_facet_class;
    return utils_1.update(world, {
        story_updates: story_1.story_updater(story_1.Updates.group_name('init_frame').group_stage(0).move_group_to(-1), ...utils_1.if_not_null_array(commentary, (c) => [
            c(story_1.Updates.group_stage(0).frame(), world)
        ])),
        knowledge: k => k.update([gist_1.EXACT, parent_gist], b => [b
                .group_name('interpretation_effects')
                .group_stage(-1)
                .apply(b => [
                b.debug('addboi').css({ [interp_class]: true }),
                b.would().css({ [styles_1.would_interpret_facet_class]: true })
            ]),
            ...utils_1.if_array(() => {
                if (child_gist === undefined) {
                    return false;
                }
                const parent_story = k.get_exact(parent_gist);
                if (parent_story === undefined) {
                    throw new Error('Tried to add a timbre to a story whose gist is not in knowledge base.');
                }
                const has_timbre_already = story_1.Updates.children(story_1.Updates.has_gist(child_gist)).query(parent_story);
                return has_timbre_already.length === 0;
            }, () => {
                const child_story = k.get_exact(child_gist);
                return [b
                        .group_name('interpretation_effects')
                        .group_stage(-1)
                        .add(child_story)
                ];
            })
        ]).update(['facet', { knowledge: parent_gist }], b => b
            .group_name('interpretation_effects')
            .group_stage(-1)
            .apply(b => [
            b.css({ [styles_1.cite_facet_class]: true }),
            b.would().css({ [styles_1.would_cite_facet_class]: true })
        ]))
    });
}


/***/ }),

/***/ "./src/typescript/demo_worlds/narrascope/reflect/reflect.tsx":
/*!*******************************************************************!*\
  !*** ./src/typescript/demo_worlds/narrascope/reflect/reflect.tsx ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gist_1 = __webpack_require__(/*! gist */ "./src/typescript/gist/index.ts");
const history_1 = __webpack_require__(/*! history */ "./src/typescript/history.ts");
const utils_1 = __webpack_require__(/*! lib/utils */ "./src/typescript/lib/utils.ts");
const stages_1 = __webpack_require__(/*! lib/stages */ "./src/typescript/lib/stages.ts");
const parser_1 = __webpack_require__(/*! parser */ "./src/typescript/parser/index.ts");
const story_1 = __webpack_require__(/*! story */ "./src/typescript/story/index.ts");
const supervenience_1 = __webpack_require__(/*! supervenience */ "./src/typescript/supervenience.ts");
const action_1 = __webpack_require__(/*! ../action */ "./src/typescript/demo_worlds/narrascope/action.tsx");
const facet_1 = __webpack_require__(/*! ../facet */ "./src/typescript/demo_worlds/narrascope/facet.tsx");
const prelude_1 = __webpack_require__(/*! ../prelude */ "./src/typescript/demo_worlds/narrascope/prelude.ts");
const styles_1 = __webpack_require__(/*! ../styles */ "./src/typescript/demo_worlds/narrascope/styles.ts");
const supervenience_spec_1 = __webpack_require__(/*! ../supervenience_spec */ "./src/typescript/demo_worlds/narrascope/supervenience_spec.ts");
const inner_action_1 = __webpack_require__(/*! ./inner_action */ "./src/typescript/demo_worlds/narrascope/reflect/inner_action.tsx");
const global_lock = prelude_1.resource_registry.get('global_lock').get_pre_runtime();
let metaphor_lock = global_lock('Metaphor');
function begin_contemplation(world, parser) {
    if (world.previous === undefined) {
        return parser.eliminate();
    }
    /*
        TODO:
        need to update the criteria for whether something is contemplatable.

        Or, if everything is contemplatable, would need to be very thorough about:
            - making all action gists renderable as noun_phrase/command_noun_phrase
            - figure out how to expose the right depth of facets for exploration.
    */
    let contemplatable_worlds = history_1.history_array(world).filter(w => w.gist !== undefined && w.gist[0] !== 'reflect');
    let gists = [];
    for (let w of contemplatable_worlds) {
        if (gists.findIndex(g2 => gist_1.gists_equal(w.gist, g2)) === -1) {
            gists.push(w.gist);
        }
    }
    parser.label_context = { interp: true, filler: true };
    const immediate_world = (world.previous.gist !== undefined && world.previous.gist[0] !== 'reflect') ?
        world.previous :
        undefined;
    const direct_thread = make_direct_thread(world, immediate_world);
    if (gists.length === 1 || supervenience_1.is_simulated(indirect_simulator, world)) {
        return direct_thread(parser);
    }
    const indirect_thread = make_indirect_thread(world, immediate_world, gists);
    const result = parser.split([direct_thread, indirect_thread]);
    return result;
}
function list_facets(world) {
    var _a;
    if (world.current_interpretation === undefined) {
        throw new Error('Tried to list_facets while current_interpretation was undefined or the interpretted world had no gist.');
    }
    const interp_world = history_1.find_index(world, world.current_interpretation);
    if (((_a = interp_world) === null || _a === void 0 ? void 0 : _a.gist) === undefined) {
        throw new Error('Interpretted world could not be found or had no gist.');
    }
    /*
        TODO:
        get_facets should potentially receive a story tree rather than assume
        the gist of the interpretted world will be in the knowledge base?
    */
    const observable_facets = facet_1.get_facets(world, interp_world.gist);
    return utils_1.update(world, {
        story_updates: story_1.story_updater(story_1.Updates.description(facet_1.render_facet_list(observable_facets)))
    });
}
function make_list_facets_thread(world) {
    return (parser) => parser.consume('facets', () => parser.submit(() => list_facets(world)));
}
function make_direct_thread(world, immediate_world) {
    return (parser) => {
        if (immediate_world === undefined) {
            return parser.eliminate();
        }
        // TODO: allow array form of consume spec to glue tokens together without gaps.
        // debugger;
        return parser.consume(['begin_reflection on', gist_1.render_gist.command_noun_phrase(immediate_world.gist), parser_1.SUBMIT], () => {
            const index = immediate_world.index;
            return utils_1.update(world, w => metaphor_lock.lock(w, index), {
                current_interpretation: index,
                gist: () => ['reflect', { subject: immediate_world.gist }],
                story_updates: story_1.story_updater(story_1.Updates.map_worlds(world, (w, frame) => frame.css({
                    [styles_1.unfocused_class]: w.index < index
                })), story_1.Updates.frame(index).apply(s => [
                    s.css({
                        [styles_1.interpreting_class]: true
                    }),
                    s.would().css({
                        [styles_1.would_start_interpreting_class]: true
                    })
                ]), story_1.Updates.action(story_1.createElement("div", null,
                    "You analyze ",
                    gist_1.render_gist.noun_phrase(immediate_world.gist),
                    ". A sense of focus begins to permeate your mind.")))
            }, list_facets);
        });
    };
}
const indirect_simulator = 'indirect_contemplation';
function make_indirect_thread(world, immediate_world, gists) {
    return (parser) => parser.consume({
        tokens: 'reflect_on',
        labels: { interp: true, filler: true }
    }, () => {
        const indirect_threads = gists.map((g) => () => {
            const indirect_search_id = `contemplate-indirect-${world.index}-${gist_1.gist_to_string(g)}`;
            if (immediate_world !== undefined && gist_1.gists_equal(g, immediate_world.gist)) {
                return parser.eliminate();
            }
            let matched = gist_1.match(g)(['remember', { subject: ['action description'] }]);
            const target_gist = gist_1.gist('reflect', {
                subject: matched ? gist_1.gist('notes', { subject: matched[1].subject }) : g
            });
            // move the next story hole inside the current frame
            world = utils_1.update(world, {
                story_updates: story_1.story_updater(story_1.Updates.group_name('init_frame').apply(s => [
                    s.story_hole().remove(),
                    s.add(story_1.createElement(story_1.Hole, null))
                ]))
            });
            const result = supervenience_1.search_future({
                thread_maker: supervenience_spec_1.get_thread_maker(),
                goals: [w => !!w.gist && gist_1.gists_equal(w.gist, target_gist)],
                max_steps: 2,
                space: [w => w.gist && gist_1.gist_to_string(w.gist)],
                search_id: indirect_search_id,
                simulator_id: indirect_simulator,
                command_filter: (w, cmd) => {
                    let would_contemplate = cmd[0] && cmd[0].token === 'analyze';
                    if (w.gist && gist_1.gists_equal(w.gist, target_gist[1].subject)) {
                        return would_contemplate;
                    }
                    return !would_contemplate;
                }
            }, world);
            if (result.result === undefined) {
                return parser.eliminate();
            }
            return parser.consume({
                tokens: gist_1.render_gist.command_noun_phrase(g),
                labels: { interp: true, filler: true }
            }, () => parser.submit(() => utils_1.update(result.result, {
                story_updates: story_1.story_updater(story_1.Updates.frame(world.index).css({ [styles_1.unfocused_class]: false }))
            })));
        });
        return parser.split(indirect_threads);
    });
}
// TODO: This command does not animate at all.
// The fact that it doesn't animate at all means there is a bug somewhere
// But also, once that bug is fixed, this potentially ought to animate in two stages.
// Fixed, the problem was that animation only works if a StoryNode gets added,
//      previously was just a string, which is also allowed.
function make_end_contemplation_thread(world) {
    return (parser) => parser.consume({
        tokens: 'end_reflection',
        labels: { interp: true, filler: true }
    }, () => parser.submit(() => utils_1.update(world, metaphor_lock.release, {
        story_updates: story_1.story_updater(story_1.Updates.group_name('init_frame').apply(s => [
            s.story_hole().remove(),
            s.story_root().add(story_1.createElement(story_1.Hole, null))
        ]), story_1.Updates.map_worlds(world, (w, frame) => frame.css({ [styles_1.unfocused_class]: false })), story_1.Updates.frame(world.current_interpretation).apply(s => [
            s.css({
                [styles_1.interpreting_class]: false
            }),
            s.would().css({
                [styles_1.would_stop_interpreting_class]: true
            })
        ]), story_1.Updates.action(story_1.createElement("div", null, "Your mind returns to a less focused state."))),
        current_interpretation: undefined,
        has_tried: _ => {
            let result = _;
            for (const action_gist of _.keys()) {
                if (utils_1.included(action_gist[0], utils_1.keys(inner_action_1.INNER_ACTION_IDS))) {
                    result = result.set(action_gist, false);
                }
            }
            return result;
        }
    })));
}
action_1.Action({
    id: 'reflect',
    render_impls: {
        noun_phrase: (g) => gist_1.bottom_up(g)((tag, { subject }) => `your reflection on ${subject}`, gist_1.render_gist.noun_phrase),
        command_noun_phrase: (g) => gist_1.bottom_up(g)((tag, { subject }) => ['my_reflection_on', parser_1.GAP, subject], gist_1.render_gist.command_noun_phrase)
    },
    memory_prompt_impls: {
        noun_phrase: (g) => 'something meditative',
        command_noun_phrase: (g) => 'something_meditative',
    },
    description_noun_phrase: 'reflection',
    description_command_noun_phrase: 'reflection',
    description: "The ability to consciously unpack the contents of one's own experience.",
    katya_quote: story_1.createElement("div", null,
        "\"Wake up, my dear. Attend to the world around you. ",
        story_1.createElement("strong", null, "Reflect on"),
        " its nature.\""),
    memory: story_1.createElement("div", null,
        "Katya took you to the ",
        story_1.createElement("a", { target: "_blank", href: "https://en.wikipedia.org/wiki/Mauna_Kea_Observatories" }, "Mauna Kea Observatories"),
        " in Hawaii once, to study the astronomers at work.",
        story_1.createElement("br", null),
        "There was to be little time to relax or sleep in; astronomers are busy folk."),
    puffer: prelude_1.lock_and_brand('Metaphor', {
        handle_command: stages_1.stages([2, (world, parser) => {
                if (!world.has_acquired.get('reflect')) {
                    return parser.eliminate();
                }
                if (world.current_interpretation === undefined) {
                    return begin_contemplation(world, parser);
                }
                else {
                    return parser.split([
                        make_list_facets_thread(world),
                        make_end_contemplation_thread(world)
                    ]);
                }
            }]),
    })
});


/***/ }),

/***/ "./src/typescript/demo_worlds/narrascope/remember.tsx":
/*!************************************************************!*\
  !*** ./src/typescript/demo_worlds/narrascope/remember.tsx ***!
  \************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gist_1 = __webpack_require__(/*! gist */ "./src/typescript/gist/index.ts");
const utils_1 = __webpack_require__(/*! lib/utils */ "./src/typescript/lib/utils.ts");
const story_1 = __webpack_require__(/*! story */ "./src/typescript/story/index.ts");
const action_1 = __webpack_require__(/*! ./action */ "./src/typescript/demo_worlds/narrascope/action.tsx");
const prelude_1 = __webpack_require__(/*! ./prelude */ "./src/typescript/demo_worlds/narrascope/prelude.ts");
const styles_1 = __webpack_require__(/*! ./styles */ "./src/typescript/demo_worlds/narrascope/styles.ts");
const parser_1 = __webpack_require__(/*! parser */ "./src/typescript/parser/index.ts");
prelude_1.resource_registry.initialize('initial_world_memories', {
    could_remember: []
});
action_1.Action({
    id: 'remember',
    render_impls: {
        noun_phrase: g => gist_1.bottom_up(g)((tag, { subject }) => 'your memory of ' + subject, gist_1.render_gist.noun_phrase),
        command_noun_phrase: g => gist_1.bottom_up(g)((tag, { subject }) => ['my_memory of', subject], gist_1.render_gist.command_noun_phrase),
        command_verb_phrase: (g) => ['remember', parser_1.GAP, gist_1.render_gist.command_noun_phrase(['memory prompt', { memory: g }])]
    },
    description_noun_phrase: 'memory',
    description_command_noun_phrase: 'memory',
    description: "The ability to recall your previous experiences.",
    katya_quote: `"Our memories tell us about ourselves as much as they do about the past, my dear."`,
    memory: story_1.createElement("div", null,
        "She continued: ",
        story_1.createElement("span", { className: styles_1.insight_text_class }, "\"What your mind saw fit to remember reveals something deeper: What it saw fit to forget.\"")),
    puffer: {
        handle_command: (world, parser) => {
            if (world.could_remember.length === 0) {
                return parser.eliminate();
            }
            return parser.split(world.could_remember.map((memory, i) => () => {
                // const memory = world.could_remember[0];
                const action_gist = gist_1.gist('remember', { subject: memory });
                return (parser.consume([action_1.action_consume_spec(action_gist, world), parser_1.SUBMIT], () => utils_1.update(world, {
                    gist: () => action_gist,
                    could_remember: _ => { const r = [..._]; r.splice(i, 1); return r; }
                })));
            }));
        }
    }
});
action_1.ActionHandler(['remember'], (action_gist) => (world) => utils_1.update(world, {
    story_updates: story_1.story_updater(story_1.Updates.description(world.knowledge.get_exact(action_gist)))
}));
gist_1.GistRenderer(['memory prompt'], {
    noun_phrase: (g) => 'something',
    command_noun_phrase: (g) => 'something'
}, 5);
function make_memory_available(subject_gist) {
    return (world) => {
        const memory_gist = ['remember', { subject: subject_gist }];
        const memory_prompt = story_1.createElement("div", null,
            "You feel as though you might ",
            story_1.createElement("strong", null,
                "remember ",
                gist_1.render_gist.noun_phrase(['memory prompt', { memory: memory_gist }])),
            "...");
        return utils_1.update(world, {
            could_remember: utils_1.append(subject_gist),
            story_updates: story_1.story_updater(story_1.Updates.prompt(memory_prompt))
        });
    };
}
exports.make_memory_available = make_memory_available;


/***/ }),

/***/ "./src/typescript/demo_worlds/narrascope/styles.ts":
/*!*********************************************************!*\
  !*** ./src/typescript/demo_worlds/narrascope/styles.ts ***!
  \*********************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const TypeStyle = __importStar(__webpack_require__(/*! typestyle */ "./node_modules/typestyle/lib.es2015/index.js"));
const styles_1 = __webpack_require__(/*! ../../UI/styles */ "./src/typescript/UI/styles.ts");
exports.insight_text_class = TypeStyle.style(styles_1.rgb_rule(255, 215, 0));
function make_class_for_animation(name, animation, ...extra_rules) {
    return TypeStyle.style({
        $debugName: name,
        animationName: animation,
        animationDuration: '2s',
        animationIterationCount: 'infinite',
    }, ...extra_rules);
}
const outline_defaults = {
    outlineStyle: 'solid',
    outlineWidth: '1px',
    outlineOffset: '5px'
};
const would_start_interpreting_animation = TypeStyle.keyframes({
    $debugName: 'would_start_interpreting',
    '0%': {
        outlineColor: '#00000000'
    },
    '50%': {
        outlineColor: 'ivory'
    },
    '100%': {
        outlineColor: '#00000000'
    }
});
exports.would_start_interpreting_class = make_class_for_animation('would_start_interpreting', would_start_interpreting_animation, outline_defaults);
exports.would_stop_interpreting_class = TypeStyle.style({
    $debugName: 'would_stop_interpreting'
    // TODO
});
const interpreting_animation = TypeStyle.keyframes({
    $debugName: 'interpreting',
    '0%': {
        outlineColor: 'ivory'
    },
    '50%': {
        outlineColor: '#72d2e5'
    },
    '100%': {
        outlineColor: 'ivory'
    }
});
exports.interpreting_class = make_class_for_animation('interpreting', interpreting_animation, outline_defaults);
TypeStyle.cssRule(`.${styles_1.animation_start} .eph_adding_${exports.interpreting_class}`, {
    outlineColor: '#00000000',
    animation: 'none'
});
TypeStyle.cssRule(`.${styles_1.animation_start}.${styles_1.animation_active} .eph_adding_${exports.interpreting_class}`, {
    outlineColor: 'ivory',
    transition: 'outline-color 700ms linear'
});
TypeStyle.cssRule(`.${styles_1.animation_start}.${styles_1.animation_active} .eph_removing_${exports.interpreting_class}`, {
    outlineColor: 'inherit',
    transition: 'outline-color 700ms linear'
});
const would_interpret_facet_animation = TypeStyle.keyframes({
    $debugName: 'would_interpret_facet',
    '0%': {
        backgroundColor: 'black'
    },
    '50%': {
        backgroundColor: 'midnightblue'
    },
    '100%': {
        backgroundColor: 'black'
    }
});
exports.would_interpret_facet_class = make_class_for_animation('would_interpret_facet', would_interpret_facet_animation);
const would_cite_facet_animation = TypeStyle.keyframes({
    $debugName: 'would_cite_facet',
    '0%': {
        backgroundColor: 'black'
    },
    '50%': {
        backgroundColor: 'dimgray'
    },
    '100%': {
        backgroundColor: 'black'
    }
});
exports.would_cite_facet_class = make_class_for_animation('would_cite_facet', would_cite_facet_animation);
exports.cite_facet_class = TypeStyle.style({
    $debugName: 'eph-cite_facet',
    backgroundColor: 'dimgray'
    // TODO
});
exports.interpret_facet_class = TypeStyle.style({
    $debugName: 'eph-interpret_facet',
    $nest: {
        [`.${styles_1.animation_start} &`]: {
            backgroundColor: 'darkgoldenrob'
        },
        [`.${styles_1.animation_start}.${styles_1.animation_active} &`]: {
            backgroundColor: 'inherit',
            transition: 'background-color 700ms linear'
        }
    }
});
exports.misinterpret_facet_class = TypeStyle.style({
    $debugName: 'eph-misinterpret_facet',
    $nest: {
        [`.${styles_1.animation_start} &`]: {
            backgroundColor: 'firebrick'
        },
        [`.${styles_1.animation_start}.${styles_1.animation_active} &`]: {
            backgroundColor: 'inherit',
            transition: 'background-color 700ms linear'
        }
    }
});
// Have to manually merge interpreting_animation and would_interpret_facet_animation
// into a new class, because css will not do the right thing for an element
// with both classes.
// TODO: need some rule somewhere that recognizes when to swap out the
//  pair of classes and substitutes this single merged class.
exports.interpreting_and_facet_class = TypeStyle.style({
    $debugName: 'interpreting_and_facet',
    animationName: [interpreting_animation, would_interpret_facet_animation],
    animationDuration: ['2s', '2s'],
    animationIterationCount: ['infinite', 'infinite']
});
exports.unfocused_class = TypeStyle.style(styles_1.alpha_rule(0.4), {
    $nest: {
        '& .frame:not(&)': Object.assign({}, styles_1.alpha_rule(1.0))
    }
});


/***/ }),

/***/ "./src/typescript/demo_worlds/narrascope/supervenience_spec.ts":
/*!*********************************************************************!*\
  !*** ./src/typescript/demo_worlds/narrascope/supervenience_spec.ts ***!
  \*********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gist_1 = __webpack_require__(/*! gist */ "./src/typescript/gist/index.ts");
const history_1 = __webpack_require__(/*! ../../history */ "./src/typescript/history.ts");
const supervenience_1 = __webpack_require__(/*! ../../supervenience */ "./src/typescript/supervenience.ts");
const world_1 = __webpack_require__(/*! ../../world */ "./src/typescript/world.tsx");
const prelude_1 = __webpack_require__(/*! ./prelude */ "./src/typescript/demo_worlds/narrascope/prelude.ts");
exports.goals = [
    w => !!w.has_chill,
    w => !!w.has_recognized_something_wrong,
    w => !!w.is_curious_about_history,
    w => !!w.has_admitted_negligence,
    w => !!w.has_unpacked_culpability,
    w => !!w.has_volunteered,
    w => w.end
];
const gist_pat = ['consider', {
        subject: [gist_1.UNION,
            ['Sam'],
            ['your history with Sam']
        ]
    }];
exports.space = [
    w => {
        if (w.owner !== 'Metaphor') {
            return false;
        }
        let g = history_1.find_index(w, w.current_interpretation).gist;
        if (g === undefined) {
            return undefined;
        }
        if (gist_1.match(g)(gist_pat)) {
            return g;
        }
        return undefined;
    },
    w => w.has_tried,
    w => w.has_acquired,
    w => [!!w.has_chill, !!w.has_recognized_something_wrong, !!w.is_curious_about_history, !!w.has_admitted_negligence, !!w.has_unpacked_culpability, !!w.has_volunteered, !!w.end],
];
exports.command_filter = (w, cmd) => {
    if (cmd[0] && cmd[0].token === 'notes') {
        return false;
    }
    return true;
};
function get_thread_maker() {
    const venience_world_spec = prelude_1.resource_registry.get('venience_world_spec').get();
    return world_1.update_thread_maker(venience_world_spec);
}
exports.get_thread_maker = get_thread_maker;
function find_world_at(world, goals_met) {
    const thread_maker = get_thread_maker();
    let spec = {
        thread_maker,
        goals: exports.goals,
        space: exports.space,
        command_filter: exports.command_filter,
        simulator_id: 'playtester',
        search_id: 'reach-subgoal-' + goals_met
    };
    spec.goals = spec.goals.slice(0, goals_met);
    return supervenience_1.search_future(spec, world);
}
exports.find_world_at = find_world_at;


/***/ }),

/***/ "./src/typescript/devtools/index.ts":
/*!******************************************!*\
  !*** ./src/typescript/devtools/index.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function maybe_get_css_rules(s) {
    try {
        return s.cssRules;
    }
    catch (e) {
        return undefined;
    }
}
exports.get_matched_css_rules = (el, css = el.ownerDocument.styleSheets) => Array.from(css).flatMap((s) => maybe_get_css_rules(s) ? Array.from(s.cssRules) : []) /* 1 */
    .filter((r) => el.matches(r.selectorText)); /* 2 */
exports.GLOBAL_DEV_TOOLS = {
    get_matched_css_rules: exports.get_matched_css_rules
};
globalThis.devtools = exports.GLOBAL_DEV_TOOLS;


/***/ }),

/***/ "./src/typescript/entry_points/build_dev.tsx":
/*!***************************************************!*\
  !*** ./src/typescript/entry_points/build_dev.tsx ***!
  \***************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const narrascope_1 = __webpack_require__(/*! demo_worlds/narrascope */ "./src/typescript/demo_worlds/narrascope/index.ts");
const devtools_1 = __webpack_require__(/*! devtools */ "./src/typescript/devtools/index.ts");
const parser_1 = __webpack_require__(/*! parser */ "./src/typescript/parser/index.ts");
const typestyle_1 = __webpack_require__(/*! typestyle */ "./node_modules/typestyle/lib.es2015/index.js");
const UI_1 = __webpack_require__(/*! UI */ "./src/typescript/UI/index.ts");
const app_state_1 = __webpack_require__(/*! UI/app_state */ "./src/typescript/UI/app_state.ts");
devtools_1.GLOBAL_DEV_TOOLS.DEBUG = true;
function prepare_world() {
    console.time('world_build');
    let { initial_result, update, css_rules } = narrascope_1.new_venience_world();
    const DEBUG_COMMANDS = [
        'consider the present moment',
        'consider sam',
        'remember something meditative',
        'begin reflection on my memory of reflection',
    ];
    for (const cmd of DEBUG_COMMANDS) {
        initial_result = update(initial_result.world, parser_1.raw(cmd, true));
    }
    // Ability to start from a specific point in the demo:
    // const START_SOLVED = 0;
    // import { find_world_at } from './demo_worlds/narrascope/supervenience_spec';
    // import { raw } from './parser';
    // if (START_SOLVED > 0) {
    //     const starting_world = find_world_at(initial_result.world, START_SOLVED);
    //     initial_result = update(starting_world.result!, raw('', false));
    // }
    console.timeEnd('world_build');
    return { initial_result, update, css_rules };
}
console.time('render');
// if (css_rules !== undefined) {
//     let elt = document.querySelector('#custom-css-rules')! as HTMLStyleElement;
//     let sheet = elt.sheet! as CSSStyleSheet;
//     for (let rule of css_rules) {
//         sheet.insertRule(rule);
//     }
// }
const initial_state = app_state_1.initialize_app_state(prepare_world);
document.getElementById('terminal').appendChild(UI_1.initialize_app(initial_state));
typestyle_1.forceRenderStyles();
console.timeEnd('render');


/***/ }),

/***/ "./src/typescript/gist/dispatch.ts":
/*!*****************************************!*\
  !*** ./src/typescript/gist/dispatch.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gist_1 = __webpack_require__(/*! ./gist */ "./src/typescript/gist/gist.ts");
const stages_1 = __webpack_require__(/*! lib/stages */ "./src/typescript/lib/stages.ts");
const static_resources_1 = __webpack_require__(/*! lib/static_resources */ "./src/typescript/lib/static_resources.ts");
const pattern_1 = __webpack_require__(/*! ./pattern */ "./src/typescript/gist/pattern.ts");
class GistPatternDispatcher {
    constructor(index = stages_1.stages(), is_sealed = false) {
        this.index = index;
        this.is_sealed = is_sealed;
        this.callbacks = [];
    }
    [static_resources_1.IsSealed]() {
        return this.is_sealed;
    }
    [static_resources_1.Seal]() {
        if (this[static_resources_1.IsSealed]()) {
            throw new Error("Tried to reseal an already-sealed GistPatternDispatcher.");
        }
        this.is_sealed = true;
        this.callbacks.forEach(cb => cb(this));
    }
    [static_resources_1.OnSealed](f) {
        this.callbacks.push(f);
    }
    add_rule(pattern, impl, stage = 0) {
        if (this[static_resources_1.IsSealed]()) {
            throw new Error('Tried to add a rule to a sealed GistPatternDispatcher.');
        }
        if (!this.index.has(stage)) {
            this.index.set(stage, []);
        }
        // We use unshift so that more recently-added rules will be checked first.
        this.index.get(stage).unshift({
            pattern,
            impl
        });
        return this;
    }
    find(g) {
        if (!this[static_resources_1.IsSealed]()) {
            throw new Error('Tried to call find() on an unsealed GistPatternDispatcher.');
        }
        for (const rules of stages_1.stage_values(this.index)) {
            for (const rule of rules) {
                if (pattern_1.match(g)(rule.pattern)) {
                    return rule.impl;
                }
            }
        }
        return undefined;
    }
    find_all(g, fallthrough_stage) {
        function has_hit_fallthrough(stage) {
            return fallthrough_stage !== undefined && stage >= fallthrough_stage;
        }
        if (!this[static_resources_1.IsSealed]()) {
            throw new Error('Tried to call find_all() on an unsealed GistPatternDispatcher.');
        }
        const result = [];
        outer: for (const [stage, rules] of (this.index)) {
            if (has_hit_fallthrough(stage) && result.length > 0) {
                break;
            }
            for (const rule of rules) {
                if (pattern_1.match(g)(rule.pattern)) {
                    result.push(rule.impl);
                    if (has_hit_fallthrough(stage)) {
                        break outer;
                    }
                }
            }
        }
        if (result.length === 0) {
            console.log('WARNING: No handlers found during dispatch.');
        }
        return result;
    }
    dispatch(g) {
        if (!this[static_resources_1.IsSealed]()) {
            throw new Error('Tried to call dispatch() on an unsealed GistPatternDispatcher.');
        }
        const impl = this.find(g);
        if (impl === undefined) {
            throw new Error('Could not find a matching rule for gist ' + gist_1.gist_to_string(g));
        }
        return impl(g);
    }
    dispatch_all(g, fallthrough_stage) {
        if (!this[static_resources_1.IsSealed]()) {
            throw new Error('Tried to call dispatch_all() on an unsealed GistPatternDispatcher.');
        }
        return this.find_all(g, fallthrough_stage).map(impl => impl(g));
    }
}
exports.GistPatternDispatcher = GistPatternDispatcher;
class GistPatternUpdateDispatcher extends GistPatternDispatcher {
    apply(g, t) {
        if (!this[static_resources_1.IsSealed]()) {
            throw new Error('Tried to call apply() on an unsealed GistPatternDispatcher.');
        }
        return this.dispatch(g)(t);
    }
    apply_all(g, t, fallthrough_stage) {
        if (!this[static_resources_1.IsSealed]()) {
            throw new Error('Tried to call apply_all() on an unsealed GistPatternDispatcher.');
        }
        return this.dispatch_all(g, fallthrough_stage).reduce((prev, impl) => impl(prev), t);
    }
}
exports.GistPatternUpdateDispatcher = GistPatternUpdateDispatcher;


/***/ }),

/***/ "./src/typescript/gist/gist.ts":
/*!*************************************!*\
  !*** ./src/typescript/gist/gist.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = __webpack_require__(/*! lib/utils */ "./src/typescript/lib/utils.ts");
function gist(...ctor) {
    return ctor;
}
exports.gist = gist;
function gists_equal(g1, g2) {
    if (g1 === g2) {
        return true;
    }
    const [t1, c1, p1] = g1;
    const [t2, c2, p2] = g2;
    if (t1 !== t2) {
        return false;
    }
    if (p1 !== undefined && p2 !== undefined) {
        for (const k of utils_1.key_union(p1, p2)) {
            if (p1[k] !== p2[k]) {
                return false;
            }
        }
    }
    else if (p1 !== p2) {
        return false;
    }
    if (c1 !== undefined && c2 !== undefined) {
        for (const k of utils_1.key_union(c1, c2)) {
            if (c1[k] === undefined || c2[k] === undefined) {
                if (c1[k] !== c2[k]) {
                    return false;
                }
            }
            if (!gists_equal(c1[k], c2[k])) {
                return false;
            }
        }
    }
    else if (c1 !== c2) {
        return false;
    }
    return true;
}
exports.gists_equal = gists_equal;
function gist_to_string(g) {
    return JSON.stringify(g);
}
exports.gist_to_string = gist_to_string;
var GistAccessors;
(function (GistAccessors) {
    GistAccessors[GistAccessors["tag"] = 0] = "tag";
    GistAccessors[GistAccessors["children"] = 1] = "children";
    GistAccessors[GistAccessors["parameters"] = 2] = "parameters";
})(GistAccessors = exports.GistAccessors || (exports.GistAccessors = {}));


/***/ }),

/***/ "./src/typescript/gist/index.ts":
/*!**************************************!*\
  !*** ./src/typescript/gist/index.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./static_gist_types */ "./src/typescript/gist/static_gist_types.ts"));
__export(__webpack_require__(/*! ./gist */ "./src/typescript/gist/gist.ts"));
__export(__webpack_require__(/*! ./pattern */ "./src/typescript/gist/pattern.ts"));
__export(__webpack_require__(/*! ./dispatch */ "./src/typescript/gist/dispatch.ts"));
__export(__webpack_require__(/*! ./render */ "./src/typescript/gist/render.ts"));
const StaticGistTypes = __importStar(__webpack_require__(/*! ./static_gist_types */ "./src/typescript/gist/static_gist_types.ts"));
exports.StaticGistTypes = StaticGistTypes.StaticGistTypes;


/***/ }),

/***/ "./src/typescript/gist/pattern.ts":
/*!****************************************!*\
  !*** ./src/typescript/gist/pattern.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gist_1 = __webpack_require__(/*! ./gist */ "./src/typescript/gist/gist.ts");
const utils_1 = __webpack_require__(/*! lib/utils */ "./src/typescript/lib/utils.ts");
exports.FIND_DEEP = Symbol('FIND_DEEP');
exports.EXACT = Symbol('EXACT');
exports.EMPTY = Symbol('EMPTY');
exports.UNION = Symbol('UNION');
function gist_pattern(pattern) {
    return pattern;
}
exports.gist_pattern = gist_pattern;
function match(gist) {
    const _match = match;
    const g = gist;
    return (pattern) => {
        var _a, _b;
        if (pattern === undefined) {
            return g;
        }
        switch (pattern[0]) {
            case exports.EMPTY: {
                if (g === undefined) {
                    return g;
                }
                return false;
            }
            case exports.EXACT: {
                if (g === undefined) {
                    return false;
                }
                return gist_1.gists_equal(g, pattern[1]);
            }
            case exports.UNION: {
                const sub_pats = pattern.slice(1);
                for (const sub_pat of sub_pats) {
                    const result = _match(g)(sub_pat);
                    if (result !== false) {
                        return result;
                    }
                }
                return false;
            }
            case exports.FIND_DEEP: {
                if (g === undefined) {
                    return false;
                }
                const root_match = _match(g)(pattern[1]);
                if (root_match === false) {
                    return false;
                }
                //traverse children uhhhh, depth first, to find child.
                const frontier = [...utils_1.values((_a = g[1], (_a !== null && _a !== void 0 ? _a : {})))];
                while (frontier.length > 0) {
                    const child = frontier.pop();
                    const child_match = _match(child)(pattern[2]);
                    if (child_match !== false) {
                        return root_match;
                    }
                    frontier.push(...utils_1.values((_b = child[1], (_b !== null && _b !== void 0 ? _b : {}))));
                }
                return false;
            }
            default: {
                if (g === undefined) {
                    return false;
                }
                const [g_tag, g_children, g_params] = g;
                const [p_tag, p_children, p_params] = pattern;
                if (g_tag !== p_tag) {
                    return false;
                }
                if (p_params !== undefined) {
                    for (const [k, v] of utils_1.entries(p_params)) {
                        if (v instanceof Array) {
                            if (!v.includes(((g_params !== null && g_params !== void 0 ? g_params : {}))[k])) {
                                return false;
                            }
                        }
                        else {
                            if (v !== ((g_params !== null && g_params !== void 0 ? g_params : {}))[k]) {
                                return false;
                            }
                        }
                    }
                }
                if (p_children !== undefined) {
                    for (const [k, v] of utils_1.entries(p_children)) {
                        if (_match(((g_children !== null && g_children !== void 0 ? g_children : {}))[k])(v) === false) {
                            return false;
                        }
                    }
                }
                return g;
            }
        }
    };
}
exports.match = match;
function if_match(m, then) {
    if (m !== false) {
        return then(m);
    }
    return undefined;
}
exports.if_match = if_match;


/***/ }),

/***/ "./src/typescript/gist/render.ts":
/*!***************************************!*\
  !*** ./src/typescript/gist/render.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gist_1 = __webpack_require__(/*! ./gist */ "./src/typescript/gist/gist.ts");
const static_resources_1 = __webpack_require__(/*! lib/static_resources */ "./src/typescript/lib/static_resources.ts");
const utils_1 = __webpack_require__(/*! lib/utils */ "./src/typescript/lib/utils.ts");
const dispatch_1 = __webpack_require__(/*! ./dispatch */ "./src/typescript/gist/dispatch.ts");
const STATIC_GIST_RENDERER_NAMES = {
    noun_phrase: null,
    command_noun_phrase: null,
    command_verb_phrase: null
};
exports.GIST_RENDERER_DISPATCHERS = new static_resources_1.StaticMap(STATIC_GIST_RENDERER_NAMES);
for (const k of utils_1.keys(STATIC_GIST_RENDERER_NAMES)) {
    exports.GIST_RENDERER_DISPATCHERS.initialize(k, new dispatch_1.GistPatternDispatcher());
}
function GistRenderer(pattern, impls, stage = 0) {
    for (const [k, v] of utils_1.entries(impls)) {
        if (v !== undefined) {
            exports.GIST_RENDERER_DISPATCHERS.get(k).get_pre_runtime().add_rule(pattern, v, stage);
        }
    }
}
exports.GistRenderer = GistRenderer;
exports.render_gist = utils_1.map_values(STATIC_GIST_RENDERER_NAMES, (_, method_name) => ((g) => {
    const dispatcher = exports.GIST_RENDERER_DISPATCHERS.get(method_name).get();
    return dispatcher.dispatch(g);
}));
// export const GIST_RENDERER_INDEX = new StaticIndex<GistRendererRule>();
// export type GistRenderMethodsImpl<Tags extends ValidTags> = {    
//     [K in keyof GistRendererType]?:
//         | {
//             order: 'TopDown',
//             impl: (gist: Gists[Tags]) => GistRendererType[K]
//         }
//         | {
//             order: 'BottomUp',
//             impl: (
//                 tag: Tags,
//                 children: {[CK in keyof Gists[Tags]['children']]: GistRendererType[K]},
//                 parameters: Gists[Tags]['parameters']) => GistRendererType[K]
//         }
// }
// export function bottom_up<G extends Gist, R>(
//     g: Extract<Gist, G>,
//     f: (
//         tag: G[0],
//         children: {[CK in keyof G[1]]: R},
//         parameters: G[2]
//     ) => R,
//     render_child: (g: Gist) => R
// ): R {
//     return f(
//         g[0],
//         map_values(g[1], (c) => render_child(c)),
//         g[2]
//     )
// }
function bottom_up(g) {
    return function (f, render_child) {
        var _a;
        return f(g[0], utils_1.map_values((_a = g[1], (_a !== null && _a !== void 0 ? _a : {})), (c) => utils_1.if_not_null(c, render_child)), g[2]);
    };
}
exports.bottom_up = bottom_up;
// export function GistRenderer<PatternTags extends ValidTags>(pattern: GistPattern<PatternTags>, method_impls: GistRenderMethodsImpl<PatternTags>): GistRendererRule<PatternTags>;
// export function GistRenderer<Pat extends GistPattern, PatternTags extends InferPatternTags<Pat>>(pattern: Pat, method_impls: GistRenderMethodsImpl<PatternTags>): GistRendererRule<PatternTags>;
// export function GistRenderer(pattern: GistPattern, method_impls: GistRenderMethodsImpl<ValidTags>): GistRendererRule {
//     const result: GistRendererRule = {
//         pattern,
//         methods: {}
//     };
//     result.methods = map_values(method_impls, (impl, meth_name) => {
//         if (impl === undefined) {
//             return undefined;
//         }
//         if (impl.order === 'TopDown') {
//             return impl.impl as GistRenderMethods[typeof meth_name];
//         } else {
//             return ((gist: Gist) =>
//                 impl.impl(
//                     gist.tag,
//                     map_values(gist.children, (g) => (render_gist[meth_name] as any)(g)),
//                     gist.parameters
//                 )
//             ) as GistRenderMethods[typeof meth_name];
//         }
//     });
//     GIST_RENDERER_INDEX.add(result);
//     return result;
// }
// function render_for_method<MethodName extends keyof GistRendererType>(method: MethodName, gist_ctor: GistConstructor): GistRendererType[MethodName] {
//     const g = gist(gist_ctor);
//     const renderers = GIST_RENDERER_INDEX.all();
//     for (let i = renderers.length - 1; i >= 0; i--) {
//         const r = renderers[i];
//         if (gist_matches(g, r.pattern)) {
//             const m = r.methods[method];
//             if (m !== undefined) {
//                 return m(g) as GistRendererType[MethodName];
//             }
//         }
//     }
//     throw new Error('No renderers matched with the gist: ' + JSON.stringify(g));
// }
// the default renderer just prints out the gist tag.
GistRenderer(undefined, {
    noun_phrase: (g) => {
        const [tag, children, parameters] = [g[0], g[1], g[2]];
        if (Object.keys((children !== null && children !== void 0 ? children : {})).length > 0 || Object.keys((parameters !== null && parameters !== void 0 ? parameters : {})).length > 0) {
            throw new Error(`No noun_phrase renderer matched a compound gist: ${gist_1.gist_to_string(g)}`);
        }
        return tag;
    },
    command_noun_phrase: (g) => {
        const [tag, children, parameters] = [g[0], g[1], g[2]];
        if (Object.keys((children !== null && children !== void 0 ? children : {})).length > 0 || Object.keys((parameters !== null && parameters !== void 0 ? parameters : {})).length > 0) {
            throw new Error(`No command_noun_phrase renderer matched a compound gist: ${gist_1.gist_to_string(g)}`);
        }
        return tag.replace(/ /g, '_');
    },
    command_verb_phrase: (g) => {
        throw new Error(`No command_verb_phrase renderer matched a gist. (Verb phrases don't have default behavior even for atomic gists.) Gist: ${gist_1.gist_to_string(g)}`);
    }
}, 5);
// export const render_gist: GistRenderMethods =
//     map_values(STATIC_GIST_RENDERER_NAMES,
//         (_, method_name) =>
//             ((g: GistConstructor) => render_for_method(method_name, g)) as GistRenderMethods[typeof method_name]);


/***/ }),

/***/ "./src/typescript/gist/static_gist_types.ts":
/*!**************************************************!*\
  !*** ./src/typescript/gist/static_gist_types.ts ***!
  \**************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = __webpack_require__(/*! lib/utils */ "./src/typescript/lib/utils.ts");
utils_1.enforce_always_never(// Static check that when StaticGistTypes is extended, it is done correctly
null);


/***/ }),

/***/ "./src/typescript/history.ts":
/*!***********************************!*\
  !*** ./src/typescript/history.ts ***!
  \***********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function find_historical(world, f) {
    let w = world;
    while (w !== undefined) {
        if (f(w)) {
            return w;
        }
        w = w.previous;
    }
    return undefined;
}
exports.find_historical = find_historical;
function find_historical_all(world, f) {
    const result = [];
    let w = world;
    while (w !== undefined) {
        if (f(w)) {
            result.push(w);
        }
        w = w.previous;
    }
    return result;
}
exports.find_historical_all = find_historical_all;
function find_index(world, index) {
    return find_historical(world, w => w.index === index);
}
exports.find_index = find_index;
function indices_where(world, f) {
    return find_historical_all(world, f).map(w => w.index);
}
exports.indices_where = indices_where;
// When mapping or filtering history, simply converting to an array is easier than
// reimplementing all the various traversal methods on the linked list
function history_array(world, take_while) {
    let w = world;
    let result = [];
    while (w !== undefined) {
        if (take_while !== undefined && !take_while(w)) {
            break;
        }
        result.push(w);
        w = w.previous;
    }
    return result;
}
exports.history_array = history_array;


/***/ }),

/***/ "./src/typescript/knowledge/index.ts":
/*!*******************************************!*\
  !*** ./src/typescript/knowledge/index.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! knowledge/knowledge */ "./src/typescript/knowledge/knowledge.ts"));


/***/ }),

/***/ "./src/typescript/knowledge/knowledge.ts":
/*!***********************************************!*\
  !*** ./src/typescript/knowledge/knowledge.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const story_1 = __webpack_require__(/*! story */ "./src/typescript/story/index.ts");
const assoc_1 = __webpack_require__(/*! ../lib/assoc */ "./src/typescript/lib/assoc.ts");
const gist_1 = __webpack_require__(/*! gist */ "./src/typescript/gist/index.ts");
const update_1 = __webpack_require__(/*! ../lib/update */ "./src/typescript/lib/update.ts");
const stages_1 = __webpack_require__(/*! ../lib/stages */ "./src/typescript/lib/stages.ts");
const utils_1 = __webpack_require__(/*! ../lib/utils */ "./src/typescript/lib/utils.ts");
const iterative_1 = __webpack_require__(/*! iterative */ "./node_modules/iterative/dist/index.js");
;
gist_1.gist('knowledge', { content: ['Sam'] });
// It's always an error to render a pure knowledge gist.
// It always has to be wrapped or unpacked as something "observable" for the player.
gist_1.GistRenderer(['knowledge'], {
    noun_phrase: g => {
        debugger;
        throw new Error('Tried to render a pure knowledge gist as a noun_phrase: ' + gist_1.gist_to_string(g));
    },
    command_noun_phrase: g => {
        throw new Error('Tried to render a pure knowledge gist as a command_noun_phrase: ' + gist_1.gist_to_string(g));
    },
    command_verb_phrase: g => {
        throw new Error('Tried to render a pure knowledge gist as a command_verb_phrase: ' + gist_1.gist_to_string(g));
    }
});
class GistAssoc extends assoc_1.AssocList {
    key_equals(k1, k2) {
        return gist_1.gists_equal(k1, k2);
    }
}
exports.GistAssoc = GistAssoc;
// type ExactKnowledgeQuery = {
//     kind: 'Exact';
//     gist: Gist;
// };
// type PatternKnowledgeQuery = {
//     kind: 'Pattern';
//     pattern: GistPattern;
// };
// type KnowledgeQuery = (
//     | ExactKnowledgeQuery
//     | PatternKnowledgeQuery
// );
class Knowledge {
    constructor(knowledge = new GistAssoc([])) {
        this.knowledge = knowledge;
    }
    // get_entries_exact(g: Gist): KnowledgeAssoc {
    //     const knowledge_gist = convert_to_knowledge_gist(g);
    //     return this.knowledge.filter(k => gists_equal(k, knowledge_gist));
    // }
    // get_entries_pattern(pat: GistPattern): KnowledgeAssoc {
    //     const knowledge_pat: GistPattern<'knowledge'> = convert_to_knowledge_pattern(pat);
    //     return this.knowledge.filter(k => match(k)(knowledge_pat));
    // }
    get_entries(p) {
        const kp = convert_to_knowledge_pattern(p);
        return this.knowledge.filter(k => gist_1.match(k)(kp));
    }
    get_entry(p) {
        const matches = this.get_entries(p);
        if (matches.data.length > 1) {
            debugger;
            throw new Error(`Ambiguous knowledge query: ${JSON.stringify(p)}. Found ${matches.data.length} matching entries. Try passing a knowledge key with explicit parent context.`);
        }
        if (matches.data.length === 0) {
            return undefined;
        }
        return matches.data[0].value;
    }
    get(p) {
        var _a;
        return (_a = this.get_entry(p)) === null || _a === void 0 ? void 0 : _a.story;
    }
    get_exact(gist) {
        return this.get([gist_1.EXACT, gist]);
    }
    ingest(story_or_func, parent_context, allow_replace = false) {
        let result = this;
        // for (const story_or_func of stories) {
        const story = utils_1.compute_const(() => {
            if (typeof story_or_func === 'function') {
                return story_or_func(result);
            }
            return story_or_func;
        });
        if (!story_1.is_story_node(story)) {
            throw new Error('Passed a non-StoryNode to ingest().');
        }
        if (story.data.gist === undefined) {
            throw new Error('Passed a story node without a gist to initialize().');
        }
        const g = story.data.gist;
        if (g[0] === 'knowledge') {
            throw new Error('Gist must not be a pure knowledge gist. "knowledge" is a special tag used internally by the knowledge base only.');
        }
        const k = ['knowledge', { content: g, context: parent_context }];
        const old_entry = this.get_entry([gist_1.EXACT, k]);
        if (old_entry !== undefined) {
            if (story_1.structurally_equal(story, old_entry.story)) {
                console.log('saving time by skipping a knowledge subtree update');
                return result;
            }
            else if (!allow_replace) {
                throw new Error(`Tried to overwrite the knowledge entry for ${gist_1.gist_to_string(k)}`);
            }
            else {
                console.log('replacing knowledge entry for ' + gist_1.gist_to_string(k));
            }
        }
        const child_knowledge = immediate_child_gists().query(story);
        for (const [c, path] of child_knowledge) {
            result = result.ingest(c, k);
        }
        const child_gists = story_1.sort_targets(child_knowledge).map(([node, path]) => gist_1.gist('knowledge', { content: node.data.gist, context: k }));
        if (old_entry !== undefined) {
            for (const old_child of old_entry.children) {
                if (child_gists.find(c => gist_1.gists_equal(c, old_child)) === undefined) {
                    // prune the parentless child from the knowledge base
                    console.log('pruning an orphaned child: ' + gist_1.gist_to_string(old_child));
                    result = result.delete(old_child);
                }
            }
        }
        let new_knowledge = result.knowledge.set(k, {
            key: k,
            story,
            story_updates: [],
            children: child_gists
        });
        return new (this.constructor)(new_knowledge);
    }
    delete(k) {
        return new (this.constructor)(this.knowledge.delete(k));
    }
    update(p, f) {
        const old_entries = this.get_entries(p);
        // if (old_entries.data.length === 0) {
        //     throw new Error('Tried to update a non-existent knowledge entry: ' + JSON.stringify(q));
        // }
        const new_entries = old_entries.map(old_entry => {
            const g = old_entry.key;
            const updates = f(story_1.Updates.has_gist([gist_1.EXACT, g[1].content]));
            //const updates = f(S.story_root());
            const new_entry = update_1.update(old_entry, {
                story_updates: story_1.story_updater(updates)
            });
            return new_entry;
        });
        return new (this.constructor)(this.knowledge.set_many(new_entries.data));
    }
    bottom_up_order() {
        const result = [];
        const remaining = this.knowledge.keys();
        while (remaining.length > 0) {
            const g = remaining.pop();
            const { children: cs } = this.knowledge.get(g);
            // if every child is already included in the results, append the parent to the results.
            if (cs.every(c => result.some(r => gist_1.gists_equal(c, r)))) {
                result.push(g);
            }
            else { // else stick the parent at the end of the line to try again later.
                remaining.unshift(g);
            }
        }
        return result;
    }
    consolidate() {
        var _a, _b, _c, _d;
        // TODO: Apply updates in stage order.
        const bottom_up_order = this.bottom_up_order();
        const gist_plans = [];
        for (const g of bottom_up_order) {
            const entry = this.knowledge.get(g);
            gist_plans.push(story_1.compile_story_update_group_ops(entry.story_updates));
        }
        const stage_levels = stages_1.merge_keys(gist_plans.map(p => p.effects));
        let result = this;
        for (const level of stage_levels) {
            for (let [g, gist_update_plan] of iterative_1.zip(bottom_up_order, gist_plans)) {
                const entry = result.knowledge.get(g);
                const children = entry.children;
                const child_replace_ops = [];
                for (const c of children) {
                    const prev_entry = this.knowledge.get(c);
                    const child_entry = result.knowledge.get(c);
                    // this child had no updates
                    if (prev_entry === child_entry) {
                        continue;
                    }
                    child_replace_ops.push(immediate_child_gists(c[1].content)
                        .group_stage(level)
                        .replace([child_entry.story]));
                }
                let plan = utils_1.compute_const(() => {
                    if (child_replace_ops.length === 0) {
                        return undefined;
                    }
                    return story_1.compile_story_update_group_ops(child_replace_ops);
                });
                const gist_updates = gist_update_plan.effects.get(level);
                if (gist_updates !== undefined) {
                    if (plan === undefined) {
                        plan = gist_update_plan;
                    }
                    else {
                        plan = update_1.update(plan, {
                            effects: stages_1.stages([level, utils_1.append(...gist_updates)])
                        });
                    }
                }
                const updates = (_d = (_b = (_a = plan) === null || _a === void 0 ? void 0 : _a.effects) === null || _b === void 0 ? void 0 : (_c = _b).get) === null || _d === void 0 ? void 0 : _d.call(_c, level);
                if (updates !== undefined) {
                    const new_story = story_1.apply_story_updates_stage(entry.story, updates, undefined, level);
                    result = result.ingest(new_story, entry.key[1].context, true);
                    // TODO Prune any orphaned entries
                }
            }
        }
        return result;
    }
    push_updates(builder) {
        const result = this.bottom_up_order().flatMap(g => {
            const us = this.knowledge.get(g).story_updates;
            const selector = knowledge_selector(g);
            return us.map(u => builder.chain(selector).prepend_to(u));
        });
        return result;
    }
}
exports.Knowledge = Knowledge;
function immediate_child_gists(child_pattern) {
    return story_1.Updates.first_level(story_1.Updates
        .children()
        .has_gist(child_pattern));
}
exports.immediate_child_gists = immediate_child_gists;
function knowledge_selector(g) {
    const parent_stack = [];
    let ptr = g;
    while (ptr !== undefined) {
        parent_stack.unshift(ptr);
        ptr = ptr[1].context;
    }
    // for the topmost parent, it doesn't have to be a step removed from the root.
    let builder = story_1.Updates.has_gist(parent_stack.shift()[1].content);
    for (const parent of parent_stack) {
        builder = builder.chain(immediate_child_gists(parent[1].content));
    }
    return builder;
}
exports.knowledge_selector = knowledge_selector;
function knowledge_gist(content0, ...content) {
    return _knowledge_gist(content0, ...content);
}
exports.knowledge_gist = knowledge_gist;
function _knowledge_gist(...content) {
    if (content.length === 0) {
        return undefined;
    }
    return ['knowledge', { content: content.shift(), context: _knowledge_gist(...content) }];
}
// export function convert_to_knowledge_gist(gist: Gist): Gists['knowledge'] {
//     if (gist[0] === 'knowledge') {
//         return gist;
//     }
//     return ['knowledge', { content: gist }];
// }
function convert_to_knowledge_pattern(pat) {
    if (pat === undefined) {
        return pat;
    }
    switch (typeof pat[0]) {
        case 'string': {
            if (pat[0] === 'knowledge') {
                return pat;
            }
            return ['knowledge', { content: pat }];
        }
        case 'symbol': {
            switch (pat[0]) {
                case gist_1.UNION: {
                    const [, ...tail] = pat;
                    const converted_tail = tail.map(convert_to_knowledge_pattern);
                    if (utils_1.is_shallow_equal(tail, converted_tail)) {
                        return pat;
                    }
                    return [gist_1.UNION, ...tail.map(convert_to_knowledge_pattern)];
                }
                case gist_1.FIND_DEEP: {
                    const root_pat = convert_to_knowledge_pattern(pat[1]);
                    if (root_pat === pat[1]) {
                        return pat;
                    }
                    return ['knowledge', { content: pat }];
                }
                case gist_1.EXACT: {
                    if (pat[1][0] === 'knowledge') {
                        return pat;
                    }
                    // this is a shortcut for "exactly this gist with no parent context"
                    return [gist_1.EXACT, ['knowledge', { content: pat[1] }]];
                }
            }
        }
    }
}
exports.convert_to_knowledge_pattern = convert_to_knowledge_pattern;
function make_knowledge_puffer({ get_knowledge, set_knowledge, get_dynamic_region, push_updates_stage }) {
    return {
        pre: (w) => {
            //consolidate all knowledge updates into the story trees for each entry
            return set_knowledge(w, get_knowledge(w).consolidate());
        },
        post: stages_1.stages([(push_updates_stage !== null && push_updates_stage !== void 0 ? push_updates_stage : 2), (w) => {
                const selector = get_dynamic_region(w);
                if (selector === undefined) {
                    return w;
                }
                return update_1.update(w, {
                    story_updates: story_1.story_updater(get_knowledge(w).push_updates(selector))
                });
            }
        ])
    };
}
exports.make_knowledge_puffer = make_knowledge_puffer;
/*
    TODO: Try out this knowledge base, but getting and updating are done using
    GistPatterns, not Gists. Insertion still uses Gists.

    Given a pattern, you'd need to find the *most specific* matching gist, not just the first one.
    There would be ties. Unsure if you'd want to prioritize the context-level
    specificity before the content-level, or vice-versa?
*/ 


/***/ }),

/***/ "./src/typescript/lib/adt_utils.ts":
/*!*****************************************!*\
  !*** ./src/typescript/lib/adt_utils.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.TagName = Symbol();
function make_adt(tag_name, check) {
    return new Proxy({}, {
        get: (x, tag) => (props) => (Object.assign({ [tag_name]: tag }, props))
    });
}
exports.make_adt = make_adt;
const ctors = make_adt('kind', null);


/***/ }),

/***/ "./src/typescript/lib/assoc.ts":
/*!*************************************!*\
  !*** ./src/typescript/lib/assoc.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class AssocList {
    constructor(data) {
        this.data = data;
    }
    key_equals(k1, k2) {
        return k1 === k2;
    }
    find_index(k) {
        return this.data.findIndex(({ key }) => this.key_equals(key, k));
    }
    filter(predicate) {
        return new (this.constructor)(this.data.filter(({ key }) => predicate(key)));
    }
    find(predicate) {
        var _a;
        return (_a = this.data.find(({ key, value }) => predicate(key))) === null || _a === void 0 ? void 0 : _a.value;
    }
    set(k, v) {
        const idx = this.find_index(k);
        const new_data = [...this.data];
        if (idx === -1) {
            new_data.push({ key: k, value: v });
        }
        else {
            new_data[idx] = { key: new_data[idx].key, value: v };
        }
        return new (this.constructor)(new_data);
    }
    set_many(new_data) {
        const updated_data = [...this.data];
        for (const entry of new_data) {
            const idx = this.find_index(entry.key);
            if (idx === -1) {
                updated_data.push(entry);
            }
            else {
                updated_data[idx] = { key: updated_data[idx].key, value: entry.value };
            }
        }
        return new (this.constructor)(updated_data);
    }
    get(k) {
        const idx = this.find_index(k);
        if (idx === -1) {
            return undefined;
        }
        else {
            return this.data[idx].value;
        }
    }
    delete(k) {
        const idx = this.find_index(k);
        if (idx === -1) {
            return this;
        }
        const new_data = [...this.data];
        new_data.splice(idx, 1);
        return new (this.constructor)(new_data);
    }
    map(f) {
        const new_data = this.data.map((entry) => ({
            key: entry.key,
            value: f(entry.value, entry.key)
        }));
        return new (this.constructor)(new_data);
    }
    [Symbol.iterator]() {
        return this.data[Symbol.iterator]();
    }
    keys() {
        return this.data.map(e => e.key);
    }
    values() {
        return this.data.map(e => e.value);
    }
}
exports.AssocList = AssocList;


/***/ }),

/***/ "./src/typescript/lib/cache.ts":
/*!*************************************!*\
  !*** ./src/typescript/lib/cache.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const DEFAULT_MAX_SIZE = 20;
class LruCacheObj {
    constructor(max_size = DEFAULT_MAX_SIZE) {
        this.max_size = max_size;
        this.key_order = [];
        this.map = new WeakMap();
    }
    has(key) {
        return this.map.has(key);
    }
    get(key) {
        if (!this.has(key)) {
            return undefined;
        }
        this.move_to_front(key);
        return this.map.get(key);
    }
    move_to_front(key) {
        const idx = this.key_order.indexOf(key);
        if (idx === -1) {
            throw new Error("Tried to move a key to the front which isn't even there.");
        }
        if (idx !== this.key_order.length - 1) {
            this.key_order.push(...this.key_order.splice(idx, 1));
        }
    }
    set(key, value) {
        if (!this.has(key)) {
            if (this.key_order.length === this.max_size) {
                const shed_key = this.key_order.shift();
                this.map.delete(shed_key);
                // console.count('shed a key in lru');
            }
            this.key_order.push(key);
            this.map.set(key, value);
        }
        else {
            this.move_to_front(key);
        }
    }
}
exports.LruCacheObj = LruCacheObj;


/***/ }),

/***/ "./src/typescript/lib/dsl_utils.ts":
/*!*****************************************!*\
  !*** ./src/typescript/lib/dsl_utils.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = __webpack_require__(/*! ./utils */ "./src/typescript/lib/utils.ts");
function make_dsl(prop_builder, call_builder) {
    const handlers = {
        get: (a, name) => prop_builder(name)
    };
    if (call_builder !== undefined) {
        handlers.apply = (target, t, args) => call_builder(...args);
    }
    return new Proxy({}, handlers);
}
exports.make_dsl = make_dsl;
const CONTEXT_MAP = new WeakMap();
function contextual_function(decl, init_context) {
    const with_context = ((init_context) => {
        if (init_context === undefined) {
            throw new Error('Contextual Function was invoked without binding it to a context.');
        }
        let key;
        function set_context(c) {
            if (!CONTEXT_MAP.has(key)) {
                throw new Error('Funny business detected. Called set_context before the call of the contextual function.');
            }
            CONTEXT_MAP.set(key, c);
            return c;
        }
        function get_context() {
            if (!CONTEXT_MAP.has(key)) {
                throw new Error('Funny business detected. Called get_context before the call of the contextual function.');
            }
            return CONTEXT_MAP.get(key);
        }
        const contextual_function = ((...params) => {
            key = {};
            set_context(init_context);
            const f = decl(get_context);
            const result = f(...params);
            return result;
        });
        contextual_function.with_context = with_context;
        return contextual_function;
    });
    return with_context(init_context);
}
exports.contextual_function = contextual_function;
function is_contextual_function(cf) {
    return cf.with_context !== undefined;
}
function with_context(cf, new_context) {
    if (is_contextual_function(cf)) {
        return cf.with_context(new_context);
    }
    return cf;
}
exports.with_context = with_context;
function bind(cf, f2) {
    return contextual_function((ctx) => () => {
        return f2(with_context(cf, ctx()));
    });
}
exports.bind = bind;
function bind_all(cfs, f2) {
    return contextual_function((ctx) => () => {
        const c = ctx();
        const bound_cfs = utils_1.lazy_map_values(cfs, (cf) => with_context(cf, c));
        return f2(bound_cfs);
    });
}
exports.bind_all = bind_all;


/***/ }),

/***/ "./src/typescript/lib/effect_utils.ts":
/*!********************************************!*\
  !*** ./src/typescript/lib/effect_utils.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
class Effects {
    constructor(value, parent) {
        this.parent = parent;
        this._promise = Promise.resolve(value);
    }
    get promise() {
        return this._promise;
    }
    then(f) {
        const child_promise = this.promise.then(f);
        this.push(async (t) => {
            await child_promise;
            return t;
        });
        return new Effects(child_promise, this);
    }
    push(f) {
        this._promise = this.promise.then(t => {
            const r = f(t);
            if (r === undefined || r === null) {
                return t;
            }
            return r;
        });
        if (this.parent) {
            this.parent.push(async (t) => {
                await this._promise;
                return t;
            });
        }
        return this;
    }
}
exports.Effects = Effects;
exports.set_timeout = (ms = 0) => new Promise(resolve => setTimeout(resolve, ms));
exports.request_animation_frame = () => new Promise(requestAnimationFrame);


/***/ }),

/***/ "./src/typescript/lib/gensym.ts":
/*!**************************************!*\
  !*** ./src/typescript/lib/gensym.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
let state = 100000;
const prefix = 'gensym-';
function gensym() {
    return (prefix + state++);
}
exports.gensym = gensym;
function set_state(s) {
    if (s < state) {
        throw new Error("Cannot set gensym state below previous value.");
    }
    state = s;
}
exports.set_state = set_state;
/*
    Only guarantees that no future calls to gensym will duplicate this symbol,
    it is still possible that the symbol being parsed was generated earlier
*/
function parse_gensym(s) {
    let new_state = gensym_value(s);
    if (new_state >= state) {
        set_state(new_state + 1);
    }
    return s;
}
exports.parse_gensym = parse_gensym;
function gensym_value(s) {
    let new_state = parseInt(s.replace(prefix, ''));
    if (new_state == NaN) {
        throw new Error(`Tried to parse invalid gensym: ${s}`);
    }
    return new_state;
}
exports.gensym_value = gensym_value;


/***/ }),

/***/ "./src/typescript/lib/jsx_utils.ts":
/*!*****************************************!*\
  !*** ./src/typescript/lib/jsx_utils.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = __webpack_require__(/*! ./utils */ "./src/typescript/lib/utils.ts");
function set_attributes(element, attributes) {
    for (const [attr, value] of utils_1.entries(attributes)) {
        if (attr === 'className') {
            element.setAttribute('class', value);
        }
        else if (attr === 'style') {
            const style = element.style;
            for (const style_pair of utils_1.entries(value)) {
                utils_1.set_prop(style, ...style_pair);
            }
        }
        else if (attr === 'on') {
            for (const [ev_name, handler] of utils_1.entries(value)) {
                element.addEventListener(ev_name, handler);
            }
        }
        else {
            element.setAttribute(attr, value);
        }
    }
}
exports.set_attributes = set_attributes;
function remove_custom_props(props, custom_keys) {
    const result = Object.assign({}, props);
    for (const k of utils_1.keys(custom_keys)) {
        delete result[k];
    }
    return result;
}
exports.remove_custom_props = remove_custom_props;


/***/ }),

/***/ "./src/typescript/lib/keyboard_utils.ts":
/*!**********************************************!*\
  !*** ./src/typescript/lib/keyboard_utils.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
exports.keys = {
    tab: 9,
    enter: 13,
    left: 37,
    up: 38,
    right: 39,
    down: 40
};


/***/ }),

/***/ "./src/typescript/lib/stages.ts":
/*!**************************************!*\
  !*** ./src/typescript/lib/stages.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = __webpack_require__(/*! ./utils */ "./src/typescript/lib/utils.ts");
class Stages extends Map {
}
exports.Stages = Stages;
function stages(...args) {
    return new Stages(args);
}
exports.stages = stages;
function array_to_stages(arr) {
    return stages(...arr.map((x, i) => [i, x]));
}
exports.array_to_stages = array_to_stages;
function is_stages(x) {
    return x instanceof Stages;
}
exports.is_stages = is_stages;
function normalize_stages(x) {
    if (x === undefined) {
        return new Stages();
    }
    if (is_stages(x)) {
        return x;
    }
    return stages([0, x]);
}
exports.normalize_stages = normalize_stages;
function stage_keys(x) {
    return [...x.keys()].sort((a, b) => a - b);
}
exports.stage_keys = stage_keys;
function merge_keys(x) {
    const ks = new Set(x.flatMap(s => [...s.keys()]));
    return [...ks].sort((a, b) => a - b);
}
exports.merge_keys = merge_keys;
function stage_values(x) {
    return stage_keys(x).map(s => x.get(s));
}
exports.stage_values = stage_values;
function stage_entries(x) {
    return stage_keys(x).map(s => [s, x.get(s)]);
}
exports.stage_entries = stage_entries;
function map_stages(x, f) {
    return stages(...stage_entries(x).map(([s, t]) => [s, f(t, s)]));
}
exports.map_stages = map_stages;
function foreach_stages(x, f) {
    for (let [stage, t] of stage_entries(x)) {
        f(t, stage);
    }
}
exports.foreach_stages = foreach_stages;
function merge_stages(x, reducer, init, stage_limit) {
    if (is_stages(x)) {
        let result = init;
        for (let stage of stage_keys(x)) {
            if (stage_limit === undefined || stage <= stage_limit) {
                result = reducer(result, x.get(stage));
            }
            else {
                break;
            }
        }
        return result;
    }
    else {
        return x;
    }
}
exports.merge_stages = merge_stages;
// export function find_and_move_to_stage<X extends unknown[]>(obj: Stages<X>, find: (x: X[number]) => boolean, update: (n: number) => number): Stages<X> {
function find_and_move_to_stage(obj, find, update) {
    let result = stages(...obj);
    let additions = stages();
    for (let [stage, xs] of stage_entries(obj)) {
        let to_move = xs.filter(x => find(x));
        let to_keep = xs.filter(x => !find(x));
        if (to_move.length > 0) {
            additions.set(update(stage), to_move);
            result.set(stage, to_keep);
        }
    }
    for (let [stage, moved_xs] of stage_entries(additions)) {
        let xs = result.get(stage);
        if (xs === undefined) {
            result.set(stage, moved_xs);
        }
        else {
            xs.push(...moved_xs);
        }
    }
    return result;
}
exports.find_and_move_to_stage = find_and_move_to_stage;
function make_consecutive(objs) {
    return array_to_stages(objs.flatMap(s => stage_values(s)));
}
exports.make_consecutive = make_consecutive;
;
function is_stree_branch(x) {
    return x instanceof Stages;
}
exports.is_stree_branch = is_stree_branch;
function stree_to_array(stree) {
    if (stree === undefined) {
        return [];
    }
    else if (is_stree_branch(stree)) {
        return stage_values(stree).flatMap(x => stree_to_array(x));
    }
    else {
        return [stree];
    }
}
exports.stree_to_array = stree_to_array;
function stree_find(stree, f) {
    if (is_stree_branch(stree)) {
        for (const [stage, x] of stage_entries(stree)) {
            const child_path = stree_find(x, f);
            if (child_path !== undefined) {
                return [stage, ...child_path];
            }
        }
        return undefined;
    }
    if (stree === undefined) {
        return undefined;
    }
    return f(stree) ? [] : undefined;
}
exports.stree_find = stree_find;
function stree_find_all(stree, f) {
    const result = [];
    if (is_stree_branch(stree)) {
        for (const [stage, x] of stage_entries(stree)) {
            const child_paths = stree_find_all(x, f);
            result.push(...child_paths.map(p => [stage, ...p]));
        }
    }
    else if (stree !== undefined && f(stree)) {
        result.push([]);
    }
    return result;
}
exports.stree_find_all = stree_find_all;
function stree_get(stree, path) {
    let node = stree;
    for (const i of path) {
        if (node === undefined) {
            break;
        }
        else if (is_stree_branch(node)) {
            node = node.get(i);
        }
        else {
            if (i !== 0) {
                break;
            }
        }
    }
    return node;
}
exports.stree_get = stree_get;
function stree_cut(stree, path) {
    if (path.length === 0) {
        return [undefined, stree];
    }
    const i = path[0];
    if (is_stree_branch(stree)) {
        if (!stree.has(i)) {
            return [stree, undefined];
        }
        let [child, found] = stree_cut(stree.get(i), path.slice(1));
        if (found === undefined) {
            return [stree, undefined];
        }
        return [stages(...stree, [i, child]), found];
    }
    else {
        if (i === 0) {
            return stree_cut(stree, path.slice(1));
        }
        return [stree, undefined];
    }
}
exports.stree_cut = stree_cut;
function stree_append(stree, x, path = []) {
    let result;
    if (stree === undefined) {
        result = undefined;
    }
    else if (is_stages(stree)) {
        result = stages(...stree);
    }
    else {
        result = stages([0, stree]);
    }
    if (path.length === 0) {
        if (result === undefined) {
            return x;
        }
        else {
            let idx = utils_1.array_last(stage_keys(result));
            if (idx === undefined) {
                idx = 0;
            }
            else {
                idx += 1;
            }
            result.set(idx, x);
        }
    }
    else {
        if (result === undefined) {
            result = stages();
        }
        const i = path[0];
        result.set(i, stree_append(result.get(i), x, path.slice(1)));
    }
    return result;
}
exports.stree_append = stree_append;
function stree_move(stree, from, to) {
    const [stree2, child] = stree_cut(stree, from);
    return stree_append(stree2, child, to);
}
exports.stree_move = stree_move;


/***/ }),

/***/ "./src/typescript/lib/static_resources.ts":
/*!************************************************!*\
  !*** ./src/typescript/lib/static_resources.ts ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = __webpack_require__(/*! ./utils */ "./src/typescript/lib/utils.ts");
exports.IsSealed = Symbol('IsSealed');
exports.Seal = Symbol('Seal');
exports.OnSealed = Symbol('OnSealed');
function is_sealable(x) {
    return (exports.IsSealed in x) && (exports.Seal in x);
}
class StaticResource {
    constructor(resource_name) {
        this.state = 'Uninitialized';
        this.on_seal_callbacks = [];
        this.resource_name = resource_name;
    }
    assert_state(expected_state) {
        if (this.state !== expected_state) {
            throw new Error(`Assert failed: ${this.resource_name} was expected to have state ${expected_state}. Actual state: ${this.state}`);
        }
    }
    assert_state_not(expected_state) {
        if (this.state === expected_state) {
            throw new Error(`Assert failed: ${this.resource_name} was expected not to have state ${expected_state}. Actual state: ${this.state}`);
        }
    }
    [exports.IsSealed]() {
        return this.state === 'Sealed';
    }
    initialize(value) {
        this.assert_state('Uninitialized');
        this.value = value;
        this.state = 'Initialized';
    }
    update(f) {
        this.assert_state('Initialized');
        this.value = f(this.value);
    }
    [exports.Seal]() {
        this.assert_state('Initialized');
        if (is_sealable(this.value) && !this.value[exports.IsSealed]()) {
            this.value[exports.Seal]();
        }
        this.state = 'Sealed';
        this.on_seal_callbacks.forEach(cb => cb(this));
    }
    get() {
        this.assert_state('Sealed');
        return this.value;
    }
    get_pre_runtime() {
        return this.value;
    }
    [exports.OnSealed](f) {
        this.on_seal_callbacks.push(f);
    }
}
exports.StaticResource = StaticResource;
class StaticMap {
    constructor(static_name_index, mappers = []) {
        this.static_name_index = static_name_index;
        this.mappers = mappers;
        this.callbacks = [];
        this.sealed = false;
        this.resources = {};
        for (let name of utils_1.keys(static_name_index)) {
            this.create(name);
        }
    }
    create(name) {
        if (this.sealed) {
            throw new Error('Tried to create new resources on a sealed registry.');
        }
        if (name in this.resources) {
            throw new Error('Tried to create resource with duplicate name: ' + name);
        }
        let resource = new StaticResource(name);
        this.resources[name] = resource;
        return resource;
    }
    initialize(name, value, ...on_seal_callbacks) {
        if (this.sealed) {
            throw new Error('Tried to create new resources on a sealed registry.');
        }
        if (!(name in this.resources)) {
            throw new Error('Tried to initialize uncreated resource: ' + name);
        }
        let resource = this.get(name);
        let processed = this.mappers.reduce((acc, f) => f(acc), value);
        resource.initialize(processed);
        on_seal_callbacks.forEach(cb => resource[exports.OnSealed](cb));
        return resource;
        // return processed;
    }
    [exports.IsSealed]() {
        return this.sealed;
    }
    [exports.Seal]() {
        if (this[exports.IsSealed]()) {
            throw new Error('Tried to reseal resource registry.');
        }
        this.assert_contents_not_uninitialized();
        Object.values(this.resources).forEach((r) => {
            if (!r[exports.IsSealed]()) {
                r[exports.Seal]();
            }
        });
        this.sealed = true;
        this.callbacks.forEach(cb => cb(this));
    }
    [exports.OnSealed](f) {
        this.callbacks.push(f);
    }
    assert_contents_not_uninitialized() {
        Object.values(this.resources).forEach((r) => {
            r.assert_state_not('Uninitialized');
        });
    }
    // get<K extends keyof T>(name: K, assert_sealed=true): never {// T[K] {
    //     if (assert_sealed && !this[IsSealed]()) {
    //         throw new Error(`Tried to get resource value for ${name} before registry was sealed.`);
    //     }
    //     if (this.resources[name] === undefined) {
    //         throw new Error('Tried to get unrecognized resource: '+name);
    //     }
    //     return (this.resources[name] as StaticResource<T[K]>).get(assert_sealed)
    // }
    get(name) {
        if (this.resources[name] === undefined) {
            throw new Error('Tried to get unrecognized resource: ' + name);
        }
        return this.resources[name];
    }
    to_value_mapping() {
        if (!this[exports.IsSealed]()) {
            throw new Error('Tried to get all resources before the registry was sealed.');
        }
        return utils_1.construct_from_keys(utils_1.keys(this.static_name_index), name => this.get(name).get());
    }
    to_value_mapping_pre_runtime() {
        return utils_1.construct_from_keys(utils_1.keys(this.static_name_index), name => this.get(name).get_pre_runtime());
    }
}
exports.StaticMap = StaticMap;
class StaticIndex {
    constructor(mappers = []) {
        this.mappers = mappers;
        this.index = [];
        this.sealed = false;
        this.callbacks = [];
    }
    register_mapper(mapper) {
        if (this.sealed) {
            throw new Error('Tried to register a mapper after the index was sealed.');
        }
        this.index = this.index.map(mapper);
        this.mappers.push(mapper);
    }
    add(t) {
        if (this.sealed) {
            throw new Error('Tried to add an element after the index was sealed.');
        }
        t = this.mappers.reduce((acc, f) => f(acc), t);
        this.index.push(t);
        return t;
    }
    find(f, assert_sealed = true) {
        if (assert_sealed && !this.sealed) {
            throw new Error('Tried to look up the index before it was sealed.');
        }
        return this.index.find(f);
    }
    all(assert_sealed = true) {
        if (assert_sealed && !this.sealed) {
            throw new Error('Tried to look up the index before it was sealed.');
        }
        return this.index;
    }
    [exports.IsSealed]() {
        return this.sealed;
    }
    [exports.Seal]() {
        if (this[exports.IsSealed]()) {
            throw new Error('Tried to reseal index.');
        }
        this.sealed = true;
        this.callbacks.forEach(cb => cb(this));
    }
    [exports.OnSealed](f) {
        this.callbacks.push(f);
    }
}
exports.StaticIndex = StaticIndex;
class Pool {
    constructor(allocator, initializer) {
        this.allocator = allocator;
        this.initializer = initializer;
        this.pool = [];
        this.book = [];
    }
    grow(n) {
        for (let i = 0; i < n; i++) {
            this.pool.push(this.allocator());
            this.book.push(false);
        }
        return this;
    }
    create(...params) {
        const i = this.book.indexOf(false);
        if (i === -1) {
            throw new Error('Pool ran out of free slots');
        }
        this.book[i] = true;
        const result = this.pool[i];
        this.initializer(result, ...params);
        return result;
    }
    free(obj) {
        const i = this.pool.indexOf(obj);
        if (i === -1) {
            throw new Error('Tried to free something not found in pool.');
        }
        this.book[i] = false;
    }
}
exports.Pool = Pool;


/***/ }),

/***/ "./src/typescript/lib/text_utils.ts":
/*!******************************************!*\
  !*** ./src/typescript/lib/text_utils.ts ***!
  \******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function uncapitalize(msg) {
    return msg[0].toLowerCase() + msg.slice(1);
}
exports.uncapitalize = uncapitalize;
function capitalize(msg) {
    return msg[0].toUpperCase() + msg.slice(1);
}
exports.capitalize = capitalize;
function starts_with(str, searchString, position) {
    position = position || 0;
    return str.substr(position, searchString.length) === searchString;
}
exports.starts_with = starts_with;
function tokens_equal(tks1, tks2) {
    if (tks1.length !== tks2.length) {
        return false;
    }
    for (let i = 0; i < tks1.length; i++) {
        if (tks1[i] !== tks2[i]) {
            return false;
        }
    }
    return true;
}
exports.tokens_equal = tokens_equal;
function tokenize(s) {
    let word_pat = /[\S]+/g;
    let space_pat = /[^\S]+/g;
    let tokens = s.split(space_pat);
    let gaps = s.split(word_pat);
    if (tokens.length > 0) {
        if (tokens[0] === '') {
            tokens.splice(0, 1);
        }
        if (tokens[tokens.length - 1] === '' && gaps[gaps.length - 1] === '') {
            tokens.splice(tokens.length - 1, 1);
        }
    }
    return [tokens, gaps];
}
exports.tokenize = tokenize;
function split_tokens(s) {
    let space_pat = /[^\S]+/g;
    let tokens = s.split(space_pat);
    if (tokens.length > 0) {
        if (tokens[0] === '') {
            tokens.splice(0, 1);
        }
        if (tokens[tokens.length - 1] === '') {
            tokens.splice(tokens.length - 1, 1);
        }
    }
    return tokens;
}
exports.split_tokens = split_tokens;
function tokenize_tests() {
    console.log('tokenize tests');
    console.log(tokenize(' l'));
}
function untokenize(tokens, gaps) {
    if (gaps === undefined) {
        return tokens.join(' ');
    }
    let result = '';
    let i = 0;
    for (i = 0; i < gaps.length; i++) {
        result += gaps[i];
        if (i < tokens.length) {
            result += tokens[i];
        }
    }
    return result;
}
exports.untokenize = untokenize;
function get_indenting_whitespace(s) {
    let space_pat = /^[^\S]+/;
    let result = space_pat.exec(s);
    if (result === null) {
        return '';
    }
    return result[0];
}
exports.get_indenting_whitespace = get_indenting_whitespace;
function ends_with_whitespace(s) {
    let last_space_pat = /\s$/;
    return last_space_pat.exec(s) !== null;
}
exports.ends_with_whitespace = ends_with_whitespace;
function normalize_whitespace(s) {
    return s.trim().replace(/\s+/g, ' ');
}
exports.normalize_whitespace = normalize_whitespace;
function last(x) {
    return x[x.length - 1];
}
exports.last = last;
function random_choice(choices) {
    var index = Math.floor(Math.random() * choices.length);
    return choices[index];
}
exports.random_choice = random_choice;
function dedent(strs, ...args) {
    // do interpolation
    let result = strs[0];
    for (let i = 0; i < args.length; i++) {
        result += args[i] + strs[i + 1];
    }
    //find the first newline with whitespace after it
    let pat = /\n +/;
    let m = pat.exec(result);
    if (m === null) {
        return result;
    }
    let replace_pat = new RegExp(m[0], 'g');
    let result2 = result.replace(replace_pat, '\n');
    return result2;
}
exports.dedent = dedent;
function wrap_in_div(message) {
    let elt = document.createElement('div');
    elt.innerHTML = message;
    return elt;
}
exports.wrap_in_div = wrap_in_div;


/***/ }),

/***/ "./src/typescript/lib/type_predicate_utils.ts":
/*!****************************************************!*\
  !*** ./src/typescript/lib/type_predicate_utils.ts ***!
  \****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function assert_type_predicate(predicate, value) {
    if (!predicate(value)) {
        throw new Error('assertion failed');
    }
}
exports.assert_type_predicate = assert_type_predicate;
function infer_type_predicate(f) { return f; }
exports.infer_type_predicate = infer_type_predicate;
function dangerous_assert(x) {
    // console.warn('You are doing a fake assert, you are bad.');
    return;
}
exports.dangerous_assert = dangerous_assert;
function adheres_to_kind_protocol(x) {
    return typeof x.kind === 'string';
}
exports.adheres_to_kind_protocol = adheres_to_kind_protocol;
function type_or_kind_name(x) {
    const type_name = typeof (x);
    if (type_name !== 'object') {
        return type_name;
    }
    dangerous_assert(x);
    if (adheres_to_kind_protocol(x)) {
        return x.kind;
    }
    else {
        return 'object';
    }
}
exports.type_or_kind_name = type_or_kind_name;
function type_or_kind_is(x, type_or_kind) {
    return type_or_kind_name(x) === type_or_kind;
}
exports.type_or_kind_is = type_or_kind_is;
exports.typeof_ = (t) => (x) => typeof (x) === t;
exports.in_ = (k) => (x) => k in x;
exports.instanceof_ = (ctor) => (x) => x instanceof ctor;
exports.not_ = (f) => (value) => !f(value);
exports.not_nullish_ = (value) => value !== undefined && value !== null;
exports.nullish_ = (value) => value === undefined || value === null;
function and_(pred1) {
    function and_inner_(pred2) {
        return (value) => pred1(value) && pred2(value);
    }
    return and_inner_;
}
exports.and_ = and_;
function or_(pred1) {
    function or_inner_(pred2) {
        return (value) => pred1(value) || pred2(value);
    }
    return or_inner_;
}
exports.or_ = or_;


/***/ }),

/***/ "./src/typescript/lib/update.ts":
/*!**************************************!*\
  !*** ./src/typescript/lib/update.ts ***!
  \**************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
update.ts - Concise, typed immutable updates to deeply-nested objects

Daniel Spitz

Use it like this:

    import {update} from 'update';
    let obj = { a: 3, b: 'horse', c: { d: [1,2,3] }};
    let obj2 = update(obj, { a: 0, c: { d: _ => [..._, 4] } });

Concise: you only need to type the keys being updated once.
Typed: It typechecks the second argument. It infers the types of all nested update values and updater functions.
Immutable: Doesn't modify the original object. Reuses substructures without copying where possible.

In the above example, the function in the 'd' property is an updater function; it will be
called with the old value of d, and the result will be used to replace it in obj2.

Inspired indirectly by discussions here
https://github.com/Microsoft/TypeScript/issues/13923
in which it is discussed how to use recursive mapped types to enforce immutability
through a deeply-nested object

Issues:
- Awkward to update embedded functions. You are forced to always supply an updater function for them.
  (Otherwise, it would be ambiguous at runtime whether you had supplied a replacement or an updater function.)
- Behavior for "unique symbol" types is finnicky/does not work
- It should be possible to specify a new typing of this, with the same underlying impl,
    which can transform from the source type to a new target type

I strongly encourage you to stake your professional reputation on the behavior of this code.
*/
Object.defineProperty(exports, "__esModule", { value: true });
;
// The second generic type parameter is a hack to prevent typescript from using the contents of updater
// to figure out the source and return types when doing type inference on calls to this function.
function update1(source, updater) {
    // if updater is a function, call it and return the result
    if (updater instanceof Function) {
        return updater(source);
    }
    // if updater is a non-traversible value
    // check for all types we don't intend to recursively traverse.
    // this means all (non-function) primitives, and arrays
    if (!(updater instanceof Object) || updater instanceof Set) {
        return updater;
    }
    if (updater instanceof Array) {
        return update1_array(source, updater);
    }
    if (updater instanceof Map) {
        return update1_map(source, updater);
    }
    // updater is an Object, traverse each key/value and update recursively.
    // note: if you are just trying to set to a deeply-nested object with no traversal,
    // you can achieve this by passing a function returning your desired object.
    // if (updater instanceof Object) {
    if (typeof (updater) === 'object') {
        return update1_object(source, updater);
    }
    throw Error('Should never get here');
}
exports.update1 = update1;
function update1_array(source, updater) {
    // If the updater is an array, we are actually inside a *tuple* updater.
    // This means the updater must be no larger than the source tuple type.
    // We will not delete any elements, only replace with updates.
    let result;
    if (source instanceof Array) {
        result = [...source];
    }
    else {
        result = [];
    }
    for (let i = 0; i < updater.length; i++) {
        const x = updater[i];
        if (x === undefined) {
            continue;
        }
        result[i] = update(result[i], x);
    }
    return result;
}
function update1_map(source, updater) {
    let result;
    // Assume that the constructor function is part of the Map interface
    // Even though in JS it's not :(
    const ctor = updater.constructor;
    if (source instanceof Map) {
        result = new ctor(source);
    }
    else {
        result = new ctor();
    }
    for (let [k, v] of updater) {
        if (v === undefined) {
            result.delete(k);
        }
        else {
            const r = update(result.get(k), v);
            if (r === undefined) {
                result.delete(k);
            }
            else {
                result.set(k, r);
            }
        }
    }
    return result;
}
function update1_object(source, updater) {
    let result;
    if (source instanceof Array) {
        result = [...source];
    }
    else if (typeof (source) === 'object') {
        result = Object.assign({}, source);
    }
    else {
        result = {};
    }
    for (const n in updater) {
        const v = updater[n];
        if (v === undefined) {
            delete result[n];
        }
        else {
            const r = update(result[n], v);
            if (r === undefined) {
                delete result[n];
            }
            else {
                result[n] = r;
            }
        }
    }
    if (result instanceof Array) {
        // remove empty (deleted) slots
        result = remove_empty_slots(result);
    }
    return result;
}
function remove_empty_slots(arr) {
    return arr.filter((_, i) => i in arr);
}
exports.remove_empty_slots = remove_empty_slots;
function update(source, ...updaters) {
    return updaters.reduce(update1, source);
}
exports.update = update;
function update_any(source, updater) {
    return update(source, updater);
}
exports.update_any = update_any;
// Add an overload to immer's IProduce that makes it usable as an update function
const immer_1 = __webpack_require__(/*! immer */ "./node_modules/immer/dist/immer.module.js");
immer_1.setAutoFreeze(false);


/***/ }),

/***/ "./src/typescript/lib/utils.ts":
/*!*************************************!*\
  !*** ./src/typescript/lib/utils.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * TODO: move all x_utils files to a package
 */
__webpack_require__(/*! ./adt_utils */ "./src/typescript/lib/adt_utils.ts");
var update_1 = __webpack_require__(/*! ./update */ "./src/typescript/lib/update.ts");
exports.Updater = update_1.Updater;
exports.update = update_1.update;
exports.update_any = update_1.update_any;
function make_matrix2(data_obj) {
    let dim_y = data_obj.length;
    let dim_x = data_obj[0].length;
    let data = new Int16Array(data_obj.reduce((x, y) => x.concat(y)));
    // TODO complain if the total length is wrong
    return new Matrix2(data, dim_x, dim_y);
}
exports.make_matrix2 = make_matrix2;
function zeros(dim_x, dim_y) {
    return new Matrix2(new Int16Array(dim_x * dim_y), dim_x, dim_y);
}
exports.zeros = zeros;
class Matrix2 {
    constructor(data, dim_x, dim_y) {
        this.data = data;
        this.dim_x = dim_x;
        this.dim_y = dim_y;
    }
    get(x, y) {
        return this.data[y * this.dim_x + x];
    }
    set(x, y, value) {
        this.data[y * this.dim_x + x] = value;
    }
    rotate(degrees) {
        //validate input better
        if (degrees == 360 || degrees == 0) {
            return this;
        }
        const n_rotations = degrees / 90;
        let m = this;
        const dim_x = this.dim_x;
        const dim_y = this.dim_y;
        for (let i = 0; i < n_rotations; i++) {
            let new_data = new Int16Array(dim_x * dim_y);
            let new_mat2 = new Matrix2(new_data, dim_y, dim_x);
            for (let y = 0; y < dim_y; y++) {
                for (let x = 0; x < dim_x; x++) {
                    new_mat2.set(dim_y - 1 - y, x, m.get(x, y));
                }
            }
            m = new_mat2;
        }
        return m;
    }
    contains(value) {
        return this.data.indexOf(value) !== -1;
    }
    copy() {
        return new Matrix2(this.data.slice(), this.dim_x, this.dim_y);
    }
}
exports.Matrix2 = Matrix2;
function range(arg1, arg2) {
    let start, stop;
    if (arg2 === undefined) {
        start = 0;
        stop = arg1;
    }
    else {
        start = arg1;
        stop = arg2;
    }
    const result = [];
    for (let i = start; i < stop; i++) {
        result.push(i);
    }
    return result;
}
exports.range = range;
function counter_add(counter, key, inc) {
    let cur_val = 0;
    if (counter.has(key)) {
        cur_val = counter.get(key);
    }
    return counter.set(key, cur_val + inc);
}
exports.counter_add = counter_add;
function counter_get(counter, key) {
    let cur_val = 0;
    if (counter.has(key)) {
        cur_val = counter.get(key);
    }
    return cur_val;
}
exports.counter_get = counter_get;
function counter_update(counter1, counter2) {
    counter2.forEach(function (v, k) {
        counter_add(counter1, k, v);
    });
    return counter1;
}
exports.counter_update = counter_update;
function counter_order(counter, include_zero = false) {
    let result = Array.from(counter.entries()).sort((a, b) => a[1] - b[1]);
    if (!include_zero) {
        result = result.filter(([t, i]) => i > 0);
    }
    return result.map(([t, i]) => t);
}
exports.counter_order = counter_order;
// EDIT: actually, the below is made irrelevant by "as const" in 3.4.
// Holy dang this is cool:
// https://stackoverflow.com/questions/46445115/derive-a-type-a-from-a-list-of-strings-a
//
// Point here is to define the list of ObserverMomentIDs and PerceptionIDs
// as a constant, and get string literal typechecking elsewhere in the code.
function infer_literal_array(...arr) {
    return arr;
}
exports.infer_literal_array = infer_literal_array;
// Array helpers //
function append(...elts) {
    function _append(arr) {
        return [...(arr || []), ...elts];
    }
    return _append;
}
exports.append = append;
function appender_uniq(...elts) {
    return (arr) => [...arr, ...elts.filter(t => !arr.includes(t))];
}
exports.appender_uniq = appender_uniq;
function array_last(arr) {
    return arr[arr.length - 1];
}
exports.array_last = array_last;
function empty(x) {
    return Object.keys(x).length === 0;
}
exports.empty = empty;
function remove_empty_slots(arr) {
    return arr.filter((_, i) => i in arr);
}
exports.remove_empty_slots = remove_empty_slots;
// Significantly faster version of Array.flat(Infinity)
function flat_deep(arr) {
    const result = [];
    const iter_stack = [{
            arr,
            pos: undefined
        }];
    while (iter_stack.length > 0) {
        const iter = iter_stack[iter_stack.length - 1];
        if (iter.pos === undefined) {
            if (iter.arr.length === 0) {
                iter_stack.pop();
                continue;
            }
            else {
                iter.pos = 0;
            }
        }
        else if (iter.pos === iter.arr.length - 1) {
            iter_stack.pop();
            continue;
        }
        else {
            iter.pos++;
        }
        const elt = iter.arr[iter.pos];
        if (elt instanceof Array) {
            iter_stack.push({
                arr: elt,
                pos: undefined
            });
            continue;
        }
        else {
            result.push(elt);
        }
    }
    return result;
}
exports.flat_deep = flat_deep;
function set_eq(arr1, arr2) {
    if (arr1 === undefined && arr2 === undefined) {
        return true;
    }
    if (typeof arr1 !== typeof arr2) {
        return false;
    }
    return arr1.every(x => arr2.includes(x)) && arr2.every(x => arr1.includes(x));
}
exports.set_eq = set_eq;
function if_array(cond, r) {
    const cond_result = (typeof cond === 'function' ?
        cond() :
        cond);
    if (cond_result) {
        return r();
    }
    return [];
}
exports.if_array = if_array;
function not_null(value) {
    return (value !== undefined && value !== null);
}
exports.not_null = not_null;
function if_not_null(cond, r) {
    if (not_null(cond)) {
        return r(cond);
    }
    return undefined;
}
exports.if_not_null = if_not_null;
function if_not_null_array(cond, r) {
    if (not_null(cond)) {
        return r(cond);
    }
    return [];
}
exports.if_not_null_array = if_not_null_array;
// Helper for building lists with optional elements
function cond(c, r) {
    if (c) {
        return [r()];
    }
    return [];
}
exports.cond = cond;
// type SpreadableMaybe<R extends {}> = (R | {}) & Iterable<R>
// export function cond<R extends {}>(c: boolean, r: () => R): SpreadableMaybe<R> {
//     let result_obj: R | {} = {};
//     let result_arr: R[] = [];
//     if (c) {
//         result_obj = r();
//         result_arr.push(<R>result_obj);        
//     }
//     result_obj[Symbol.iterator] = result_arr[Symbol.iterator];
//     return <SpreadableMaybe<R>>result_obj;
//     // return <SpreadableMaybe<R>> new Proxy(result_obj, {
//     //     get: (target, prop, receiver) => {
//     //         if (prop === Symbol.iterator) {
//     //             return result_arr[prop];
//     //         }
//     //         return Reflect.get(target, prop, receiver);
//     //     }
//     // })
// }
// export function included<T, T2 extends readonly T[]>(value: T, arr: T2): value is T2[number] {
//     return arr.includes(value);
// }
function included(value, arr) {
    return arr.includes(value);
}
exports.included = included;
// Object helpers //
function cond_obj(c, r) {
    if (c) {
        return r();
    }
    return {};
}
exports.cond_obj = cond_obj;
function merge_objects(arr) {
    return arr.reduce((acc, cur) => (Object.assign(Object.assign({}, acc), cur)), {});
}
exports.merge_objects = merge_objects;
// export type Entry<Obj extends {}> =
//     Required<Obj> extends infer T
//         ? {
//             [K in keyof T]: [K, T[K]]
//         }[keyof T]
//         : never;
function entries(obj) {
    return Object.entries(obj);
}
exports.entries = entries;
function set_prop(obj, ...pair) {
    obj[pair[0]] = pair[1];
}
exports.set_prop = set_prop;
function values(obj) {
    return Object.values(obj);
}
exports.values = values;
// WARNING: this will break if obj has a property that is explicitly set to undefined!
// export function entries<K extends keyof any, V>(obj: {[k in K]?: V}): [K, V][] {
//     return <[K, Exclude<V, undefined>][]>Object.entries(obj).filter((k, v) => v !== undefined);
// }
function keys(obj) {
    return Object.keys(obj);
}
exports.keys = keys;
function drop_keys(obj, ...keys) {
    let result = {};
    for (let [k, v] of Object.entries(obj)) {
        if (!keys.includes(k)) {
            result[k] = v;
        }
    }
    return result;
}
exports.drop_keys = drop_keys;
function from_entries(entries) {
    let result = {};
    entries.forEach(([k, v]) => {
        result[k] = v;
    });
    return result;
}
exports.from_entries = from_entries;
function construct_from_keys(keys, f) {
    const result = {};
    for (let k of keys) {
        result[k] = f(k);
    }
    return result;
}
exports.construct_from_keys = construct_from_keys;
function map_values(obj, f) {
    return from_entries(entries(obj).map(([k, v]) => [k, f(v, k)]));
}
exports.map_values = map_values;
function lazy_map_values(obj, f) {
    return new Proxy(obj, {
        get: (a, b) => f(a[b], b)
    });
}
exports.lazy_map_values = lazy_map_values;
function map_values_entries(obj, f) {
    return entries(obj).map(([k, v]) => [k, f(v, k)]);
}
exports.map_values_entries = map_values_entries;
function for_each_entries(obj, f) {
    for (const e of entries(obj)) {
        f(e);
    }
}
exports.for_each_entries = for_each_entries;
function entry_set(obj, entry) {
    const [k, v] = entry;
    obj[k] = v;
}
exports.entry_set = entry_set;
// export function map_values<K extends keyof any, V1 extends { [k in K]: any }, V2 extends { [k in K]: any }=V1>(obj: V1, f: <k extends K>(v: V1[k]) => V2[k]): V2 {
//     return from_entries(entries(obj).map(([k, v]) => [k, f(v)]));
// }
// export function map_values<K extends keyof any, V1, V2=V1>(obj: Partial<Record<K, V1>>, f: (v: V1) => V2): Record<K, V2> {
//     return from_entries(entries(obj).map(([k, v]) => [k, f(v)]));
// }
// export function filter_values<K extends keyof any, V1>(obj: Partial<Record<K, V1>>, f: (v: V1) => boolean): Record<K, V1> {
//     return from_entries(entries(obj).filter(([k, v]) => f(v)));
// }
function filter_values(obj, f) {
    return from_entries(entries(obj).filter((e) => f(e[1], e[0])));
}
exports.filter_values = filter_values;
function key_union(a, b) {
    return [...new Set([...Object.keys(a), ...Object.keys(b)]).values()];
}
exports.key_union = key_union;
function map(...args) {
    return new Map(args);
}
exports.map = map;
function copy_map(m) {
    return new Map(m.entries());
}
exports.copy_map = copy_map;
function map_updater(x) {
    return (m) => new Map([...m, ...x]);
}
exports.map_updater = map_updater;
function compute_const(f) {
    return f();
}
exports.compute_const = compute_const;
exports.enforce_always_never = (...args) => { };
function assert(condition, msg) {
    if (!condition) {
        throw new Error(msg);
    }
}
exports.assert = assert;
function curry(f) {
    return function _curry(f, ...accum_args) {
        return function curried(...args) {
            if (args.length === 0) {
                return f(...accum_args);
            }
            else {
                return _curry(f, ...accum_args, ...args);
            }
        };
    }(f);
}
exports.curry = curry;
function chain(f) {
    let f2 = f;
    f2.z = (f2) => chain((a) => f2(f(a)));
    return f2;
}
exports.chain = chain;
function begin(t) {
    if (t === undefined) {
        return chain((t) => t);
    }
    else {
        return chain(() => t);
    }
}
exports.begin = begin;
const lodash_1 = __importDefault(__webpack_require__(/*! lodash */ "./node_modules/lodash/lodash.js"));
exports.deep_equal = lodash_1.default.isEqual;
exports.statics = () => (_ctor) => { };
// type MyButt = {}
// interface MyStaticType {
//   new (urn: string): MyButt;
//   isMember: boolean;
// }
// @statics<MyStaticType>()
// class MyClassWithStaticMembers {
//   static isMember: string;
//   // ...
// }
exports.let_ = (f) => f();
function bound_method(instance, name) {
    return instance[name].bind(instance);
}
exports.bound_method = bound_method;
function with_context(f) {
    let context;
    const setter = (c) => {
        if (context !== undefined) {
            throw new Error(`Multiple calls to context setter. First ${context} then ${c}.`);
        }
        context = c;
    };
    const result = f(setter);
    return [result, context];
}
exports.with_context = with_context;
function is_shallow_equal(arr1, arr2) {
    if (arr1 === arr2) {
        return true;
    }
    if (arr1.length !== arr2.length) {
        return false;
    }
    for (let i = 0; i < arr1.length; i++) {
        if (arr1[i] !== arr2[i]) {
            return false;
        }
    }
    return true;
}
exports.is_shallow_equal = is_shallow_equal;
class ArgCache {
    constructor(func, size = 100) {
        this.func = func;
        this.size = size;
        this.cache = [];
    }
    call(args) {
        const entry = this.cache.find(e => is_shallow_equal(e.arguments, args));
        if (entry === undefined) {
            // console.count('cache_miss');
            const result = this.func(...args);
            this.cache.push({
                arguments: args,
                result
            });
            if (this.cache.length > this.size * 1.2) {
                // console.count('cache_spill');
                this.cache.splice(0, this.cache.length - this.size);
            }
            return result;
        }
        console.count('cache_hit');
        return entry.result;
    }
}
function memoize(f, size) {
    const cache = new ArgCache(f, size);
    return new Proxy(f, {
        apply(target, thisArg, args) {
            return cache.call(args);
        }
    });
}
exports.memoize = memoize;


/***/ }),

/***/ "./src/typescript/lock.ts":
/*!********************************!*\
  !*** ./src/typescript/lock.ts ***!
  \********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const parser_1 = __webpack_require__(/*! ./parser */ "./src/typescript/parser/index.ts");
const puffer_1 = __webpack_require__(/*! ./puffer */ "./src/typescript/puffer.ts");
const utils_1 = __webpack_require__(/*! ./lib/utils */ "./src/typescript/lib/utils.ts");
function lock_builder(spec) {
    return (owner) => {
        function has_permission(w) {
            let o = spec.owner(w);
            return o === undefined || o === owner;
        }
        function lock_puffer(puffer) {
            return puffer_1.gate_puffer((w, old = false) => !old && has_permission(w), puffer);
        }
        function lock(world, start_index) {
            if (start_index === undefined) {
                start_index = world.index;
            }
            return utils_1.update(spec.set_owner(world, owner));
        }
        function release(world) {
            return utils_1.update(spec.set_owner(world, undefined));
        }
        function lock_parser_thread(world, thread) {
            return parser_1.gate(has_permission(world), thread);
        }
        return {
            lock,
            release,
            lock_puffer,
            owner: spec.owner,
            lock_parser_thread
        };
    };
}
exports.lock_builder = lock_builder;


/***/ }),

/***/ "./src/typescript/parser/consume_spec.ts":
/*!***********************************************!*\
  !*** ./src/typescript/parser/consume_spec.ts ***!
  \***********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = __webpack_require__(/*! lib/utils */ "./src/typescript/lib/utils.ts");
const text_utils_1 = __webpack_require__(/*! lib/text_utils */ "./src/typescript/lib/text_utils.ts");
exports.SUBMIT = Symbol('SUBMIT');
exports.NEVER_TOKEN = Symbol('NEVER');
exports.AVAILABILITY_ORDER = {
    'Available': 0,
    'Used': 1,
    'Locked': 2
};
exports.GAP = Symbol('GAP');
function process_consume_spec(spec, overrides) {
    if (spec instanceof Array) {
        return process_array(spec, overrides);
    }
    else if (typeof (spec) === 'object') {
        return process_object(spec, overrides);
    }
    else if (spec === exports.SUBMIT) {
        return [[{
                    kind: 'RawConsumeSpec',
                    token: exports.SUBMIT,
                    labels: {},
                    availability: 'Available'
                }]];
    }
    else { // if (typeof(spec) === 'string') {
        return process_string(spec, overrides);
    }
}
exports.process_consume_spec = process_consume_spec;
function process_array(spec, overrides) {
    if (spec.length === 0) {
        throw new Error('Received an empty ConsumeSpec array.');
    }
    const result = [];
    let current_chunk = [];
    function is_submit(chunk) {
        var _a;
        return ((_a = utils_1.array_last(chunk)) === null || _a === void 0 ? void 0 : _a.token) === exports.SUBMIT;
    }
    for (const s of spec) {
        if (is_submit(current_chunk)) {
            throw new Error('Invalid SUBMIT_TOKEN placement in ConsumeSpec. Must only occur at the end.');
        }
        if (s === exports.GAP) {
            if (current_chunk.length === 0) {
                throw new Error('Invalid GAP_TOKEN placement in ConsumeSpec. No LHS found for the gap to apply to.');
            }
            else {
                result.push(current_chunk);
                current_chunk = [];
            }
        }
        else {
            const next_chunks = process_consume_spec(s, overrides);
            const c = next_chunks.shift();
            if (is_submit(c)) {
                result.push(current_chunk);
                current_chunk = c;
            }
            else {
                current_chunk.push(...c);
                if (next_chunks.length > 0) {
                    result.push(current_chunk, ...next_chunks.slice(0, -1));
                    current_chunk = [...next_chunks.pop()];
                }
            }
        }
    }
    if (current_chunk.length === 0) {
        throw new Error('Invalid GAP_TOKEN placement in ConsumeSpec. No RHS found for the gap to apply to.');
    }
    else {
        result.push(current_chunk);
    }
    return result;
}
function process_object(spec, overrides) {
    const spec_ = Object.assign({}, spec);
    if (overrides) {
        if (overrides.used !== undefined) {
            spec_.used = overrides.used;
        }
        if (overrides.locked !== undefined) {
            spec_.locked = overrides.locked;
        }
        if (overrides.labels) {
            spec_.labels = Object.assign(Object.assign({}, spec.labels), overrides.labels);
        }
    }
    return process_consume_spec(spec.tokens, utils_1.drop_keys(spec_, 'tokens'));
}
function process_string(spec, overrides) {
    var _a, _b, _c, _d;
    const chunks = text_utils_1.split_tokens(spec);
    if (chunks.length === 0) {
        throw new Error('Invalid string in ConsumeSpec - string was empty or all whitespace');
    }
    let labels = (_b = (_a = overrides) === null || _a === void 0 ? void 0 : _a.labels, (_b !== null && _b !== void 0 ? _b : {}));
    let availability = 'Available';
    if ((_c = overrides) === null || _c === void 0 ? void 0 : _c.used) {
        availability = 'Used';
    }
    if ((_d = overrides) === null || _d === void 0 ? void 0 : _d.locked) {
        availability = 'Locked';
    }
    return chunks.map(chunk => {
        const tokens = chunk.split('_');
        if (tokens.some(t => t === '')) {
            throw new Error('Invalid string in ConsumeSpec. String contained an underscore without a valid LHS or RHS: ' + chunk);
        }
        return tokens.map(t => ({
            kind: 'RawConsumeSpec',
            token: t,
            availability,
            labels
        }));
    });
}


/***/ }),

/***/ "./src/typescript/parser/index.ts":
/*!****************************************!*\
  !*** ./src/typescript/parser/index.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./consume_spec */ "./src/typescript/parser/consume_spec.ts"));
__export(__webpack_require__(/*! ./parser */ "./src/typescript/parser/parser.ts"));


/***/ }),

/***/ "./src/typescript/parser/parser.ts":
/*!*****************************************!*\
  !*** ./src/typescript/parser/parser.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
    a parser thread takes a parser and uses it to consume some of a token stream,
    and returns some result

    a thread can *split* the current parser state into N branches,
    each of which consume their own things separately and return their own results
    the thread which initiated the split is also responsible for combining the various results
    before returning control to the thread.
        the most common scenario is that only one of N branches is still valid
    
    internally, the parser receives instructions from the parser thread and consumes
    pieces of the input token stream. it builds up a list of token match objects,
    where each token in the stream consumed so far gets a status of "matched", "partial", "error"

    by combining these token labellings from all the different parser threads that ran,
    we determine:
        - whether the currently-input string is valid and can be executed
        - what colors to highlight the various input words with
        - what to display beneath the input prompt as typeahead options

*/
Object.defineProperty(exports, "__esModule", { value: true });
const iterative_1 = __webpack_require__(/*! iterative */ "./node_modules/iterative/dist/index.js");
const text_utils_1 = __webpack_require__(/*! lib/text_utils */ "./src/typescript/lib/text_utils.ts");
const utils_1 = __webpack_require__(/*! lib/utils */ "./src/typescript/lib/utils.ts");
const type_predicate_utils_1 = __webpack_require__(/*! lib/type_predicate_utils */ "./src/typescript/lib/type_predicate_utils.ts");
const consume_spec_1 = __webpack_require__(/*! ./consume_spec */ "./src/typescript/parser/consume_spec.ts");
// class NoMatch {
//     kind: 'NoMatch' = 'NoMatch';
// };
const NO_MATCH_BRAND = Symbol('NO_MATCH_BRAND');
const NO_MATCH = { kind: 'NoMatch' };
function is_no_match(x) {
    return x === NO_MATCH; //('kind' in x) && x.kind === 'NoMatch';
}
function parse_restart(n_splits) {
    return { kind: 'ParseRestart', n_splits };
}
function is_parse_restart(x) {
    return (typeof (x) === 'object') && ('kind' in x) && x.kind === 'ParseRestart';
}
// class ParseRestart {
//     kind: 'ParseRestart' = 'ParseRestart';
//     constructor(public n_splits: number) {}
// };
class ParseError extends Error {
}
exports.ParseError = ParseError;
;
function is_parse_result_valid(result) {
    if (result.length === 0) {
        return true;
    }
    const last = utils_1.array_last(result);
    return last.status === 'Match' && last.expected.token !== consume_spec_1.SUBMIT;
    // return result.length === 0 || array_last(result)!.status === 'Match';
}
exports.is_parse_result_valid = is_parse_result_valid;
// export function group_rows(options: GroupableRow[], consider_labels=true) {
function group_rows(options, consider_labels = true) {
    let grouped_options = {};
    function stringify_option(x) {
        let result = '';
        result += x.length + ';';
        let n_nulls = x.findIndex(l => l !== undefined);
        result += n_nulls + ';';
        function stringify_elt(elt) {
            let result = '';
            if (typeof elt.expected.token === 'string') {
                result += elt.expected.token;
            }
            if (consider_labels) {
                result += '|';
                result += Object.keys(elt.expected.labels).join(',');
            }
            return result;
        }
        for (let l of x.slice(n_nulls)) {
            result += stringify_elt(l) + ';';
        }
        return result;
    }
    for (let option of options) {
        let key = stringify_option(option);
        if (grouped_options[key] === undefined) {
            grouped_options[key] = [option];
        }
        else {
            grouped_options[key].push(option);
        }
    }
    return grouped_options;
}
exports.group_rows = group_rows;
// for each of the input tokens, how should they be displayed/highighted?
function compute_view(parse_results, input_stream) {
    let match_status;
    let submission = false;
    let row;
    if ((row = parse_results.find(row => utils_1.array_last(row).status === 'Match')) !== undefined) {
        match_status = 'Match';
        submission = utils_1.array_last(row).actual === consume_spec_1.SUBMIT;
        if (!submission) {
            throw new ParseError('Matching parse did not end in SUBMIT_TOKEN');
        }
    }
    else if (parse_results.some(row => utils_1.array_last(row).status === 'PartialMatch')) {
        //    (TODO: flip availability scale s.t. Available is 2, not 0.)
        if (input_stream.length === 0) {
            row = [];
        }
        else {
            let all_partial_rows = iterative_1.filter(parse_results, row => utils_1.array_last(row).status === 'PartialMatch');
            let truncated = iterative_1.map(all_partial_rows, row => row.slice(0, input_stream.length));
            // let all_partial_rows = parse_results.filter(row => array_last(row)!.status === 'PartialMatch');
            // let truncated = all_partial_rows.map(row => row.slice(0, input_stream.length));
            let grouped = group_rows(truncated);
            let first_group = grouped[Object.keys(grouped)[0]];
            // NOTE: It should always get switched from Locked since Locked specs can never be entered
            let current_a = 'Locked';
            let current_index = 0;
            for (let i = 0; i < first_group.length; i++) {
                let opt = first_group[i];
                let a = utils_1.array_last(opt).expected.availability;
                if (consume_spec_1.AVAILABILITY_ORDER[a] < consume_spec_1.AVAILABILITY_ORDER[current_a]) {
                    current_a = a;
                    current_index = i;
                }
            }
            row = first_group[current_index];
        }
        match_status = 'PartialMatch';
    }
    else {
        row = input_stream.map(tok => {
            let expected = {
                kind: 'RawConsumeSpec',
                token: tok,
                availability: 'Available',
                labels: {}
            };
            return {
                kind: 'TokenMatch',
                status: 'ErrorMatch',
                actual: tok,
                expected
            };
        });
        match_status = 'ErrorMatch';
    }
    let typeahead_grid = compute_typeahead(parse_results, input_stream);
    let submittable = typeahead_grid.some(row => utils_1.array_last(row.option).expected.token === consume_spec_1.SUBMIT);
    return {
        kind: 'ParsingView',
        matches: row,
        submittable,
        submission,
        match_status,
        typeahead_grid
    };
}
exports.compute_view = compute_view;
/*
Typeahead
    For each non-valid row (ignoring errors, partial only)
    If the row is at least the length of the input stream
    Typeahead is the Partial TokenMatches suffix (always at the end)
*/
function compute_typeahead(parse_results, input_stream) {
    function is_partial(tm) {
        return tm.status === 'PartialMatch';
    }
    let rows_with_typeahead = iterative_1.filter(parse_results, pr => !(utils_1.array_last(pr).status === 'ErrorMatch')
        && pr.slice(input_stream.length - 1).some(is_partial));
    let grouped_options = group_rows(iterative_1.map(rows_with_typeahead, pr => {
        let start_idx = pr.findIndex(is_partial);
        let option = Array(start_idx).fill(undefined);
        let elts = pr.slice(start_idx);
        option.push(...elts);
        return option;
    }));
    // let grouped_options: groups_of_partials = <groups_of_partials> group_rows(
    //     rows_with_typeahead.map(pr => {
    //         let start_idx = pr.findIndex(is_partial);
    //         let option: (PartialMatch | null)[] = Array(start_idx).fill(null);
    //         let elts = <PartialMatch[]>pr.slice(start_idx);
    //         option.push(...elts);
    //         return option
    //     }
    // ));
    return Object.entries(grouped_options).map(([key, options]) => {
        let current_a = 'Locked';
        let current_index = 0;
        for (let i = 0; i < options.length; i++) {
            let opt = options[i];
            let a = utils_1.array_last(opt).expected.availability;
            if (consume_spec_1.AVAILABILITY_ORDER[a] < consume_spec_1.AVAILABILITY_ORDER[current_a]) {
                current_a = a;
                current_index = i;
            }
        }
        return {
            kind: 'TypeaheadOption',
            availability: current_a,
            option: options[current_index]
        };
    });
}
exports.compute_typeahead = compute_typeahead;
/*
    Helper function for parser methods that take an optional callback or return value on success
    The pattern is to use function overloading to get the types right, and call this
    function to get the behavior right.
*/
function call_or_return(parser, result) {
    if (result instanceof Function) {
        return result(parser);
    }
    return result;
}
function failed(result) {
    if (result === undefined) {
        return false;
    }
    return result === NO_MATCH || type_predicate_utils_1.type_or_kind_is(result, 'ParseRestart');
}
exports.failed = failed;
class Parser {
    constructor(input_stream, splits_to_take) {
        this.current_split = 0;
        this.pos = 0;
        this.parse_result = [];
        this.label_context = {};
        this.failure = undefined;
        this._current_availability = 'Available';
        this.input_stream = input_stream;
        this.split_iter = splits_to_take[Symbol.iterator]();
        // this.splits_to_take = splits_to_take;
    }
    get current_availability() { return this._current_availability; }
    set current_availability(val) {
        if (consume_spec_1.AVAILABILITY_ORDER[val] < consume_spec_1.AVAILABILITY_ORDER[this._current_availability]) {
            return;
        }
        this._current_availability = val;
    }
    with_label_context(labels, cb) {
        const old_label_context = Object.assign({}, this.label_context);
        this.label_context = Object.assign(Object.assign({}, this.label_context), labels);
        // pretty sure we can just do this since we no longer rely on
        // exceptions for flow control in parser threads
        const result = cb();
        this.label_context = old_label_context;
        return result;
        // try {
        //     return cb();
        // } finally {
        //     this.label_context = old_label_context;
        // }
    }
    consume(spec, result) {
        const status = this._consume_spec(spec);
        if (failed(status)) {
            return status;
        }
        return call_or_return(this, result);
    }
    _consume_spec(spec) {
        const chunks = consume_spec_1.process_consume_spec(spec);
        return this._consume_chunks(chunks);
    }
    _consume_chunks(token_chunks) {
        for (let chunk of token_chunks) {
            const status = this._consume(chunk.map(rcs => (Object.assign(Object.assign({}, rcs), { labels: Object.assign(Object.assign({}, this.label_context), rcs.labels) }))));
            if (failed(status)) {
                return status;
            }
        }
    }
    clamp_availability_MUTATE(spec) {
        if (consume_spec_1.AVAILABILITY_ORDER[spec.availability] < consume_spec_1.AVAILABILITY_ORDER[this.current_availability]) {
            spec.availability = this.current_availability;
            // return {...spec, availability: this.current_availability};
        }
        else if (consume_spec_1.AVAILABILITY_ORDER[spec.availability] > consume_spec_1.AVAILABILITY_ORDER[this.current_availability]) {
            this.current_availability = spec.availability;
        }
        // return spec;
    }
    _consume(tokens) {
        if (!is_parse_result_valid(this.parse_result)) {
            throw new ParseError('Tried to consume() on a done parser.');
        }
        for (let t of tokens) {
            this.clamp_availability_MUTATE(t);
        }
        // tokens = tokens.map(t => this.clamp_availability(t));
        let partial = false;
        let error = false;
        let i = 0;
        // check if exact match
        for (i = 0; i < tokens.length; i++) {
            const spec = tokens[i];
            const spec_value = spec.token;
            if (spec_value === consume_spec_1.NEVER_TOKEN) {
                error = true;
                break;
            }
            if (this.pos + i >= this.input_stream.length) {
                partial = true;
                break;
            }
            const input = this.input_stream[this.pos + i];
            function is_match(tok1, tok2) {
                if (typeof (tok1) === 'string' && typeof (tok2) === 'string') {
                    return tok1.toLocaleLowerCase() === tok2.toLocaleLowerCase();
                }
                return tok1 === tok2;
            }
            if (is_match(spec_value, input)) {
                // if (spec_value === input) {
                if (spec.availability === 'Locked') {
                    error = true;
                    break;
                }
                continue;
            }
            if (spec_value === consume_spec_1.SUBMIT || input === consume_spec_1.SUBMIT) {
                // eliminate case where either token is SUBMIT_TOKEN (can't pass into starts_with())
                error = true;
                break;
            }
            if (text_utils_1.starts_with(spec_value.toLocaleLowerCase(), input.toLocaleLowerCase())) {
                if (this.pos + i < this.input_stream.length - 1) {
                    error = true;
                }
                else {
                    partial = true;
                }
                break;
            }
            error = true;
            break;
        }
        function sanitize_MUTATE(spec) {
            if (spec.token !== consume_spec_1.NEVER_TOKEN) {
                return spec;
            }
            spec.token = '';
            return spec;
        }
        if (partial) {
            // push all tokens as partials
            this.parse_result.push(...tokens.map((t, j) => ({
                kind: 'TokenMatch',
                status: 'PartialMatch',
                actual: this.input_stream[this.pos + j] || '',
                expected: sanitize_MUTATE(t)
            })));
            // increment pos
            this.pos = this.input_stream.length;
            this.failure = NO_MATCH; //new NoMatch();
            return this.failure;
        }
        if (error) {
            this.parse_result.push(...tokens.map((t, j) => ({
                kind: 'TokenMatch',
                status: 'ErrorMatch',
                actual: this.input_stream[this.pos + j] || '',
                expected: sanitize_MUTATE(t)
            })));
            // increment pos
            this.pos = this.input_stream.length;
            this.failure = NO_MATCH; //new NoMatch();
            return this.failure;
        }
        // push all tokens as valid
        this.parse_result.push(...tokens.map((t, j) => ({
            kind: 'TokenMatch',
            status: 'Match',
            actual: this.input_stream[this.pos + j],
            expected: sanitize_MUTATE(t)
        })));
        // increment pos
        this.pos += tokens.length;
        return undefined;
    }
    eliminate() {
        /*
            It is important that we not just throw NoMatch, and instead actully attempt to consume a never token.
        */
        return this._consume([{
                kind: 'RawConsumeSpec',
                token: consume_spec_1.NEVER_TOKEN,
                labels: {},
                availability: 'Available'
            }]);
    }
    submit(result) {
        const status = this.consume(consume_spec_1.SUBMIT);
        if (failed(status)) {
            return status;
        }
        return call_or_return(this, result);
    }
    split(subthreads, callback) {
        if (subthreads.length === 0) {
            return this.eliminate();
        }
        const next_result = this.split_iter.next();
        if (next_result.done) {
            this.failure = parse_restart(subthreads.length); //new ParseRestart(subthreads.length);
            return this.failure;
        }
        const st = subthreads[next_result.value];
        const result = st(this);
        if (failed(result)) {
            return result;
        }
        if (callback === undefined) {
            return result;
        }
        return callback(result, this);
    }
    static run_thread(raw, t) {
        const [tokens, whitespace] = text_utils_1.tokenize(raw.text);
        if (raw.submit) {
            tokens.push(consume_spec_1.SUBMIT);
        }
        // The core parsing algorithm
        function match_input() {
            let n_iterations = 0;
            let n_splits = 0;
            const frontier = [[]];
            const results = [];
            const parse_results = [];
            while (frontier.length > 0) {
                const path = frontier.pop();
                let splits_to_take;
                if (path.length === 0) {
                    splits_to_take = path;
                }
                else {
                    let n = utils_1.array_last(path).next();
                    if (n.done) {
                        continue;
                    }
                    else {
                        frontier.push(path);
                    }
                    splits_to_take = [...path.slice(0, -1), n.value];
                }
                const p = new Parser(tokens, splits_to_take);
                let result = NO_MATCH;
                n_iterations++;
                result = t(p);
                if (is_parse_restart(result)) {
                    n_splits++;
                    frontier.push([...splits_to_take, new Array(result.n_splits).keys()]); //new_splits[Symbol.iterator]()]);
                    continue;
                }
                if (!is_no_match(result) && (p.parse_result.length === 0 || utils_1.array_last(p.parse_result).expected.token !== consume_spec_1.SUBMIT)) {
                    const expected_command = p.parse_result.map(r => r.expected.token).join(' ');
                    throw new ParseError("Command did not end in SUBMIT: " + expected_command);
                }
                results.push(result);
                parse_results.push(p.parse_result);
            }
            return [results, parse_results];
        }
        const [results, parses] = match_input();
        // Assembling the view object, data structures for building views of the parsed text
        const view = compute_view(parses, tokens);
        const parsing = {
            kind: 'Parsing',
            view,
            parses,
            tokens,
            whitespace,
            raw
        };
        // Filter and find the single valid result to return
        const valid_results = results.filter(r => !is_no_match(r)); //(r instanceof NoMatch));
        if (valid_results.length === 0) {
            return {
                kind: 'NotParsed',
                parsing
            };
        }
        else if (valid_results.length > 1) {
            throw new ParseError(`Ambiguous parse: ${valid_results.length} valid results found.`);
        }
        else {
            const result = valid_results[0];
            return {
                kind: 'Parsed',
                result: result,
                parsing
            };
        }
    }
}
exports.Parser = Parser;
function raw(text, submit = true) {
    return { kind: 'RawInput', text, submit };
}
exports.raw = raw;
// Helper to create a gated ParserThread. cond() is called, and if its condition is 
// not met, the thread is eliminated, else it runs the parser thread, t.
function gate(cond, t) {
    return p => !cond
        ? p.eliminate()
        : t(p);
}
exports.gate = gate;
// Helper to extract all possible valid inputs from a parser thread
/*
Can take up to 20-30ms to walk a reasonably deep thread. That is too slow.

Options
    - Use option labels to prune the walk,
      and only ever do walks with filters
    - Find a way to drastically speed up parsing
        - wasm
        - no exceptions (Done)
        - something else clever

*/
function traverse_thread(thread, command_filter) {
    let n_partials = 0;
    let n_matches = 0;
    const result = {};
    const frontier = [{ kind: 'RawInput', text: '', submit: false }];
    while (frontier.length > 0) {
        const cmd = frontier.shift();
        const res = Parser.run_thread(cmd, thread);
        if (res.kind === 'Parsed') {
            result[cmd.text] = res;
            n_matches++;
        }
        else {
            n_partials++;
        }
        const partial_parses = iterative_1.filter(res.parsing.parses, ms => utils_1.array_last(ms).status === 'PartialMatch');
        // let partial_parses = res.parsing.parses.filter(ms => array_last(ms)!.status === 'PartialMatch')
        const grps = group_rows(partial_parses, false);
        for (let k of Object.keys(grps)) {
            const grp = grps[k];
            if (command_filter !== undefined) {
                const expected = grp[0].map(m => m.expected);
                if (!command_filter(expected)) {
                    continue;
                }
            }
            const new_cmd = {
                kind: 'RawInput',
                submit: false
            };
            const toks = [];
            for (let m of grp[0]) {
                const tok = m.expected.token;
                if (typeof (tok) === 'string') {
                    toks.push(tok);
                }
                else {
                    // it must be SUBMIT.
                    new_cmd.submit = true;
                    break;
                }
            }
            new_cmd.text = toks.join(' ');
            frontier.push(new_cmd);
        }
    }
    return result;
}
exports.traverse_thread = traverse_thread;


/***/ }),

/***/ "./src/typescript/puffer.ts":
/*!**********************************!*\
  !*** ./src/typescript/puffer.ts ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

/*
    A puffer is a type of pattern described in Conway's Game of Life.
    http://www.conwaylife.com/wiki/Puffer

    It is an object that moves itself through the Life grid, and leaves behind debris where it has been.

    Here, a Puffer is a bundle of world behaviors that run within the game world,
    reading and updating game state, and leaving behind the "debris" of those updates.
    Sometimes that "debris" is just incidental bits of state, sometimes it is
    read or otherwise used by other Puffers sharing the world.
*/
Object.defineProperty(exports, "__esModule", { value: true });
const stages_1 = __webpack_require__(/*! ./lib/stages */ "./src/typescript/lib/stages.ts");
const utils_1 = __webpack_require__(/*! ./lib/utils */ "./src/typescript/lib/utils.ts");
const world_1 = __webpack_require__(/*! ./world */ "./src/typescript/world.tsx");
function normalize_puffer(puffer) {
    return Object.assign({ pre: stages_1.normalize_stages(puffer.pre), handle_command: stages_1.normalize_stages(puffer.handle_command), post: stages_1.normalize_stages(puffer.post), css_rules: puffer.css_rules || [] }, utils_1.drop_keys(puffer, 'pre', 'handle_command', 'post', 'css_rules'));
}
exports.normalize_puffer = normalize_puffer;
function map_puffer(mapper, puffer) {
    let norm_puffer = normalize_puffer(puffer);
    return Object.assign({ pre: mapper.pre ? stages_1.map_stages(norm_puffer.pre, mapper.pre) : norm_puffer.pre, handle_command: mapper.handle_command ? stages_1.map_stages(norm_puffer.handle_command, mapper.handle_command) : norm_puffer.handle_command, post: mapper.post ? stages_1.map_stages(norm_puffer.post, mapper.post) : norm_puffer.post, css_rules: norm_puffer.css_rules }, utils_1.drop_keys(puffer, 'pre', 'handle_command', 'post', 'css_rules'));
}
exports.map_puffer = map_puffer;
function gate_puffer(cond, puffer) {
    return map_puffer({
        pre: (cb) => {
            if (typeof cb !== 'function') {
                debugger;
            }
            return (world) => {
                if (cond(world)) {
                    return cb(world);
                }
                return world;
            };
        },
        handle_command: (cb) => {
            return (world, parser) => {
                if (!cond(world)) {
                    return parser.eliminate();
                }
                return cb(world, parser);
            };
        },
        post: (cb) => {
            return (new_world, old_world) => {
                if (cond(new_world, false) || cond(old_world, true)) {
                    return cb(new_world, old_world);
                }
                return new_world;
            };
        }
    }, puffer);
}
exports.gate_puffer = gate_puffer;
function knit_puffers(puffers) {
    let normalized = puffers.map(normalize_puffer);
    let handler_stage_levels = {
        pre: [],
        handle_command: [],
        post: []
    };
    for (let prop of ['pre', 'handle_command', 'post']) {
        for (let puffer of normalized) {
            handler_stage_levels[prop].push(...stages_1.stage_keys(puffer[prop]));
        }
        handler_stage_levels[prop] = [...new Set(handler_stage_levels[prop]).values()].sort((a, b) => a - b);
    }
    function iterate(prop, combine) {
        let result = stages_1.stages();
        for (let stage of handler_stage_levels[prop]) {
            let cbs = [];
            for (let p of normalized) {
                if (p[prop].get(stage) !== undefined) {
                    cbs.push(p[prop].get(stage));
                }
            }
            result.set(stage, combine(cbs));
        }
        return result;
    }
    let result = {
        pre: stages_1.stages(),
        handle_command: stages_1.stages(),
        post: stages_1.stages(),
        css_rules: []
    };
    result.pre = iterate('pre', (pres) => (world) => {
        return pres.reduce((acc, p) => p(acc), world);
    });
    result.handle_command = iterate('handle_command', (hcs) => (world, parser) => {
        return parser.split(hcs.map((hc) => () => hc(world, parser)));
    });
    result.post = iterate('post', (posts) => (new_world, old_world) => {
        return posts.reduce((acc, p) => p(acc, old_world), new_world);
    });
    result.css_rules = normalized.flatMap(p => p.css_rules);
    return result;
}
exports.knit_puffers = knit_puffers;
function bake_puffers(puffers) {
    let normalized = puffers.map(normalize_puffer);
    let all_stages = {
        pre: [],
        handle_command: [],
        post: []
    };
    for (let prop of ['pre', 'handle_command', 'post']) {
        for (let puffer of normalized) {
            all_stages[prop].push(...stages_1.stage_keys(puffer[prop]));
        }
        all_stages[prop] = [...new Set(all_stages[prop]).values()].sort((a, b) => a - b);
    }
    function iterate(prop, combine) {
        let result;
        let cbs = [];
        for (let stage of all_stages[prop]) {
            for (let p of normalized) {
                const cb = p[prop].get(stage);
                if (cb !== undefined) {
                    cbs.push(cb);
                }
            }
        }
        return combine(cbs);
    }
    let pre = iterate('pre', (cbs) => (world) => cbs.reduce((acc, cb) => {
        if (typeof cb !== 'function') {
            debugger;
        }
        return cb(acc);
    }, world));
    let handle_command = iterate('handle_command', (cbs) => (world, parser) => parser.split(cbs.map(cb => (p) => cb(world, p))));
    let post = iterate('post', (cbs) => (new_world, old_world) => cbs.reduce((acc, cb) => cb(acc, old_world), new_world));
    let css_rules = puffers.flatMap(p => p.css_rules || []);
    let result = {
        pre,
        handle_command,
        post,
        css_rules
    };
    return result;
}
exports.bake_puffers = bake_puffers;
function make_puffer_world_spec(initial_world, puffer_index) {
    let spec = bake_puffers(puffer_index);
    return world_1.make_world_spec(Object.assign({ initial_world }, spec));
}
exports.make_puffer_world_spec = make_puffer_world_spec;


/***/ }),

/***/ "./src/typescript/story/basic_text.ts":
/*!********************************************!*\
  !*** ./src/typescript/story/basic_text.ts ***!
  \********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
function to_basic_text(story, previous_text = '') {
    let separator = '';
    let added_text = '';
    if (typeof story === 'string') {
        const n = document.createTextNode(story);
        added_text = n.textContent || '';
        separator = ' ';
    }
    else if (story.kind === 'StoryHole') {
        added_text = '> ';
        separator = '\n';
    }
    else {
        if (story.tag === 'span') {
            separator = ' ';
        }
        else {
            separator = '\n';
        }
        for (const child of story.children) {
            added_text += to_basic_text(child, added_text);
        }
    }
    if (added_text.length > 0 && previous_text.length > 0) {
        return separator + added_text;
    }
    return added_text;
}
exports.to_basic_text = to_basic_text;


/***/ }),

/***/ "./src/typescript/story/create.ts":
/*!****************************************!*\
  !*** ./src/typescript/story/create.ts ***!
  \****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const gensym_1 = __webpack_require__(/*! ../lib/gensym */ "./src/typescript/lib/gensym.ts");
const jsx_utils_1 = __webpack_require__(/*! ../lib/jsx_utils */ "./src/typescript/lib/jsx_utils.ts");
const text_utils_1 = __webpack_require__(/*! ../lib/text_utils */ "./src/typescript/lib/text_utils.ts");
const utils_1 = __webpack_require__(/*! ../lib/utils */ "./src/typescript/lib/utils.ts");
function createElement(tag, props, ...deep_children) {
    props = props || {};
    const children = utils_1.flat_deep(deep_children);
    // const children = deep_children.flat(Infinity);
    if (typeof (tag) === 'function') {
        return tag(Object.assign(Object.assign({}, props), { children }));
    }
    const classes = {};
    if (props.className) {
        for (const c of text_utils_1.split_tokens(props.className)) {
            classes[c] = true;
        }
    }
    let data = {};
    if (props.frame_index !== undefined) {
        data.frame_index = props.frame_index;
    }
    if (props.gist !== undefined) {
        data.gist = props.gist;
    }
    const key = gensym_1.gensym();
    const attributes = jsx_utils_1.remove_custom_props(props, { 'frame_index': null, 'gist': null, 'type': null, 'className': null, 'children': null });
    return {
        kind: 'StoryNode',
        key,
        tag,
        classes,
        attributes,
        data,
        children
    };
}
exports.createElement = createElement;


/***/ }),

/***/ "./src/typescript/story/dom.ts":
/*!*************************************!*\
  !*** ./src/typescript/story/dom.ts ***!
  \*************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const story_1 = __webpack_require__(/*! ./story */ "./src/typescript/story/story.ts");
const jsx_utils_1 = __webpack_require__(/*! ../lib/jsx_utils */ "./src/typescript/lib/jsx_utils.ts");
const gist_1 = __webpack_require__(/*! ../gist */ "./src/typescript/gist/index.ts");
// This is pretty ugly, but there's not a good enough reason to
// do something fancier yet
exports.StoryHoleDom = document.createElement('div');
exports.StoryHoleDom.id = 'story-hole';
function story_to_dom(story) {
    if (typeof story === 'string') {
        return document.createTextNode(story);
    }
    else if (story_1.is_story_hole(story)) {
        return exports.StoryHoleDom;
    }
    const elt = document.createElement(story.tag);
    for (const [class_name, on] of Object.entries(story.classes)) {
        if (on) {
            elt.classList.add(class_name);
        }
    }
    for (const [data_attr, val] of Object.entries(story.data)) {
        if (data_attr === 'gist') {
            elt.dataset[data_attr] = gist_1.gist_to_string(val);
        }
        else {
            elt.dataset[data_attr] = '' + val;
        }
    }
    jsx_utils_1.set_attributes(elt, story.attributes);
    for (const c of story.children) {
        elt.appendChild(story_to_dom(c));
    }
    return elt;
}
exports.story_to_dom = story_to_dom;


/***/ }),

/***/ "./src/typescript/story/index.ts":
/*!***************************************!*\
  !*** ./src/typescript/story/index.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./story */ "./src/typescript/story/story.ts"));
__export(__webpack_require__(/*! ./create */ "./src/typescript/story/create.ts"));
__export(__webpack_require__(/*! ./update */ "./src/typescript/story/update/index.ts"));
__export(__webpack_require__(/*! ./dom */ "./src/typescript/story/dom.ts"));
__export(__webpack_require__(/*! ./basic_text */ "./src/typescript/story/basic_text.ts"));


/***/ }),

/***/ "./src/typescript/story/story.ts":
/*!***************************************!*\
  !*** ./src/typescript/story/story.ts ***!
  \***************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const update_1 = __webpack_require__(/*! lib/update */ "./src/typescript/lib/update.ts");
const iterative_1 = __webpack_require__(/*! iterative */ "./node_modules/iterative/dist/index.js");
const type_predicate_utils_1 = __webpack_require__(/*! lib/type_predicate_utils */ "./src/typescript/lib/type_predicate_utils.ts");
const utils_1 = __webpack_require__(/*! lib/utils */ "./src/typescript/lib/utils.ts");
;
function is_story_node(x) {
    return x.kind === 'StoryNode';
}
exports.is_story_node = is_story_node;
function is_story_hole(x) {
    return x.kind === 'StoryHole';
}
exports.is_story_hole = is_story_hole;
function is_path_empty(x) {
    return x.length === 0;
}
exports.is_path_empty = is_path_empty;
function is_path_full(x) {
    return x.length > 0;
}
exports.is_path_full = is_path_full;
function find_node(node, predicate) {
    if (predicate(node)) {
        return [node, []];
    }
    if (is_story_node(node)) {
        for (let i = 0; i < node.children.length; i++) {
            const child = node.children[i];
            const result = find_node(child, predicate);
            if (result !== undefined) {
                const [target, path] = result;
                return [target, [i, ...path]];
            }
        }
    }
    return undefined;
}
exports.find_node = find_node;
function find_all_nodes(node, predicate) {
    const result = [];
    const frontier = [{
            node,
            path: [],
            child_pos: undefined
        }];
    while (frontier.length > 0) {
        const fe = frontier[frontier.length - 1];
        const n = fe.node;
        const p = fe.path;
        if (fe.child_pos === undefined) {
            if (predicate(fe.node)) {
                result.push([n, p]);
            }
            if (!is_story_node(n) || n.children.length === 0) {
                frontier.pop();
                continue;
            }
            fe.child_pos = 0;
        }
        else {
            if (fe.child_pos === n.children.length - 1) {
                frontier.pop();
                continue;
            }
            fe.child_pos++;
        }
        const child_pos = fe.child_pos;
        const children = n.children;
        frontier.push({
            node: children[child_pos],
            path: [...p, child_pos],
            child_pos: undefined
        });
    }
    return result;
}
exports.find_all_nodes = find_all_nodes;
function find_all_nodes_recursive(node, predicate) {
    const result = [];
    if (predicate(node)) {
        result.push([node, []]);
    }
    if (is_story_node(node)) {
        for (let i = 0; i < node.children.length; i++) {
            const child = node.children[i];
            result.push(...find_all_nodes(child, predicate)
                .map(([n, p]) => [n, [i, ...p]]));
        }
    }
    return result;
}
exports.find_all_nodes_recursive = find_all_nodes_recursive;
// Find from a sequence of predicates. Makes it easy to get querySelector-like behavior.
function find_chain(node, predicates) {
    if (predicates.length === 0) {
        return [node, []];
    }
    const xs = find_all_nodes(node, predicates[0]);
    for (const [x, p] of xs) {
        const c = find_chain(x, predicates.slice(0));
        if (c !== undefined && c[0] !== x) {
            return [c[0], [...p, ...c[1]]];
        }
    }
    return undefined;
}
exports.find_chain = find_chain;
function find_all_chain(node, predicates) {
    if (predicates.length === 0) {
        return [[node, []]];
    }
    const result = [];
    const xs = find_all_nodes(node, predicates[0]);
    for (const [x, p] of xs) {
        const cs = find_all_chain(x, predicates.slice(0));
        result.push(...cs
            .filter(([c, cp]) => c !== x)
            .map(([c, cp]) => [c, [...p, ...cp]]));
    }
    return result;
}
exports.find_all_chain = find_all_chain;
function story_lookup_path(node, path) {
    if (path.length === 0) {
        return node;
    }
    if (!is_story_node(node)) {
        throw new Error('Cannot traverse children of terminal node ' + JSON.stringify(node));
    }
    const i = path[0];
    if (i >= node.children.length) {
        return undefined;
    }
    const c = node.children[i];
    return story_lookup_path(c, path.slice(0));
}
exports.story_lookup_path = story_lookup_path;
function path_to(parent, target) {
    if (parent === target) {
        return [];
    }
    if (is_story_node(parent)) {
        for (let i = 0; i < parent.children.length; i++) {
            const child = parent.children[i];
            const p = path_to(child, target);
            if (p === undefined) {
                continue;
            }
            return [i, ...p];
        }
    }
    return undefined;
}
exports.path_to = path_to;
function parent_path(root, path) {
    if (path.length === 0) {
        return [root];
    }
    if (!is_story_node(root)) {
        throw new Error('Element in path had no children.');
    }
    const child = root.children[path[0]];
    return [root, ...parent_path(child, path.slice(1))];
}
exports.parent_path = parent_path;
function replace_in(parent, path, updated) {
    if (path.length === 0) {
        return updated;
    }
    if (!is_story_node(parent)) {
        throw new Error('Tried to replace a child of a non-node.');
    }
    const i = path[0];
    return update_1.update(parent, {
        children: {
            [i]: _ => replace_in(_, path.slice(1), updated)
        }
    });
}
exports.replace_in = replace_in;
function splice_in(parent, path, updated) {
    if (path.length === 0) {
        if (updated.length > 1) {
            throw new Error('Tried to replace single top-level node with a list of fragments.');
        }
        return updated[0];
    }
    if (!is_story_node(parent)) {
        throw new Error('Tried to replace a child of a non-node.');
    }
    if (path.length === 1) {
        return update_1.update(parent, {
            children: _ => {
                const result = [..._];
                result.splice(path[0], 1, ...updated);
                return result;
            }
        });
    }
    return update_1.update(parent, {
        children: {
            [path[0]]: _ => splice_in(_, path.slice(1), updated)
        }
    });
}
exports.splice_in = splice_in;
function structurally_equal(story1, story2) {
    if (story1 === story2) {
        return true;
    }
    const tk1 = type_predicate_utils_1.type_or_kind_name(story1), tk2 = type_predicate_utils_1.type_or_kind_name(story2);
    if (tk1 !== tk2) {
        return false;
    }
    if (tk1 === 'StoryHole') {
        return true;
    }
    type_predicate_utils_1.dangerous_assert(story1);
    type_predicate_utils_1.dangerous_assert(story2);
    if (!utils_1.deep_equal(utils_1.drop_keys(story1, 'key', 'children'), utils_1.drop_keys(story2, 'key', 'children'))) {
        return false;
    }
    for (const [c1, c2] of iterative_1.zipLongest(story1.children, story2.children)) {
        if (c1 === undefined || c2 === undefined) {
            return false;
        }
        if (!(structurally_equal(c1, c2))) {
            return false;
        }
    }
    return true;
}
exports.structurally_equal = structurally_equal;


/***/ }),

/***/ "./src/typescript/story/update/dsl.tsx":
/*!*********************************************!*\
  !*** ./src/typescript/story/update/dsl.tsx ***!
  \*********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const dsl_utils_1 = __webpack_require__(/*! ../../lib/dsl_utils */ "./src/typescript/lib/dsl_utils.ts");
const history_1 = __webpack_require__(/*! ../../history */ "./src/typescript/history.ts");
const parsed_text_1 = __webpack_require__(/*! ../../UI/components/parsed_text */ "./src/typescript/UI/components/parsed_text.tsx");
const utils_1 = __webpack_require__(/*! ../../lib/utils */ "./src/typescript/lib/utils.ts");
const create_1 = __webpack_require__(/*! ../create */ "./src/typescript/story/create.ts");
const op_1 = __webpack_require__(/*! ./op */ "./src/typescript/story/update/op.ts");
const query_1 = __webpack_require__(/*! ./query */ "./src/typescript/story/update/query.ts");
const update_1 = __webpack_require__(/*! ./update */ "./src/typescript/story/update/update.tsx");
exports.Queries = dsl_utils_1.make_dsl((name) => (...params) => query_1.story_query(name, params));
exports.Ops = dsl_utils_1.make_dsl(name => (...params) => op_1.story_op(name, ...params));
class UpdatesBuilder {
    constructor(context = {}) {
        this.context = context;
    }
    ;
    update_context(updater) {
        return new (this.constructor)(utils_1.update(this.context, updater));
    }
    apply(f) {
        return utils_1.flat_deep([f(this)]);
    }
    apply_op(op) {
        const q = utils_1.compute_const(() => {
            if (this.context.query === undefined) {
                return exports.Queries.frame(); //Queries.story_root();
            }
            else {
                return this.context.query;
            }
        });
        if (this.context.would_effect) {
            return {
                kind: 'PushWouldUpdate',
                update_spec: update_1.story_update(q, op)
            };
        }
        return {
            kind: 'PushStoryUpdate',
            group_name: this.context.group_name,
            stage: this.context.group_stage,
            update_spec: update_1.story_update(q, op)
        };
    }
    would(would = true) {
        if (this.context.would_effect !== undefined) {
            throw new Error('Tried to redefine the group name on an UpdatesBuilder.');
        }
        return this.update_context({ would_effect: would });
    }
    group_name(name) {
        if (this.context.group_name !== undefined) {
            throw new Error('Tried to redefine the group name on an UpdatesBuilder.');
        }
        return this.update_context({ group_name: name });
    }
    group_stage(stage) {
        if (this.context.group_stage !== undefined) {
            throw new Error('Tried to redefine the group stage on an UpdatesBuilder.');
        }
        return this.update_context({ group_stage: stage });
    }
    move_group_to(dest_stage) {
        if (this.context.group_name === undefined) {
            throw new Error('Tried to call move_group_to() without defining a group_name.');
        }
        if (this.context.group_stage === undefined) {
            throw new Error('Tried to call move_group_to() without defining a group_stage (source stage).');
        }
        return {
            kind: 'MoveGroup',
            name: this.context.group_name,
            source_stage: this.context.group_stage,
            dest_stage
        };
    }
    to_query_spec() {
        if (this.context.query === undefined) {
            throw new Error("Tried to convert an UpdatesBuilder to query before any query methods were called");
        }
        return this.context.query;
    }
    to_query() {
        return query_1.compile_story_query(this.to_query_spec());
    }
    query(story) {
        return this.to_query()(story);
    }
    prepend_to(update_spec) {
        let b = this;
        if (is_compilation_op(update_spec)) {
            if (update_spec.kind === 'MoveGroup') {
                return update_spec;
            }
            if (update_spec.kind === 'PushWouldUpdate') {
                if (this.context.would_effect === undefined) {
                    b = b.would();
                }
            }
            else {
                if (this.context.group_name === undefined && update_spec.group_name !== undefined) {
                    b = b.group_name(update_spec.group_name);
                }
                if (this.context.group_stage === undefined && update_spec.stage !== undefined) {
                    b = b.group_stage(update_spec.stage);
                }
            }
            update_spec = update_spec.update_spec;
        }
        return b.chain(update_spec.query).apply_op(update_spec.op);
    }
    map_worlds(world, f) {
        const results = [];
        for (const w of history_1.history_array(world).reverse()) {
            const w_frame = this.frame(w.index);
            results.push(f(w, w_frame));
        }
        return utils_1.flat_deep(results); //.flat(Infinity);
    }
}
exports.UpdatesBuilder = UpdatesBuilder;
const TEXT_CATEGORY_NAMES = ['action', 'consequence', 'description', 'prompt'];
// Merge in the implementations to the class proto
for (const prop of TEXT_CATEGORY_NAMES) {
    UpdatesBuilder.prototype[prop] = function (children) {
        let b = this;
        if (b.context.query === undefined) {
            b = b.frame();
        }
        return b
            .children(exports.Updates.has_class('output-text'))
            .children(exports.Updates.has_class(prop))
            .add(children);
    };
}
// function query_method<K extends keyof QueryMethods>(this: UpdatesBuilder, k: K, ...params: ParametersFor<QueryMethods>[K]): UpdatesBuilder {
function query_method(k, ...params) {
    if (k === 'debug' && params[1] === undefined) {
        const e = new Error('Getting current call stack');
        params.push(e.stack);
    }
    const converted_params = params.map(p => p instanceof UpdatesBuilder ?
        p.to_query_spec() :
        p);
    const q = query_1.story_query(k, converted_params);
    const base_query = this.context.query;
    if (base_query === undefined) {
        return this.update_context({
            query: q
        });
    }
    return this.update_context({
        query: _ => exports.Queries.chain(_, q)
    });
}
for (const k of utils_1.keys(query_1.StoryQueries)) {
    UpdatesBuilder.prototype[k] = function (...params) {
        return query_method.call(this, k, ...params);
    };
}
function op_method(k, ...params) {
    const op = op_1.story_op(k, ...params);
    return this.apply_op(op);
}
for (const k of utils_1.keys(op_1.StoryOps)) {
    UpdatesBuilder.prototype[k] = function (...params) {
        return op_method.call(this, k, ...params);
    };
}
exports.Updates = new UpdatesBuilder();
function is_compilation_op(x) {
    const accepted_kinds = {
        MoveGroup: null,
        PushStoryUpdate: null,
        PushWouldUpdate: null
    };
    return utils_1.included(x.kind, utils_1.keys(accepted_kinds));
}
function story_updater(...updates) {
    const flat_updates = utils_1.flat_deep(updates);
    const normalized_updates = flat_updates.map(up => {
        if (is_compilation_op(up)) {
            return up;
        }
        return {
            kind: 'PushStoryUpdate',
            update_spec: up
        };
    });
    return (prev_updates) => [...prev_updates, ...normalized_updates];
}
exports.story_updater = story_updater;
exports.add_input_text = (world, parsing) => {
    return utils_1.update(world, {
        story_updates: story_updater(exports.Updates
            .group_name('init_frame')
            .frame(world.index).first(exports.Updates.has_class('input-text'))
            .add(create_1.createElement(parsed_text_1.ParsedTextStory, { parsing: parsing }), true))
    });
};
exports.EmptyFrame = (props) => create_1.createElement("div", { className: "frame", frame_index: props.index },
    create_1.createElement("div", { className: "input-text" }),
    create_1.createElement("div", { className: "output-text" },
        create_1.createElement("div", { className: TEXT_CATEGORY_NAMES[0] }),
        create_1.createElement("div", { className: TEXT_CATEGORY_NAMES[1] }),
        create_1.createElement("div", { className: TEXT_CATEGORY_NAMES[2] }),
        create_1.createElement("div", { className: TEXT_CATEGORY_NAMES[3] })));
exports.Hole = (props) => {
    return { kind: 'StoryHole' };
};
exports.init_story = create_1.createElement("div", { className: "story" },
    create_1.createElement(exports.EmptyFrame, { index: 0 }),
    create_1.createElement(exports.Hole, null));
function init_story_updates(new_index) {
    return [
        exports.Updates
            .group_name('init_frame')
            .story_hole()
            .replace([
            create_1.createElement(exports.EmptyFrame, { index: new_index }),
            create_1.createElement(exports.Hole, null)
        ])
    ];
}
exports.init_story_updates = init_story_updates;
// consider using a pattern language for story transformations like this


/***/ }),

/***/ "./src/typescript/story/update/index.ts":
/*!**********************************************!*\
  !*** ./src/typescript/story/update/index.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
Object.defineProperty(exports, "__esModule", { value: true });
__export(__webpack_require__(/*! ./query */ "./src/typescript/story/update/query.ts"));
__export(__webpack_require__(/*! ./update */ "./src/typescript/story/update/update.tsx"));
__export(__webpack_require__(/*! ./op */ "./src/typescript/story/update/op.ts"));
__export(__webpack_require__(/*! ./update_group */ "./src/typescript/story/update/update_group.ts"));
__export(__webpack_require__(/*! ./dsl */ "./src/typescript/story/update/dsl.tsx"));


/***/ }),

/***/ "./src/typescript/story/update/op.ts":
/*!*******************************************!*\
  !*** ./src/typescript/story/update/op.ts ***!
  \*******************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const story_1 = __webpack_require__(/*! ../story */ "./src/typescript/story/story.ts");
const dom_1 = __webpack_require__(/*! ../dom */ "./src/typescript/story/dom.ts");
const utils_1 = __webpack_require__(/*! ../../lib/utils */ "./src/typescript/lib/utils.ts");
const gist_1 = __webpack_require__(/*! ../../gist */ "./src/typescript/gist/index.ts");
const styles_1 = __webpack_require__(/*! UI/styles */ "./src/typescript/UI/styles.ts");
function story_op(name, ...parameters) {
    return { name, parameters };
}
exports.story_op = story_op;
// TODO: Possibly update the key on updated nodes.
exports.StoryOps = {
    add: (children, no_animate) => (parent, effects) => {
        if (!story_1.is_story_node(parent)) {
            throw new Error('Tried to append children to terminal node ' + JSON.stringify(parent));
        }
        if (children instanceof Array) {
            return children.reduce((p, c) => exports.StoryOps.add(c, no_animate)(p, effects), parent);
        }
        if (!no_animate) {
            if (!story_1.is_story_node(children)) {
                console.warn('Tried to animate adding a TextNode. Should be wrapped in a div or span.');
            }
            else {
                children = utils_1.update(children, {
                    // classes: { ['eph-new']: true }
                    classes: { [styles_1.eph_new]: true }
                });
            }
        }
        if (effects) {
            effects.push(dom => {
                const child_dom = dom_1.story_to_dom(children);
                dom.appendChild(child_dom);
            });
        }
        return utils_1.update(parent, {
            children: utils_1.append(children)
        });
    },
    insert_after: (nodes, no_animate) => (elt, effects) => {
        if (!no_animate) {
            const add_animation_class = (node) => {
                if (!story_1.is_story_node(node)) {
                    console.warn('Tried to animate adding a TextNode. Should be wrapped in a div or span.');
                    return node;
                }
                return utils_1.update(node, {
                    // classes: { ['eph-new']: true }
                    classes: { [styles_1.eph_new]: true }
                });
            };
            if (nodes instanceof Array) {
                nodes = nodes.map(add_animation_class);
            }
            else {
                nodes = add_animation_class(nodes);
            }
        }
        if (effects) {
            effects.push(dom => {
                if (nodes instanceof Array) {
                    dom.replaceWith(dom, ...nodes.map(dom_1.story_to_dom));
                }
                else {
                    dom.replaceWith(dom, dom_1.story_to_dom(nodes));
                }
            });
        }
        if (nodes instanceof Array) {
            return [elt, ...nodes];
        }
        else {
            return [elt, nodes];
        }
    },
    css: (updates) => (elt, effects) => {
        if (!story_1.is_story_node(elt)) {
            throw new Error('Tried to update CSS on non-StoryNode ' + JSON.stringify(elt));
        }
        updates = Object.assign({}, updates);
        for (const [cls, on] of Object.entries(updates)) {
            if (!!on !== !!elt.classes[cls]) {
                updates[`eph_${on ? 'adding' : 'removing'}_${cls}`] = true;
            }
        }
        if (effects) {
            effects.push(dom => {
                for (const [cls, on] of Object.entries(updates)) {
                    // if (cls.startsWith('interpreting') || cls.startsWith('eph_adding_interpreting')) {
                    //     debugger;
                    // }
                    dom.classList.toggle(cls, on);
                }
            });
        }
        return utils_1.update(elt, {
            classes: updates
        });
    },
    remove_eph: () => (elt, effects) => {
        if (!story_1.is_story_node(elt)) {
            throw new Error('Tried to update CSS on non-StoryNode ' + JSON.stringify(elt));
        }
        return utils_1.update(elt, {
            classes: _ => utils_1.map_values(_, (on, cls) => {
                if (on && cls.startsWith('eph')) {
                    if (effects) {
                        effects.push(dom => {
                            dom.classList.remove(cls);
                        });
                    }
                    return false;
                }
                return on;
            })
        });
    },
    remove: () => (elt, effects) => {
        if (effects) {
            effects.push(dom => dom.remove());
        }
        return [];
    },
    replace: (replacement) => (elt, effects) => {
        if (effects) {
            effects.push(dom => {
                if (replacement instanceof Array) {
                    dom.replaceWith(...replacement.map(dom_1.story_to_dom));
                }
                else {
                    dom.replaceWith(dom_1.story_to_dom(replacement));
                }
            });
        }
        return replacement;
    },
    replace_children: (replacement) => (elt, effects) => {
        if (!story_1.is_story_node(elt)) {
            throw new Error('Tried to replace the children on a non-story-node element.');
        }
        if (effects) {
            effects.push(dom => {
                dom.childNodes.forEach(c => c.remove());
                if (replacement instanceof Array) {
                    for (const new_elt of replacement.map(dom_1.story_to_dom)) {
                        dom.appendChild(new_elt);
                    }
                }
                else {
                    dom.appendChild(dom_1.story_to_dom(replacement));
                }
            });
        }
        return utils_1.update(elt, {
            children: () => replacement
        });
    },
    set_gist: (gist_param) => (elt, effects) => {
        if (!story_1.is_story_node(elt)) {
            throw new Error('Tried to update the gist on a non-story-node element.');
        }
        if (effects) {
            effects.push(dom => {
                dom.dataset.gist = gist_1.gist_to_string(gist_param);
            });
        }
        return utils_1.update(elt, {
            data: { gist: () => gist_param }
        });
    }
};
function compile_story_update_op(op_spec) {
    const f = exports.StoryOps[op_spec.name];
    return f.apply(null, op_spec.parameters);
    // return (StoryUpdateOps[op_spec.name] as (...params: StoryOpSpec['parameters']) => StoryOp)(...op_spec.parameters);
}
exports.compile_story_update_op = compile_story_update_op;


/***/ }),

/***/ "./src/typescript/story/update/query.ts":
/*!**********************************************!*\
  !*** ./src/typescript/story/update/query.ts ***!
  \**********************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = __webpack_require__(/*! ../../lib/utils */ "./src/typescript/lib/utils.ts");
const story_1 = __webpack_require__(/*! ../story */ "./src/typescript/story/story.ts");
const gist_1 = __webpack_require__(/*! ../../gist */ "./src/typescript/gist/index.ts");
function compile_story_query(query_spec) {
    const f = exports.StoryQueries[query_spec.name];
    const query = f.apply(null, query_spec.parameters);
    return query;
}
exports.compile_story_query = compile_story_query;
function story_query(name, parameters = []) {
    return { name, parameters };
}
exports.story_query = story_query;
exports.StoryQueries = {
    debug: (label, stack) => root => {
        console.log('Debugging a story query: ' + label);
        if (stack !== undefined) {
            console.log(stack);
        }
        debugger;
        return [[root, []]];
    },
    path: (path) => root => {
        const result = [];
        const found = story_1.story_lookup_path(root, path);
        if (found !== undefined) {
            result.push([found, path]);
        }
        return result;
    },
    key: (key) => root => {
        const result = [];
        const found = story_1.find_node(root, n => story_1.is_story_node(n) && n.key === key);
        if (found !== undefined) {
            result.push(found);
        }
        return result;
    },
    first: (subquery) => root => {
        const results = compile_story_query(subquery)(root);
        return results.slice(0, 1);
    },
    first_level: (subquery) => root => {
        const results = compile_story_query(subquery)(root);
        function is_prefix(p1, p2) {
            if (p1.length > p2.length) {
                return false;
            }
            for (let i = 0; i < p1.length; i++) {
                if (p1[i] !== p2[i]) {
                    return false;
                }
            }
            return true;
        }
        return results.filter(r1 => !results.some(r2 => r1 !== r2 && is_prefix(r2[1], r1[1])));
    },
    story_root: () => story => [[story, []]],
    story_hole: () => (story) => {
        const result = story_1.find_all_nodes(story, n => story_1.is_story_hole(n));
        if (result.length !== 1) {
            throw new Error(`Found ${result.length} story holes. There should only ever be one.`);
        }
        return result;
    },
    eph: () => (story) => story_1.find_all_nodes(story, exports.eph_predicate),
    has_class: (cls) => (story) => story_1.find_all_nodes(story, (n) => story_1.is_story_node(n) &&
        (typeof (cls) === 'string'
            ? !!n.classes[cls]
            : Object.entries(n.classes)
                .some(([c, on]) => on && cls.test(c)))),
    frame: (index) => (story) => {
        let found;
        // if index is null, find the highest frame
        if (index === undefined) {
            return latest_frame(story);
        }
        else if (index instanceof Array) {
            return story_1.find_all_nodes(story, (n) => story_1.is_story_node(n) && utils_1.included(n.data.frame_index, index));
        }
        else {
            return story_1.find_all_nodes(story, (n) => story_1.is_story_node(n) && n.data.frame_index === index);
        }
    },
    chain: (...queries) => (story) => {
        if (queries.length === 0) {
            return [[story, []]];
        }
        const results0 = compile_story_query(queries[0])(story);
        const rest = queries.slice(1);
        const results = results0
            .flatMap(([n1, p1]) => exports.StoryQueries['chain'](...rest)(n1)
            .map(([n2, p2]) => [n2, [...p1, ...p2]]));
        //dedupe
        const uniq_matches = [];
        for (const r of results) {
            if (!uniq_matches.find(([n]) => n === r[0])) {
                uniq_matches.push(r);
            }
        }
        return uniq_matches;
    },
    children: (subquery) => (story) => {
        if (!story_1.is_story_node(story)) {
            return [];
        }
        const result = story.children.map((child, i) => [child, [i]]);
        if (subquery !== undefined) {
            const q = compile_story_query(subquery);
            return result.filter(([n, p]) => q(n).find(([f, p]) => f === n) !== undefined);
        }
        return result;
    },
    has_gist: (pat) => (story) => story_1.find_all_nodes(story, (n) => story_1.is_story_node(n) && n.data.gist !== undefined && gist_1.match(n.data.gist)(pat))
};
// StoryQueryIndex.initialize('path', (path) =>
//     root => {
//         const result: FoundNode[] = []
//         const found = story_lookup_path(root, path)
//         if (found !== null) {
//             result.push([found, path]);
//         }
//         return result;
//     });
// StoryQueryIndex.initialize('key', (key) =>
//     root => {
//         const result: FoundNode[] = []
//         const found = find_node(root, n => is_story_node(n) && n.key === key);
//         if (found !== null) {
//             result.push(found);
//         }
//         return result;
//     });
// StoryQueryIndex.initialize('first', (subquery) =>
//     root => {
//         const results = compile_story_query(subquery)(root);
//         return results.slice(0,1);
//     });
// StoryQueryIndex.initialize('story_root', () => story => [[story, []]]);
// StoryQueryIndex.initialize('story_hole', () =>
//     (story) => {
//         const result = find_all_nodes(story, n => is_story_hole(n));
//         if (result.length !== 1) {
//             throw new Error(`Found ${result.length} story holes. There should only ever be one.`);
//         }
//         return result;
//     })
exports.eph_predicate = (n) => {
    if (!story_1.is_story_node(n)) {
        return false;
    }
    for (const cls in n.classes) {
        if (n.classes[cls] && cls.startsWith('eph')) {
            return true;
        }
    }
    return false;
};
// StoryQueryIndex.initialize('eph', () =>
//     (story) => find_all_nodes(story, eph_predicate));
// StoryQueryIndex.initialize('has_class', (cls) => 
//     (story) => find_all_nodes(story,
//         (n) => is_story_node(n) &&
//             (typeof(cls) === 'string'
//                 ? !!n.classes[cls]
//                 : Object.entries(n.classes)
//                     .some(([c, on]) =>
//                         on && (cls as RegExp).test(c)))));
// StoryQueryIndex.initialize('has_gist', (gist_pat) =>
//     (story) => find_all_nodes(story,
//         (n) => is_story_node(n) && gist_matches())
// )
function is_frame_predicate(n) {
    return story_1.is_story_node(n) && n.data.frame_index !== undefined;
}
function latest_frame(story) {
    if (!story_1.is_story_node(story)) {
        return [];
    }
    const frames = story_1.find_all_nodes(story, is_frame_predicate);
    if (frames.length > 0) {
        let max_frame = frames[0];
        for (let i = 1; i < frames.length; i++) {
            const f = frames[i];
            if (max_frame[0].data.frame_index < f[0].data.frame_index) {
                max_frame = f;
            }
        }
        return [max_frame];
    }
    else {
        return [];
    }
}
// StoryQueryIndex.initialize('frame', (index?) =>
//     (story) => {
//         let found: FoundNode[];
//         // if index is null, find the highest frame
//         if (index === undefined) {
//             return latest_frame(story);
//         } else if (index instanceof Array) {
//             return find_all_nodes(story,
//                 (n) => is_story_node(n) && included(n.data.frame_index, index));
//         } else {
//             return find_all_nodes(story,
//                 (n) => is_story_node(n) && n.data.frame_index === index);
//         }
//     });
// StoryQueryIndex.initialize('chain', (...queries) =>
//     (story) => {
//         if (queries.length === 0) {
//             return [[story, []]];
//         }
//         const results = compile_story_query(queries[0])(story);
//         return results
//             // .filter(([n1,]) => n1 !== story)
//             .flatMap(([n1, p1]) =>
//                 StoryQueryIndex.get('chain')(...queries.slice(1))(n1)
//                     .map(([n2, p2]) => [n2, [...p1, ...p2]] as FoundNode)
//         );
//     });
// StoryQueryIndex.initialize('children', (subquery?) =>
//     (story) => {
//         if (!is_story_node(story)){
//             return [];
//         }
//         const result = story.children.map((child, i) => [child, [i]] as FoundNode);
//         if (subquery !== undefined) {
//             const q = compile_story_query(subquery);
//             return result.filter(([n, p]) => 
//                 q(n).find(([f, p]) => f === n) !== undefined
//             );
//         }
//         return result;
//     });


/***/ }),

/***/ "./src/typescript/story/update/update.tsx":
/*!************************************************!*\
  !*** ./src/typescript/story/update/update.tsx ***!
  \************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const stages_1 = __webpack_require__(/*! ../../lib/stages */ "./src/typescript/lib/stages.ts");
const story_1 = __webpack_require__(/*! ../story */ "./src/typescript/story/story.ts");
const op_1 = __webpack_require__(/*! ./op */ "./src/typescript/story/update/op.ts");
const query_1 = __webpack_require__(/*! ./query */ "./src/typescript/story/update/query.ts");
const update_group_1 = __webpack_require__(/*! ./update_group */ "./src/typescript/story/update/update_group.ts");
const utils_1 = __webpack_require__(/*! lib/utils */ "./src/typescript/lib/utils.ts");
function story_update(query, op) {
    return { query, op };
}
exports.story_update = story_update;
function dom_lookup_path(elt, path) {
    if (path.length === 0) {
        return elt;
    }
    if (!(elt instanceof HTMLElement)) {
        throw new Error('Tried to get child of non HTMLElement');
    }
    const child = elt.childNodes[path[0]];
    if (!(child instanceof HTMLElement) && !(child instanceof Text)) {
        throw new Error('Encountered unexpected child in get_path_dom: ' + child);
    }
    return dom_lookup_path(child, path.slice(1));
}
exports.dom_lookup_path = dom_lookup_path;
function sort_targets(targets) {
    // sort the deepest and last children first
    // this guarantees that no parent will be updated before its children
    // and no child array's indices will move before its children are updated
    return [...targets].sort(([, path1], [, path2]) => {
        if (path2.length !== path1.length) {
            return path2.length - path1.length;
        }
        for (let i = 0; i < path1.length; i++) {
            if (path1[i] !== path2[i]) {
                return path2[i] - path1[i];
            }
        }
        return 0;
    });
}
exports.sort_targets = sort_targets;
function compile_story_update(story_update) {
    const result = ((story, effects) => {
        const targets = query_1.compile_story_query(story_update.query)(story);
        const op = op_1.compile_story_update_op(story_update.op);
        if (targets.length === 0 && story_update.op.name !== 'remove_eph') {
            console.log('Got to an op with no found targets:');
            console.log(JSON.stringify(story_update, undefined, 2));
        }
        for (const [target, path] of sort_targets(targets)) {
            const updated_child = op(target, effects ? effects.then(dom => dom_lookup_path(dom, path)) : undefined);
            let result;
            if (updated_child instanceof Array) {
                result = story_1.splice_in(story, path, updated_child);
            }
            else {
                result = story_1.replace_in(story, path, updated_child);
            }
            if (result === undefined) {
                throw new Error('Update deleted the entire story: ' + JSON.stringify(story_update));
            }
            if (!story_1.is_story_node(result)) {
                throw new Error('Update replaced the story root with invalid value: ' + JSON.stringify(result));
            }
            story = result;
        }
        return story;
    });
    const func_name = `update_story_${story_update.query.name}_${story_update.op.name}`;
    Object.defineProperty(result, 'name', { value: func_name, writable: false });
    return result;
}
exports.compile_story_update = compile_story_update;
function apply_story_update(story, story_update, effects) {
    return compile_story_update(story_update)(story, effects);
}
exports.apply_story_update = apply_story_update;
function compile_story_updates_stage(story_updates, stage_number) {
    const group_fs = [];
    for (const group of story_updates) {
        const compiled_updates = group.update_specs.map(compile_story_update);
        const group_f = (story, effects) => {
            let result = story;
            for (const update_f of compiled_updates) {
                result = update_f(result, effects);
            }
            return result;
        };
        const group_f_name = utils_1.compute_const(() => {
            let result = 'group_updater_' + group.name;
            if (stage_number !== undefined) {
                result += '_stage_' + stage_number;
            }
            return result;
        });
        Object.defineProperty(group_f, 'name', { value: group_f_name, writable: false });
        group_fs.push(group_f);
    }
    return group_fs;
}
function apply_story_updates_stage(story, story_updates, effects, stage_number) {
    const group_fs = compile_story_updates_stage(story_updates, stage_number);
    let result = story;
    for (const gf of group_fs) {
        result = gf(result, effects);
    }
    return result;
    // return story_updates.reduce((story, update_group) => 
    //     update_group.update_specs.reduce((story, update) =>
    //         apply_story_update(story, update, effects),
    //         story),
    //     story);
}
exports.apply_story_updates_stage = apply_story_updates_stage;
function remove_eph(story, effects) {
    return apply_story_update(story, story_update(query_1.story_query('eph'), op_1.story_op('remove_eph')), effects);
}
exports.remove_eph = remove_eph;
function apply_story_updates_all(story, story_updates) {
    let result = story;
    const plan = compile_story_update_group_ops(story_updates);
    for (const [stage, updates] of stages_1.stage_entries(plan.effects)) {
        result = apply_story_updates_stage(result, updates, undefined, stage);
        result = remove_eph(result);
    }
    return result;
}
exports.apply_story_updates_all = apply_story_updates_all;
function compile_story_update_group_ops(updates, prev_plan) {
    let plan = utils_1.compute_const(() => {
        if (prev_plan === undefined) {
            return { effects: stages_1.stages(), would_effects: [] };
        }
        return prev_plan;
    });
    for (const op of updates) {
        plan = update_group_1.apply_story_update_compilation_op(plan, op);
    }
    return plan;
}
exports.compile_story_update_group_ops = compile_story_update_group_ops;


/***/ }),

/***/ "./src/typescript/story/update/update_group.ts":
/*!*****************************************************!*\
  !*** ./src/typescript/story/update/update_group.ts ***!
  \*****************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const stages_1 = __webpack_require__(/*! ../../lib/stages */ "./src/typescript/lib/stages.ts");
const utils_1 = __webpack_require__(/*! ../../lib/utils */ "./src/typescript/lib/utils.ts");
function apply_story_update_compilation_op(plan, op) {
    var _a;
    if (op.kind === 'MoveGroup') {
        return {
            effects: move_group(plan.effects, op.name, op.source_stage, op.dest_stage),
            would_effects: plan.would_effects
        };
    }
    if (op.kind === 'PushWouldUpdate') {
        return utils_1.update(plan, {
            would_effects: utils_1.append(op.update_spec)
        });
    }
    const group_name = (_a = op.group_name, (_a !== null && _a !== void 0 ? _a : 'updates'));
    let group_index = undefined;
    let stage = op.stage;
    function find_group_index(groups) {
        return groups.findIndex(g => g.name === group_name);
    }
    if (stage === undefined) {
        for (const [s, groups] of stages_1.stage_entries(plan.effects)) {
            const idx = find_group_index(groups);
            if (idx !== -1) {
                stage = s;
                group_index = idx;
            }
        }
    }
    if (stage === undefined) {
        stage = 0;
    }
    if (!plan.effects.has(stage)) {
        group_index = -1;
    }
    if (group_index === undefined) {
        group_index = find_group_index(plan.effects.get(stage));
    }
    if (group_index === -1) {
        return utils_1.update(plan, {
            effects: stages_1.stages([stage, utils_1.append({
                    kind: 'StoryUpdateGroup',
                    name: group_name,
                    update_specs: [op.update_spec]
                })])
        });
    }
    else {
        return utils_1.update(plan, {
            effects: stages_1.stages([stage, {
                    [group_index]: {
                        update_specs: utils_1.append(op.update_spec)
                    }
                }])
        });
    }
}
exports.apply_story_update_compilation_op = apply_story_update_compilation_op;
function move_group(plan, name, source_stage, dest_stage) {
    if (source_stage === dest_stage) {
        throw new Error('source_stage and dest_stage cannot be equal');
    }
    const found_grp_i = (plan.get(source_stage) || []).findIndex(g => g.name === name);
    if (found_grp_i === -1) {
        return plan;
    }
    const found_grp = plan.get(source_stage)[found_grp_i];
    return utils_1.update(plan, stages_1.stages([source_stage, {
            [found_grp_i]: undefined
        }], [dest_stage, utils_1.append(found_grp)]));
}
exports.move_group = move_group;


/***/ }),

/***/ "./src/typescript/supervenience.ts":
/*!*****************************************!*\
  !*** ./src/typescript/supervenience.ts ***!
  \*****************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
const world_1 = __webpack_require__(/*! ./world */ "./src/typescript/world.tsx");
const parser_1 = __webpack_require__(/*! ./parser */ "./src/typescript/parser/index.ts");
const utils_1 = __webpack_require__(/*! ./lib/utils */ "./src/typescript/lib/utils.ts");
const history_1 = __webpack_require__(/*! ./history */ "./src/typescript/history.ts");
function default_narrative_space() {
    return [w => utils_1.drop_keys(w, 'previous', 'index', 'parsing')];
}
function get_score(w, goals) {
    return goals.map(g => g(w)).reduce((acc, goal_met) => acc + (goal_met ? 1 : 0), 0);
}
// do a breadth-first search of possible futures for some goal state
function search_future(spec, world) {
    if (is_simulated(spec.simulator_id, world)) {
        // A future search for this world's timeline is already running.
        // Recursive future searches are most likely too inefficient to allow, so
        // we return undefined in this case, indicating to the caller who would have
        // conducted the future search that she is already in a simulation, and should
        // therefore only take atomic/non-recursive actions.
        return {
            kind: 'FutureSearchResult',
            status: 'InSimulation',
            result: undefined,
            stats: undefined
        };
    }
    if (spec.search_id !== undefined) {
        let cached_result = lookup_cache(spec.search_id, world);
        if (cached_result !== undefined) {
            return cached_result;
        }
    }
    try {
        function cache(result) {
            return cache_search_result(spec, world, result);
        }
        begin_search(spec.simulator_id, world);
        if (spec.space === undefined) {
            spec = Object.assign(Object.assign({}, spec), { space: default_narrative_space() });
        }
        let n_skipped = 0;
        const visited = [[
                world,
                spec.space.map(dim => dim(world)),
                get_score(world, spec.goals)
            ]];
        let i = 0;
        let anchor = 0;
        function make_stats(steps_in_solution) {
            return {
                iterations: i,
                steps_in_solution,
                states_enumerated: visited.length,
                states_skipped: n_skipped
            };
        }
        lup: while (spec.give_up_after === undefined || i < spec.give_up_after) {
            const next_index = visited.length - 1 - i;
            if (next_index < 0) {
                // Failed future world search, goal is unreachable
                // (If max_steps was set in the spec, it could be due to no solution being available in max_steps)
                return cache({
                    kind: 'FutureSearchResult',
                    status: 'Unreachable',
                    result: undefined,
                    stats: make_stats()
                });
            }
            const [w, pos, score] = visited[next_index];
            if (score === spec.goals.length) {
                let n_turns = w.index - world.index;
                return cache({
                    kind: 'FutureSearchResult',
                    status: 'Found',
                    result: w,
                    stats: make_stats(n_turns)
                });
            }
            if (spec.max_steps !== undefined && w.index - world.index >= spec.max_steps) {
                i++;
                continue;
            }
            const transitions = parser_1.traverse_thread(spec.thread_maker(w), spec.command_filter !== undefined
                ? (cmd) => spec.command_filter(w, cmd)
                : undefined);
            const neighbor_states = Object.values(transitions);
            if (neighbor_states.length === 0) {
                throw new Error('Future search reached a non-goal terminal state');
            }
            for (let parse_result of neighbor_states) {
                const dest = world_1.add_parsing(parse_result.result, parse_result.parsing, w.index + 1);
                const dest_pos = spec.space.map(dim => dim(dest));
                const dest_score = get_score(dest, spec.goals);
                if (dest_score > score) {
                    // skip ahead to only search from this node now
                    visited.unshift([dest, dest_pos, dest_score]);
                    n_skipped += visited.length - 1 - i;
                    i = visited.length - 1;
                    anchor = i;
                    continue lup;
                }
                else if (dest_score < score) {
                    n_skipped++;
                }
                else if (!visited.slice(0, visited.length - anchor).some(([, pos]) => dest_pos.every((d, j) => utils_1.deep_equal(d, pos[j])))) {
                    visited.unshift([dest, dest_pos, dest_score]);
                }
                else {
                    n_skipped++;
                }
            }
            i++;
        }
        return cache({
            kind: 'FutureSearchResult',
            status: 'Timeout',
            result: undefined,
            stats: make_stats()
        });
    }
    finally {
        end_search(spec.simulator_id, world);
    }
}
exports.search_future = search_future;
const ACTIVE_SIMULATORS = {};
function is_simulated(simulator_id, world) {
    if (!(simulator_id in ACTIVE_SIMULATORS)) {
        return false;
    }
    const entry = ACTIVE_SIMULATORS[simulator_id];
    return history_1.find_historical(world, w => entry.has(w)) !== undefined;
}
exports.is_simulated = is_simulated;
function begin_search(simulator_id, world) {
    let entry;
    if (simulator_id in ACTIVE_SIMULATORS) {
        entry = ACTIVE_SIMULATORS[simulator_id];
    }
    else {
        entry = ACTIVE_SIMULATORS[simulator_id] = new Set();
    }
    entry.add(world);
}
function end_search(simulator_id, world) {
    let entry = ACTIVE_SIMULATORS[simulator_id];
    entry.delete(world);
    if (entry.size === 0) {
        delete ACTIVE_SIMULATORS[simulator_id];
    }
}
const cache_size = 1000;
const cached_searches = {};
function cache_search_result(search_spec, world, search_result) {
    if (search_spec.search_id === undefined) {
        return search_result;
    }
    let entry;
    if (search_spec.search_id in cached_searches) {
        entry = cached_searches[search_spec.search_id];
    }
    else {
        entry = cached_searches[search_spec.search_id] = {
            kind: 'CacheEntry',
            spec: search_spec,
            results: []
        };
    }
    let position = get_position(search_spec, world);
    let match = find_in_entry(entry, position);
    if (match === undefined) {
        entry.results.push({ world, position, result: search_result });
        if (cached_searches[search_spec.search_id] === undefined) {
            cached_searches[search_spec.search_id] = entry;
        }
    }
    let search_ids = Object.keys(cached_searches);
    if (search_ids.length > cache_size) {
        for (let sid of search_ids.slice(0, search_ids.length - cache_size)) {
            delete cached_searches[sid];
        }
    }
    return search_result;
}
function find_in_entry(entry, world_position) {
    for (let result of entry.results) {
        if (utils_1.deep_equal(world_position, result.position)) {
            return result;
        }
    }
    return undefined;
}
function lookup_cache(search_id, world) {
    let entry = cached_searches[search_id];
    if (entry === undefined) {
        return undefined;
    }
    let match = find_in_entry(entry, get_position(entry.spec, world));
    if (match === undefined) {
        return undefined;
    }
    return match.result;
}
function get_position(spec, world) {
    let space;
    if (spec.space === undefined) {
        space = default_narrative_space();
    }
    else {
        space = spec.space;
    }
    return space.map(d => d(world));
}
/*
    TODO
    For the narrative dimensions, each narrative dimension can be paired with a command filter.

    This would be useful for fully automating the bright/dim text logic.

    A command is bright if it participates in a shortest path to advancing in a narrative dimension
*/ 


/***/ }),

/***/ "./src/typescript/world.tsx":
/*!**********************************!*\
  !*** ./src/typescript/world.tsx ***!
  \**********************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";

Object.defineProperty(exports, "__esModule", { value: true });
/*

    This module provides the highest level abstractions about game state and history.
    
    It defines what comprises the game state, including
        user input
        parse results
        current world state
        current world message
        past world states/messages
        history interpretation tags

    Notable concerns:
        All game state has to be serializable (for save/load)
            Meaning, functions/closures either can't be part of the state, or we need to define a serialization protocol for them
        Infinite undo (so all previous states must be saved at all time)



*/
const utils_1 = __webpack_require__(/*! ./lib/utils */ "./src/typescript/lib/utils.ts");
const parser_1 = __webpack_require__(/*! ./parser */ "./src/typescript/parser/index.ts");
const story_1 = __webpack_require__(/*! ./story */ "./src/typescript/story/index.ts");
const cache_1 = __webpack_require__(/*! lib/cache */ "./src/typescript/lib/cache.ts");
const INITIAL_WORLD = {
    story: story_1.init_story,
    story_updates: [],
    parsing: undefined,
    previous: undefined,
    index: 0
};
// Helper to return INITIAL_WORLD constant as any kind of W type.
function get_initial_world() {
    return INITIAL_WORLD;
}
exports.get_initial_world = get_initial_world;
function make_world_spec(spec) {
    return spec;
}
exports.make_world_spec = make_world_spec;
function update_thread_maker(spec) {
    return (world) => make_update_thread(spec, world);
}
exports.update_thread_maker = update_thread_maker;
const update_thread_cache = new cache_1.LruCacheObj(20);
function make_update_thread(spec, world) {
    if (update_thread_cache.has(world)) {
        return update_thread_cache.get(world);
    }
    let next_state = world;
    const new_index = world.index + 1;
    next_state = utils_1.update(next_state, {
        previous: _ => world,
        index: _ => new_index,
        story: _ => story_1.apply_story_updates_all(_, world.story_updates),
        story_updates: () => story_1.init_story_updates(new_index),
        parsing: () => undefined
    });
    if (spec.pre !== undefined) {
        next_state = spec.pre(next_state);
    }
    function update_thread(parser) {
        let next_state2 = spec.handle_command(next_state, parser);
        if (parser_1.failed(next_state2)) {
            return next_state2;
        }
        if (spec.post !== undefined) {
            next_state2 = spec.post(next_state2, world);
        }
        return next_state2;
    }
    update_thread_cache.set(world, update_thread);
    return update_thread;
}
exports.make_update_thread = make_update_thread;
function add_parsing(world, parsing, index) {
    if (world.index === index) {
        return utils_1.update(world, { parsing: () => parsing }, _ => story_1.add_input_text(_, parsing));
    }
    return utils_1.update(world, {
        previous: _ => add_parsing(_, parsing, index)
    });
}
exports.add_parsing = add_parsing;
function apply_command(spec, world, command) {
    let thread = make_update_thread(spec, world);
    let result = parser_1.Parser.run_thread(command, thread);
    if (result.kind === 'NotParsed') {
        let possible_world = undefined;
        // TODO: Do a bunch more validation here to make sure we're good
        if (result.parsing.view.submittable) {
            possible_world = apply_command(spec, world, utils_1.update(command, { submit: true })).world;
        }
        return {
            kind: 'CommandResult',
            parsing: result.parsing,
            world: world,
            possible_world
        };
    }
    let w = result.result;
    w = add_parsing(w, result.parsing, world.index + 1);
    let next_parsing = apply_command(spec, w, parser_1.raw('', false)).parsing;
    return {
        kind: 'CommandResult',
        parsing: next_parsing,
        world: w,
        possible_world: undefined
    };
}
exports.apply_command = apply_command;
function world_driver(spec) {
    function update(world, command) {
        return apply_command(spec, world, command);
    }
    let initial_result = update(spec.initial_world, parser_1.raw('', false));
    let thread_maker = (world) => make_update_thread(spec, world);
    return {
        initial_result,
        update,
        thread_maker,
        css_rules: spec.css_rules
    };
}
exports.world_driver = world_driver;
/*
TODO:
    World Validator, tests out a world by fully traversing its command space
        - Find any states that produced invalid commands
            Raised an error given an input
            Did not accept a submit token at the end


*/ 


/***/ })

/******/ });
//# sourceMappingURL=venience.js.map